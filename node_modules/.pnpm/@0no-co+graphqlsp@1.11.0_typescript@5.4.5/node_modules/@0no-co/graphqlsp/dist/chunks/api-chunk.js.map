{"version":3,"file":"api-chunk.js","sources":["../../src/ts/index.js","../../../../node_modules/.pnpm/graphql-language-service@5.2.0_graphql@16.8.1/node_modules/graphql-language-service/esm/parser/CharacterStream.js","../../../../node_modules/.pnpm/graphql-language-service@5.2.0_graphql@16.8.1/node_modules/graphql-language-service/esm/parser/RuleHelpers.js","../../../../node_modules/.pnpm/graphql-language-service@5.2.0_graphql@16.8.1/node_modules/graphql-language-service/esm/parser/Rules.js","../../../../node_modules/.pnpm/graphql-language-service@5.2.0_graphql@16.8.1/node_modules/graphql-language-service/esm/parser/onlineParser.js","../../../../node_modules/.pnpm/graphql-language-service@5.2.0_graphql@16.8.1/node_modules/graphql-language-service/esm/utils/Range.js","../../../../node_modules/.pnpm/graphql-language-service@5.2.0_graphql@16.8.1/node_modules/graphql-language-service/esm/utils/validateWithCustomRules.js","../../../../node_modules/.pnpm/graphql-language-service@5.2.0_graphql@16.8.1/node_modules/graphql-language-service/esm/interface/getDiagnostics.js","../../src/ast/templates.ts","../../src/ast/index.ts","../../src/ast/resolve.ts","../../../../node_modules/.pnpm/lru-cache@10.0.1/node_modules/lru-cache/dist/mjs/index.js","../../../../node_modules/.pnpm/@sindresorhus+fnv1a@2.0.1/node_modules/@sindresorhus/fnv1a/index.js","../../src/fieldUsage.ts","../../src/checkImports.ts","../../src/persisted.ts","../../src/diagnostics.ts"],"sourcesContent":["export var ts;\nexport function init(modules) {\n  ts = modules.typescript;\n}\n","export default class CharacterStream {\n    constructor(sourceText) {\n        this._start = 0;\n        this._pos = 0;\n        this.getStartOfToken = () => this._start;\n        this.getCurrentPosition = () => this._pos;\n        this.eol = () => this._sourceText.length === this._pos;\n        this.sol = () => this._pos === 0;\n        this.peek = () => {\n            return this._sourceText.charAt(this._pos) || null;\n        };\n        this.next = () => {\n            const char = this._sourceText.charAt(this._pos);\n            this._pos++;\n            return char;\n        };\n        this.eat = (pattern) => {\n            const isMatched = this._testNextCharacter(pattern);\n            if (isMatched) {\n                this._start = this._pos;\n                this._pos++;\n                return this._sourceText.charAt(this._pos - 1);\n            }\n            return undefined;\n        };\n        this.eatWhile = (match) => {\n            let isMatched = this._testNextCharacter(match);\n            let didEat = false;\n            if (isMatched) {\n                didEat = isMatched;\n                this._start = this._pos;\n            }\n            while (isMatched) {\n                this._pos++;\n                isMatched = this._testNextCharacter(match);\n                didEat = true;\n            }\n            return didEat;\n        };\n        this.eatSpace = () => this.eatWhile(/[\\s\\u00a0]/);\n        this.skipToEnd = () => {\n            this._pos = this._sourceText.length;\n        };\n        this.skipTo = (position) => {\n            this._pos = position;\n        };\n        this.match = (pattern, consume = true, caseFold = false) => {\n            let token = null;\n            let match = null;\n            if (typeof pattern === 'string') {\n                const regex = new RegExp(pattern, caseFold ? 'i' : 'g');\n                match = regex.test(this._sourceText.slice(this._pos, this._pos + pattern.length));\n                token = pattern;\n            }\n            else if (pattern instanceof RegExp) {\n                match = this._sourceText.slice(this._pos).match(pattern);\n                token = match === null || match === void 0 ? void 0 : match[0];\n            }\n            if (match != null &&\n                (typeof pattern === 'string' ||\n                    (match instanceof Array &&\n                        this._sourceText.startsWith(match[0], this._pos)))) {\n                if (consume) {\n                    this._start = this._pos;\n                    if (token && token.length) {\n                        this._pos += token.length;\n                    }\n                }\n                return match;\n            }\n            return false;\n        };\n        this.backUp = (num) => {\n            this._pos -= num;\n        };\n        this.column = () => this._pos;\n        this.indentation = () => {\n            const match = this._sourceText.match(/\\s*/);\n            let indent = 0;\n            if (match && match.length !== 0) {\n                const whiteSpaces = match[0];\n                let pos = 0;\n                while (whiteSpaces.length > pos) {\n                    if (whiteSpaces.charCodeAt(pos) === 9) {\n                        indent += 2;\n                    }\n                    else {\n                        indent++;\n                    }\n                    pos++;\n                }\n            }\n            return indent;\n        };\n        this.current = () => this._sourceText.slice(this._start, this._pos);\n        this._sourceText = sourceText;\n    }\n    _testNextCharacter(pattern) {\n        const character = this._sourceText.charAt(this._pos);\n        let isMatched = false;\n        if (typeof pattern === 'string') {\n            isMatched = character === pattern;\n        }\n        else {\n            isMatched =\n                pattern instanceof RegExp\n                    ? pattern.test(character)\n                    : pattern(character);\n        }\n        return isMatched;\n    }\n}\n//# sourceMappingURL=CharacterStream.js.map","export function opt(ofRule) {\n    return { ofRule };\n}\nexport function list(ofRule, separator) {\n    return { ofRule, isList: true, separator };\n}\nexport function butNot(rule, exclusions) {\n    const ruleMatch = rule.match;\n    rule.match = token => {\n        let check = false;\n        if (ruleMatch) {\n            check = ruleMatch(token);\n        }\n        return (check &&\n            exclusions.every(exclusion => exclusion.match && !exclusion.match(token)));\n    };\n    return rule;\n}\nexport function t(kind, style) {\n    return { style, match: (token) => token.kind === kind };\n}\nexport function p(value, style) {\n    return {\n        style: style || 'punctuation',\n        match: (token) => token.kind === 'Punctuation' && token.value === value,\n    };\n}\n//# sourceMappingURL=RuleHelpers.js.map","import { opt, list, butNot, t, p } from './RuleHelpers';\nimport { Kind } from 'graphql';\nexport const isIgnored = (ch) => ch === ' ' ||\n    ch === '\\t' ||\n    ch === ',' ||\n    ch === '\\n' ||\n    ch === '\\r' ||\n    ch === '\\uFEFF' ||\n    ch === '\\u00A0';\nexport const LexRules = {\n    Name: /^[_A-Za-z][_0-9A-Za-z]*/,\n    Punctuation: /^(?:!|\\$|\\(|\\)|\\.\\.\\.|:|=|&|@|\\[|]|\\{|\\||\\})/,\n    Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,\n    String: /^(?:\"\"\"(?:\\\\\"\"\"|[^\"]|\"[^\"]|\"\"[^\"])*(?:\"\"\")?|\"(?:[^\"\\\\]|\\\\(?:\"|\\/|\\\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*\"?)/,\n    Comment: /^#.*/,\n};\nexport const ParseRules = {\n    Document: [list('Definition')],\n    Definition(token) {\n        switch (token.value) {\n            case '{':\n                return 'ShortQuery';\n            case 'query':\n                return 'Query';\n            case 'mutation':\n                return 'Mutation';\n            case 'subscription':\n                return 'Subscription';\n            case 'fragment':\n                return Kind.FRAGMENT_DEFINITION;\n            case 'schema':\n                return 'SchemaDef';\n            case 'scalar':\n                return 'ScalarDef';\n            case 'type':\n                return 'ObjectTypeDef';\n            case 'interface':\n                return 'InterfaceDef';\n            case 'union':\n                return 'UnionDef';\n            case 'enum':\n                return 'EnumDef';\n            case 'input':\n                return 'InputDef';\n            case 'extend':\n                return 'ExtendDef';\n            case 'directive':\n                return 'DirectiveDef';\n        }\n    },\n    ShortQuery: ['SelectionSet'],\n    Query: [\n        word('query'),\n        opt(name('def')),\n        opt('VariableDefinitions'),\n        list('Directive'),\n        'SelectionSet',\n    ],\n    Mutation: [\n        word('mutation'),\n        opt(name('def')),\n        opt('VariableDefinitions'),\n        list('Directive'),\n        'SelectionSet',\n    ],\n    Subscription: [\n        word('subscription'),\n        opt(name('def')),\n        opt('VariableDefinitions'),\n        list('Directive'),\n        'SelectionSet',\n    ],\n    VariableDefinitions: [p('('), list('VariableDefinition'), p(')')],\n    VariableDefinition: ['Variable', p(':'), 'Type', opt('DefaultValue')],\n    Variable: [p('$', 'variable'), name('variable')],\n    DefaultValue: [p('='), 'Value'],\n    SelectionSet: [p('{'), list('Selection'), p('}')],\n    Selection(token, stream) {\n        return token.value === '...'\n            ? stream.match(/[\\s\\u00a0,]*(on\\b|@|{)/, false)\n                ? 'InlineFragment'\n                : 'FragmentSpread'\n            : stream.match(/[\\s\\u00a0,]*:/, false)\n                ? 'AliasedField'\n                : 'Field';\n    },\n    AliasedField: [\n        name('property'),\n        p(':'),\n        name('qualifier'),\n        opt('Arguments'),\n        list('Directive'),\n        opt('SelectionSet'),\n    ],\n    Field: [\n        name('property'),\n        opt('Arguments'),\n        list('Directive'),\n        opt('SelectionSet'),\n    ],\n    Arguments: [p('('), list('Argument'), p(')')],\n    Argument: [name('attribute'), p(':'), 'Value'],\n    FragmentSpread: [p('...'), name('def'), list('Directive')],\n    InlineFragment: [\n        p('...'),\n        opt('TypeCondition'),\n        list('Directive'),\n        'SelectionSet',\n    ],\n    FragmentDefinition: [\n        word('fragment'),\n        opt(butNot(name('def'), [word('on')])),\n        'TypeCondition',\n        list('Directive'),\n        'SelectionSet',\n    ],\n    TypeCondition: [word('on'), 'NamedType'],\n    Value(token) {\n        switch (token.kind) {\n            case 'Number':\n                return 'NumberValue';\n            case 'String':\n                return 'StringValue';\n            case 'Punctuation':\n                switch (token.value) {\n                    case '[':\n                        return 'ListValue';\n                    case '{':\n                        return 'ObjectValue';\n                    case '$':\n                        return 'Variable';\n                    case '&':\n                        return 'NamedType';\n                }\n                return null;\n            case 'Name':\n                switch (token.value) {\n                    case 'true':\n                    case 'false':\n                        return 'BooleanValue';\n                }\n                if (token.value === 'null') {\n                    return 'NullValue';\n                }\n                return 'EnumValue';\n        }\n    },\n    NumberValue: [t('Number', 'number')],\n    StringValue: [\n        {\n            style: 'string',\n            match: (token) => token.kind === 'String',\n            update(state, token) {\n                if (token.value.startsWith('\"\"\"')) {\n                    state.inBlockstring = !token.value.slice(3).endsWith('\"\"\"');\n                }\n            },\n        },\n    ],\n    BooleanValue: [t('Name', 'builtin')],\n    NullValue: [t('Name', 'keyword')],\n    EnumValue: [name('string-2')],\n    ListValue: [p('['), list('Value'), p(']')],\n    ObjectValue: [p('{'), list('ObjectField'), p('}')],\n    ObjectField: [name('attribute'), p(':'), 'Value'],\n    Type(token) {\n        return token.value === '[' ? 'ListType' : 'NonNullType';\n    },\n    ListType: [p('['), 'Type', p(']'), opt(p('!'))],\n    NonNullType: ['NamedType', opt(p('!'))],\n    NamedType: [type('atom')],\n    Directive: [p('@', 'meta'), name('meta'), opt('Arguments')],\n    DirectiveDef: [\n        word('directive'),\n        p('@', 'meta'),\n        name('meta'),\n        opt('ArgumentsDef'),\n        word('on'),\n        list('DirectiveLocation', p('|')),\n    ],\n    InterfaceDef: [\n        word('interface'),\n        name('atom'),\n        opt('Implements'),\n        list('Directive'),\n        p('{'),\n        list('FieldDef'),\n        p('}'),\n    ],\n    Implements: [word('implements'), list('NamedType', p('&'))],\n    DirectiveLocation: [name('string-2')],\n    SchemaDef: [\n        word('schema'),\n        list('Directive'),\n        p('{'),\n        list('OperationTypeDef'),\n        p('}'),\n    ],\n    OperationTypeDef: [name('keyword'), p(':'), name('atom')],\n    ScalarDef: [word('scalar'), name('atom'), list('Directive')],\n    ObjectTypeDef: [\n        word('type'),\n        name('atom'),\n        opt('Implements'),\n        list('Directive'),\n        p('{'),\n        list('FieldDef'),\n        p('}'),\n    ],\n    FieldDef: [\n        name('property'),\n        opt('ArgumentsDef'),\n        p(':'),\n        'Type',\n        list('Directive'),\n    ],\n    ArgumentsDef: [p('('), list('InputValueDef'), p(')')],\n    InputValueDef: [\n        name('attribute'),\n        p(':'),\n        'Type',\n        opt('DefaultValue'),\n        list('Directive'),\n    ],\n    UnionDef: [\n        word('union'),\n        name('atom'),\n        list('Directive'),\n        p('='),\n        list('UnionMember', p('|')),\n    ],\n    UnionMember: ['NamedType'],\n    EnumDef: [\n        word('enum'),\n        name('atom'),\n        list('Directive'),\n        p('{'),\n        list('EnumValueDef'),\n        p('}'),\n    ],\n    EnumValueDef: [name('string-2'), list('Directive')],\n    InputDef: [\n        word('input'),\n        name('atom'),\n        list('Directive'),\n        p('{'),\n        list('InputValueDef'),\n        p('}'),\n    ],\n    ExtendDef: [word('extend'), 'ExtensionDefinition'],\n    ExtensionDefinition(token) {\n        switch (token.value) {\n            case 'schema':\n                return Kind.SCHEMA_EXTENSION;\n            case 'scalar':\n                return Kind.SCALAR_TYPE_EXTENSION;\n            case 'type':\n                return Kind.OBJECT_TYPE_EXTENSION;\n            case 'interface':\n                return Kind.INTERFACE_TYPE_EXTENSION;\n            case 'union':\n                return Kind.UNION_TYPE_EXTENSION;\n            case 'enum':\n                return Kind.ENUM_TYPE_EXTENSION;\n            case 'input':\n                return Kind.INPUT_OBJECT_TYPE_EXTENSION;\n        }\n    },\n    [Kind.SCHEMA_EXTENSION]: ['SchemaDef'],\n    [Kind.SCALAR_TYPE_EXTENSION]: ['ScalarDef'],\n    [Kind.OBJECT_TYPE_EXTENSION]: ['ObjectTypeDef'],\n    [Kind.INTERFACE_TYPE_EXTENSION]: ['InterfaceDef'],\n    [Kind.UNION_TYPE_EXTENSION]: ['UnionDef'],\n    [Kind.ENUM_TYPE_EXTENSION]: ['EnumDef'],\n    [Kind.INPUT_OBJECT_TYPE_EXTENSION]: ['InputDef'],\n};\nfunction word(value) {\n    return {\n        style: 'keyword',\n        match: (token) => token.kind === 'Name' && token.value === value,\n    };\n}\nfunction name(style) {\n    return {\n        style,\n        match: (token) => token.kind === 'Name',\n        update(state, token) {\n            state.name = token.value;\n        },\n    };\n}\nfunction type(style) {\n    return {\n        style,\n        match: (token) => token.kind === 'Name',\n        update(state, token) {\n            var _a;\n            if ((_a = state.prevState) === null || _a === void 0 ? void 0 : _a.prevState) {\n                state.name = token.value;\n                state.prevState.prevState.type = token.value;\n            }\n        },\n    };\n}\n//# sourceMappingURL=Rules.js.map","import { LexRules, ParseRules, isIgnored } from './Rules';\nimport { Kind } from 'graphql';\nexport default function onlineParser(options = {\n    eatWhitespace: stream => stream.eatWhile(isIgnored),\n    lexRules: LexRules,\n    parseRules: ParseRules,\n    editorConfig: {},\n}) {\n    return {\n        startState() {\n            const initialState = {\n                level: 0,\n                step: 0,\n                name: null,\n                kind: null,\n                type: null,\n                rule: null,\n                needsSeparator: false,\n                prevState: null,\n            };\n            pushRule(options.parseRules, initialState, Kind.DOCUMENT);\n            return initialState;\n        },\n        token(stream, state) {\n            return getToken(stream, state, options);\n        },\n    };\n}\nfunction getToken(stream, state, options) {\n    var _a;\n    if (state.inBlockstring) {\n        if (stream.match(/.*\"\"\"/)) {\n            state.inBlockstring = false;\n            return 'string';\n        }\n        stream.skipToEnd();\n        return 'string';\n    }\n    const { lexRules, parseRules, eatWhitespace, editorConfig } = options;\n    if (state.rule && state.rule.length === 0) {\n        popRule(state);\n    }\n    else if (state.needsAdvance) {\n        state.needsAdvance = false;\n        advanceRule(state, true);\n    }\n    if (stream.sol()) {\n        const tabSize = (editorConfig === null || editorConfig === void 0 ? void 0 : editorConfig.tabSize) || 2;\n        state.indentLevel = Math.floor(stream.indentation() / tabSize);\n    }\n    if (eatWhitespace(stream)) {\n        return 'ws';\n    }\n    const token = lex(lexRules, stream);\n    if (!token) {\n        const matchedSomething = stream.match(/\\S+/);\n        if (!matchedSomething) {\n            stream.match(/\\s/);\n        }\n        pushRule(SpecialParseRules, state, 'Invalid');\n        return 'invalidchar';\n    }\n    if (token.kind === 'Comment') {\n        pushRule(SpecialParseRules, state, 'Comment');\n        return 'comment';\n    }\n    const backupState = assign({}, state);\n    if (token.kind === 'Punctuation') {\n        if (/^[{([]/.test(token.value)) {\n            if (state.indentLevel !== undefined) {\n                state.levels = (state.levels || []).concat(state.indentLevel + 1);\n            }\n        }\n        else if (/^[})\\]]/.test(token.value)) {\n            const levels = (state.levels = (state.levels || []).slice(0, -1));\n            if (state.indentLevel &&\n                levels.length > 0 &&\n                levels.at(-1) < state.indentLevel) {\n                state.indentLevel = levels.at(-1);\n            }\n        }\n    }\n    while (state.rule) {\n        let expected = typeof state.rule === 'function'\n            ? state.step === 0\n                ? state.rule(token, stream)\n                : null\n            : state.rule[state.step];\n        if (state.needsSeparator) {\n            expected = expected === null || expected === void 0 ? void 0 : expected.separator;\n        }\n        if (expected) {\n            if (expected.ofRule) {\n                expected = expected.ofRule;\n            }\n            if (typeof expected === 'string') {\n                pushRule(parseRules, state, expected);\n                continue;\n            }\n            if ((_a = expected.match) === null || _a === void 0 ? void 0 : _a.call(expected, token)) {\n                if (expected.update) {\n                    expected.update(state, token);\n                }\n                if (token.kind === 'Punctuation') {\n                    advanceRule(state, true);\n                }\n                else {\n                    state.needsAdvance = true;\n                }\n                return expected.style;\n            }\n        }\n        unsuccessful(state);\n    }\n    assign(state, backupState);\n    pushRule(SpecialParseRules, state, 'Invalid');\n    return 'invalidchar';\n}\nfunction assign(to, from) {\n    const keys = Object.keys(from);\n    for (let i = 0; i < keys.length; i++) {\n        to[keys[i]] = from[keys[i]];\n    }\n    return to;\n}\nconst SpecialParseRules = {\n    Invalid: [],\n    Comment: [],\n};\nfunction pushRule(rules, state, ruleKind) {\n    if (!rules[ruleKind]) {\n        throw new TypeError('Unknown rule: ' + ruleKind);\n    }\n    state.prevState = Object.assign({}, state);\n    state.kind = ruleKind;\n    state.name = null;\n    state.type = null;\n    state.rule = rules[ruleKind];\n    state.step = 0;\n    state.needsSeparator = false;\n}\nfunction popRule(state) {\n    if (!state.prevState) {\n        return;\n    }\n    state.kind = state.prevState.kind;\n    state.name = state.prevState.name;\n    state.type = state.prevState.type;\n    state.rule = state.prevState.rule;\n    state.step = state.prevState.step;\n    state.needsSeparator = state.prevState.needsSeparator;\n    state.prevState = state.prevState.prevState;\n}\nfunction advanceRule(state, successful) {\n    var _a;\n    if (isList(state) && state.rule) {\n        const step = state.rule[state.step];\n        if (step.separator) {\n            const { separator } = step;\n            state.needsSeparator = !state.needsSeparator;\n            if (!state.needsSeparator && separator.ofRule) {\n                return;\n            }\n        }\n        if (successful) {\n            return;\n        }\n    }\n    state.needsSeparator = false;\n    state.step++;\n    while (state.rule &&\n        !(Array.isArray(state.rule) && state.step < state.rule.length)) {\n        popRule(state);\n        if (state.rule) {\n            if (isList(state)) {\n                if ((_a = state.rule) === null || _a === void 0 ? void 0 : _a[state.step].separator) {\n                    state.needsSeparator = !state.needsSeparator;\n                }\n            }\n            else {\n                state.needsSeparator = false;\n                state.step++;\n            }\n        }\n    }\n}\nfunction isList(state) {\n    const step = Array.isArray(state.rule) &&\n        typeof state.rule[state.step] !== 'string' &&\n        state.rule[state.step];\n    return step && step.isList;\n}\nfunction unsuccessful(state) {\n    while (state.rule &&\n        !(Array.isArray(state.rule) && state.rule[state.step].ofRule)) {\n        popRule(state);\n    }\n    if (state.rule) {\n        advanceRule(state, false);\n    }\n}\nfunction lex(lexRules, stream) {\n    const kinds = Object.keys(lexRules);\n    for (let i = 0; i < kinds.length; i++) {\n        const match = stream.match(lexRules[kinds[i]]);\n        if (match && match instanceof Array) {\n            return { kind: kinds[i], value: match[0] };\n        }\n    }\n}\n//# sourceMappingURL=onlineParser.js.map","export class Range {\n    constructor(start, end) {\n        this.containsPosition = (position) => {\n            if (this.start.line === position.line) {\n                return this.start.character <= position.character;\n            }\n            if (this.end.line === position.line) {\n                return this.end.character >= position.character;\n            }\n            return this.start.line <= position.line && this.end.line >= position.line;\n        };\n        this.start = start;\n        this.end = end;\n    }\n    setStart(line, character) {\n        this.start = new Position(line, character);\n    }\n    setEnd(line, character) {\n        this.end = new Position(line, character);\n    }\n}\nexport class Position {\n    constructor(line, character) {\n        this.lessThanOrEqualTo = (position) => this.line < position.line ||\n            (this.line === position.line && this.character <= position.character);\n        this.line = line;\n        this.character = character;\n    }\n    setLine(line) {\n        this.line = line;\n    }\n    setCharacter(character) {\n        this.character = character;\n    }\n}\nexport function offsetToPosition(text, loc) {\n    const EOL = '\\n';\n    const buf = text.slice(0, loc);\n    const lines = buf.split(EOL).length - 1;\n    const lastLineIndex = buf.lastIndexOf(EOL);\n    return new Position(lines, loc - lastLineIndex - 1);\n}\nexport function locToRange(text, loc) {\n    const start = offsetToPosition(text, loc.start);\n    const end = offsetToPosition(text, loc.end);\n    return new Range(start, end);\n}\n//# sourceMappingURL=Range.js.map","import { specifiedRules, validate, NoUnusedFragmentsRule, KnownFragmentNamesRule, Kind, ExecutableDefinitionsRule, LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueDirectiveNamesRule, KnownTypeNamesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, PossibleTypeExtensionsRule, UniqueArgumentNamesRule, UniqueInputFieldNamesRule, } from 'graphql';\nconst specifiedSDLRules = [\n    LoneSchemaDefinitionRule,\n    UniqueOperationTypesRule,\n    UniqueTypeNamesRule,\n    UniqueEnumValueNamesRule,\n    UniqueFieldDefinitionNamesRule,\n    UniqueDirectiveNamesRule,\n    KnownTypeNamesRule,\n    KnownDirectivesRule,\n    UniqueDirectivesPerLocationRule,\n    PossibleTypeExtensionsRule,\n    UniqueArgumentNamesRule,\n    UniqueInputFieldNamesRule,\n];\nexport function validateWithCustomRules(schema, ast, customRules, isRelayCompatMode, isSchemaDocument) {\n    const rules = specifiedRules.filter(rule => {\n        if (rule === NoUnusedFragmentsRule || rule === ExecutableDefinitionsRule) {\n            return false;\n        }\n        if (isRelayCompatMode && rule === KnownFragmentNamesRule) {\n            return false;\n        }\n        return true;\n    });\n    if (customRules) {\n        Array.prototype.push.apply(rules, customRules);\n    }\n    if (isSchemaDocument) {\n        Array.prototype.push.apply(rules, specifiedSDLRules);\n    }\n    const errors = validate(schema, ast, rules);\n    return errors.filter(error => {\n        if (error.message.includes('Unknown directive') && error.nodes) {\n            const node = error.nodes[0];\n            if (node && node.kind === Kind.DIRECTIVE) {\n                const name = node.name.value;\n                if (name === 'arguments' || name === 'argumentDefinitions') {\n                    return false;\n                }\n            }\n        }\n        return true;\n    });\n}\n//# sourceMappingURL=validateWithCustomRules.js.map","import { GraphQLError, print, validate, NoDeprecatedCustomRule, parse, } from 'graphql';\nimport { CharacterStream, onlineParser } from '../parser';\nimport { Range, validateWithCustomRules, Position } from '../utils';\nexport const SEVERITY = {\n    Error: 'Error',\n    Warning: 'Warning',\n    Information: 'Information',\n    Hint: 'Hint',\n};\nexport const DIAGNOSTIC_SEVERITY = {\n    [SEVERITY.Error]: 1,\n    [SEVERITY.Warning]: 2,\n    [SEVERITY.Information]: 3,\n    [SEVERITY.Hint]: 4,\n};\nconst invariant = (condition, message) => {\n    if (!condition) {\n        throw new Error(message);\n    }\n};\nexport function getDiagnostics(query, schema = null, customRules, isRelayCompatMode, externalFragments) {\n    var _a, _b;\n    let ast = null;\n    let fragments = '';\n    if (externalFragments) {\n        fragments =\n            typeof externalFragments === 'string'\n                ? externalFragments\n                : externalFragments.reduce((acc, node) => acc + print(node) + '\\n\\n', '');\n    }\n    const enhancedQuery = fragments ? `${query}\\n\\n${fragments}` : query;\n    try {\n        ast = parse(enhancedQuery);\n    }\n    catch (error) {\n        if (error instanceof GraphQLError) {\n            const range = getRange((_b = (_a = error.locations) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : { line: 0, column: 0 }, enhancedQuery);\n            return [\n                {\n                    severity: DIAGNOSTIC_SEVERITY.Error,\n                    message: error.message,\n                    source: 'GraphQL: Syntax',\n                    range,\n                },\n            ];\n        }\n        throw error;\n    }\n    return validateQuery(ast, schema, customRules, isRelayCompatMode);\n}\nexport function validateQuery(ast, schema = null, customRules, isRelayCompatMode) {\n    if (!schema) {\n        return [];\n    }\n    const validationErrorAnnotations = validateWithCustomRules(schema, ast, customRules, isRelayCompatMode).flatMap(error => annotations(error, DIAGNOSTIC_SEVERITY.Error, 'Validation'));\n    const deprecationWarningAnnotations = validate(schema, ast, [\n        NoDeprecatedCustomRule,\n    ]).flatMap(error => annotations(error, DIAGNOSTIC_SEVERITY.Warning, 'Deprecation'));\n    return validationErrorAnnotations.concat(deprecationWarningAnnotations);\n}\nfunction annotations(error, severity, type) {\n    if (!error.nodes) {\n        return [];\n    }\n    const highlightedNodes = [];\n    for (const [i, node] of error.nodes.entries()) {\n        const highlightNode = node.kind !== 'Variable' && 'name' in node && node.name !== undefined\n            ? node.name\n            : 'variable' in node && node.variable !== undefined\n                ? node.variable\n                : node;\n        if (highlightNode) {\n            invariant(error.locations, 'GraphQL validation error requires locations.');\n            const loc = error.locations[i];\n            const highlightLoc = getLocation(highlightNode);\n            const end = loc.column + (highlightLoc.end - highlightLoc.start);\n            highlightedNodes.push({\n                source: `GraphQL: ${type}`,\n                message: error.message,\n                severity,\n                range: new Range(new Position(loc.line - 1, loc.column - 1), new Position(loc.line - 1, end)),\n            });\n        }\n    }\n    return highlightedNodes;\n}\nexport function getRange(location, queryText) {\n    const parser = onlineParser();\n    const state = parser.startState();\n    const lines = queryText.split('\\n');\n    invariant(lines.length >= location.line, 'Query text must have more lines than where the error happened');\n    let stream = null;\n    for (let i = 0; i < location.line; i++) {\n        stream = new CharacterStream(lines[i]);\n        while (!stream.eol()) {\n            const style = parser.token(stream, state);\n            if (style === 'invalidchar') {\n                break;\n            }\n        }\n    }\n    invariant(stream, 'Expected Parser stream to be available.');\n    const line = location.line - 1;\n    const start = stream.getStartOfToken();\n    const end = stream.getCurrentPosition();\n    return new Range(new Position(line, start), new Position(line, end));\n}\nfunction getLocation(node) {\n    const typeCastedNode = node;\n    const location = typeCastedNode.loc;\n    invariant(location, 'Expected ASTNode to have a location.');\n    return location;\n}\n//# sourceMappingURL=getDiagnostics.js.map","export const templates = new Set(['gql', 'graphql']);\n","import { ts } from '../ts';\nimport { FragmentDefinitionNode, parse } from 'graphql';\nimport { templates } from './templates';\n\nexport function getSource(info: ts.server.PluginCreateInfo, filename: string) {\n  const program = info.languageService.getProgram();\n  if (!program) return undefined;\n\n  const source = program.getSourceFile(filename);\n  if (!source) return undefined;\n\n  return source;\n}\n\nexport function findNode(\n  sourceFile: ts.SourceFile,\n  position: number\n): ts.Node | undefined {\n  function find(node: ts.Node): ts.Node | undefined {\n    if (position >= node.getStart() && position < node.getEnd()) {\n      return ts.forEachChild(node, find) || node;\n    }\n  }\n  return find(sourceFile);\n}\n\nexport function findAllTaggedTemplateNodes(\n  sourceFile: ts.SourceFile | ts.Node\n): Array<ts.TaggedTemplateExpression | ts.NoSubstitutionTemplateLiteral> {\n  const result: Array<\n    ts.TaggedTemplateExpression | ts.NoSubstitutionTemplateLiteral\n  > = [];\n  function find(node: ts.Node) {\n    if (\n      (ts.isTaggedTemplateExpression(node) &&\n        templates.has(node.tag.getText())) ||\n      (ts.isNoSubstitutionTemplateLiteral(node) &&\n        ts.isTaggedTemplateExpression(node.parent) &&\n        templates.has(node.parent.tag.getText()))\n    ) {\n      result.push(node);\n      return;\n    } else {\n      ts.forEachChild(node, find);\n    }\n  }\n  find(sourceFile);\n  return result;\n}\n\nfunction unrollFragment(\n  element: ts.Identifier,\n  info: ts.server.PluginCreateInfo\n): Array<FragmentDefinitionNode> {\n  const fragments: Array<FragmentDefinitionNode> = [];\n  const definitions = info.languageService.getDefinitionAtPosition(\n    element.getSourceFile().fileName,\n    element.getStart()\n  );\n\n  if (!definitions || !definitions.length) return fragments;\n\n  const [fragment] = definitions;\n\n  const externalSource = getSource(info, fragment.fileName);\n  if (!externalSource) return fragments;\n\n  let found = findNode(externalSource, fragment.textSpan.start);\n  if (!found) return fragments;\n\n  if (\n    ts.isVariableDeclaration(found.parent) &&\n    found.parent.initializer &&\n    ts.isCallExpression(found.parent.initializer)\n  ) {\n    found = found.parent.initializer;\n  } else if (ts.isPropertyAssignment(found.parent)) {\n    found = found.parent.initializer;\n  }\n\n  if (ts.isCallExpression(found) && templates.has(found.expression.getText())) {\n    const [arg, arg2] = found.arguments;\n    if (arg2 && ts.isArrayLiteralExpression(arg2)) {\n      arg2.elements.forEach(element => {\n        if (ts.isIdentifier(element)) {\n          fragments.push(...unrollFragment(element, info));\n        }\n      });\n    }\n\n    try {\n      const parsed = parse(arg.getText().slice(1, -1), { noLocation: true });\n      parsed.definitions.forEach(definition => {\n        if (definition.kind === 'FragmentDefinition') {\n          fragments.push(definition);\n        }\n      });\n    } catch (e) {}\n  }\n\n  return fragments;\n}\n\nexport function unrollTadaFragments(\n  fragmentsArray: ts.ArrayLiteralExpression,\n  wip: FragmentDefinitionNode[],\n  info: ts.server.PluginCreateInfo\n): FragmentDefinitionNode[] {\n  fragmentsArray.elements.forEach(element => {\n    if (ts.isIdentifier(element)) {\n      wip.push(...unrollFragment(element, info));\n    } else if (ts.isPropertyAccessExpression(element)) {\n      let el = element;\n      while (ts.isPropertyAccessExpression(el.expression)) {\n        el = el.expression;\n      }\n\n      if (ts.isIdentifier(el.name)) {\n        wip.push(...unrollFragment(el.name, info));\n      }\n    }\n  });\n\n  return wip;\n}\n\nexport function findAllCallExpressions(\n  sourceFile: ts.SourceFile,\n  info: ts.server.PluginCreateInfo,\n  shouldSearchFragments: boolean = true\n): {\n  nodes: Array<ts.NoSubstitutionTemplateLiteral>;\n  fragments: Array<FragmentDefinitionNode>;\n} {\n  const result: Array<ts.NoSubstitutionTemplateLiteral> = [];\n  let fragments: Array<FragmentDefinitionNode> = [];\n  let hasTriedToFindFragments = shouldSearchFragments ? false : true;\n  function find(node: ts.Node) {\n    if (ts.isCallExpression(node) && templates.has(node.expression.getText())) {\n      const [arg, arg2] = node.arguments;\n\n      if (!hasTriedToFindFragments && !arg2) {\n        hasTriedToFindFragments = true;\n        fragments.push(...getAllFragments(sourceFile.fileName, node, info));\n      } else if (arg2 && ts.isArrayLiteralExpression(arg2)) {\n        arg2.elements.forEach(element => {\n          if (ts.isIdentifier(element)) {\n            fragments.push(...unrollFragment(element, info));\n          } else if (ts.isPropertyAccessExpression(element)) {\n            let el = element;\n            while (ts.isPropertyAccessExpression(el.expression)) {\n              el = el.expression;\n            }\n\n            if (ts.isIdentifier(el.name)) {\n              fragments.push(...unrollFragment(el.name, info));\n            }\n          }\n        });\n      }\n\n      if (arg && ts.isNoSubstitutionTemplateLiteral(arg)) {\n        result.push(arg);\n      }\n      return;\n    } else {\n      ts.forEachChild(node, find);\n    }\n  }\n  find(sourceFile);\n  return { nodes: result, fragments };\n}\n\nexport function findAllPersistedCallExpressions(\n  sourceFile: ts.SourceFile\n): Array<ts.CallExpression> {\n  const result: Array<ts.CallExpression> = [];\n  function find(node: ts.Node) {\n    if (ts.isCallExpression(node)) {\n      // This expression ideally for us looks like <template>.persisted\n      const expression = node.expression.getText();\n      const parts = expression.split('.');\n      if (parts.length !== 2) return;\n\n      const [template, method] = parts;\n      if (!templates.has(template) || method !== 'persisted') return;\n\n      result.push(node);\n    } else {\n      ts.forEachChild(node, find);\n    }\n  }\n  find(sourceFile);\n  return result;\n}\n\nexport function getAllFragments(\n  fileName: string,\n  node: ts.CallExpression,\n  info: ts.server.PluginCreateInfo\n) {\n  let fragments: Array<FragmentDefinitionNode> = [];\n\n  const definitions = info.languageService.getDefinitionAtPosition(\n    fileName,\n    node.expression.getStart()\n  );\n  if (!definitions || !definitions.length) return fragments;\n\n  if (node.arguments[1] && ts.isArrayLiteralExpression(node.arguments[1])) {\n    const arg2 = node.arguments[1] as ts.ArrayLiteralExpression;\n    arg2.elements.forEach(element => {\n      if (ts.isIdentifier(element)) {\n        fragments.push(...unrollFragment(element, info));\n      }\n    });\n    return fragments;\n  }\n\n  const def = definitions[0];\n  if (!def) return fragments;\n  const src = getSource(info, def.fileName);\n  if (!src) return fragments;\n\n  ts.forEachChild(src, node => {\n    if (\n      ts.isVariableStatement(node) &&\n      node.declarationList &&\n      node.declarationList.declarations[0].name.getText() === 'documents'\n    ) {\n      const [declaration] = node.declarationList.declarations;\n      if (\n        declaration.initializer &&\n        ts.isObjectLiteralExpression(declaration.initializer)\n      ) {\n        declaration.initializer.properties.forEach(property => {\n          if (\n            ts.isPropertyAssignment(property) &&\n            ts.isStringLiteral(property.name)\n          ) {\n            try {\n              const possibleFragment = JSON.parse(\n                `${property.name.getText().replace(/'/g, '\"')}`\n              );\n\n              if (\n                possibleFragment.includes('fragment ') &&\n                possibleFragment.includes(' on ')\n              ) {\n                const parsed = parse(possibleFragment, {\n                  noLocation: true,\n                });\n                parsed.definitions.forEach(definition => {\n                  if (definition.kind === 'FragmentDefinition') {\n                    fragments.push(definition);\n                  }\n                });\n              }\n            } catch (e: any) {}\n          }\n        });\n      }\n    }\n  });\n\n  return fragments;\n}\n\nexport function findAllImports(\n  sourceFile: ts.SourceFile\n): Array<ts.ImportDeclaration> {\n  return sourceFile.statements.filter(ts.isImportDeclaration);\n}\n\nexport function bubbleUpTemplate(node: ts.Node): ts.Node {\n  while (\n    ts.isNoSubstitutionTemplateLiteral(node) ||\n    ts.isToken(node) ||\n    ts.isTemplateExpression(node) ||\n    ts.isTemplateSpan(node)\n  ) {\n    node = node.parent;\n  }\n\n  return node;\n}\n\nexport function bubbleUpCallExpression(node: ts.Node): ts.Node {\n  while (\n    ts.isNoSubstitutionTemplateLiteral(node) ||\n    ts.isToken(node) ||\n    ts.isTemplateExpression(node) ||\n    ts.isTemplateSpan(node)\n  ) {\n    node = node.parent;\n  }\n\n  return node;\n}\n","import { print } from '@0no-co/graphql.web';\nimport { ts } from '../ts';\nimport { findNode } from '.';\nimport { getSource } from '../ast';\n\ntype TemplateResult = {\n  combinedText: string;\n  resolvedSpans: Array<{\n    lines: number;\n    identifier: string;\n    original: { start: number; length: number };\n    new: { start: number; length: number };\n  }>;\n};\n\nexport function resolveTemplate(\n  node: ts.TaggedTemplateExpression | ts.NoSubstitutionTemplateLiteral,\n  filename: string,\n  info: ts.server.PluginCreateInfo\n): TemplateResult {\n  if (ts.isNoSubstitutionTemplateLiteral(node)) {\n    return { combinedText: node.getText().slice(1, -1), resolvedSpans: [] };\n  }\n\n  let templateText = node.template.getText().slice(1, -1);\n  if (\n    ts.isNoSubstitutionTemplateLiteral(node.template) ||\n    node.template.templateSpans.length === 0\n  ) {\n    return { combinedText: templateText, resolvedSpans: [] };\n  }\n\n  let addedCharacters = 0;\n  const resolvedSpans = node.template.templateSpans\n    .map(span => {\n      if (ts.isIdentifier(span.expression)) {\n        const definitions = info.languageService.getDefinitionAtPosition(\n          filename,\n          span.expression.getStart()\n        );\n        if (!definitions || !definitions.length) return;\n\n        const def = definitions[0];\n        const src = getSource(info, def.fileName);\n        if (!src) return;\n\n        const node = findNode(src, def.textSpan.start);\n        if (!node || !node.parent) return;\n\n        const parent = node.parent;\n        if (ts.isVariableDeclaration(parent)) {\n          const identifierName = span.expression.escapedText;\n          // we reduce by two to account for the \"${\"\n          const originalStart = span.expression.getStart() - 2;\n          const originalRange = {\n            start: originalStart,\n            // we add 1 to account for the \"}\"\n            length: span.expression.end - originalStart + 1,\n          };\n          if (\n            parent.initializer &&\n            ts.isTaggedTemplateExpression(parent.initializer)\n          ) {\n            const text = resolveTemplate(\n              parent.initializer,\n              def.fileName,\n              info\n            );\n            templateText = templateText.replace(\n              '${' + span.expression.escapedText + '}',\n              text.combinedText\n            );\n\n            const alteredSpan = {\n              lines: text.combinedText.split('\\n').length,\n              identifier: identifierName,\n              original: originalRange,\n              new: {\n                start: originalRange.start + addedCharacters,\n                length: text.combinedText.length,\n              },\n            };\n            addedCharacters += text.combinedText.length - originalRange.length;\n            return alteredSpan;\n          } else if (\n            parent.initializer &&\n            ts.isAsExpression(parent.initializer) &&\n            ts.isTaggedTemplateExpression(parent.initializer.expression)\n          ) {\n            const text = resolveTemplate(\n              parent.initializer.expression,\n              def.fileName,\n              info\n            );\n            templateText = templateText.replace(\n              '${' + span.expression.escapedText + '}',\n              text.combinedText\n            );\n            const alteredSpan = {\n              lines: text.combinedText.split('\\n').length,\n              identifier: identifierName,\n              original: originalRange,\n              new: {\n                start: originalRange.start + addedCharacters,\n                length: text.combinedText.length,\n              },\n            };\n            addedCharacters += text.combinedText.length - originalRange.length;\n            return alteredSpan;\n          } else if (\n            parent.initializer &&\n            ts.isAsExpression(parent.initializer) &&\n            ts.isAsExpression(parent.initializer.expression) &&\n            ts.isObjectLiteralExpression(\n              parent.initializer.expression.expression\n            )\n          ) {\n            const astObject = JSON.parse(\n              parent.initializer.expression.expression.getText()\n            );\n            const resolvedTemplate = print(astObject);\n            templateText = templateText.replace(\n              '${' + span.expression.escapedText + '}',\n              resolvedTemplate\n            );\n            const alteredSpan = {\n              lines: resolvedTemplate.split('\\n').length,\n              identifier: identifierName,\n              original: originalRange,\n              new: {\n                start: originalRange.start + addedCharacters,\n                length: resolvedTemplate.length,\n              },\n            };\n            addedCharacters += resolvedTemplate.length - originalRange.length;\n            return alteredSpan;\n          }\n\n          return undefined;\n        }\n      }\n\n      return undefined;\n    })\n    .filter(Boolean) as TemplateResult['resolvedSpans'];\n\n  return { combinedText: templateText, resolvedSpans };\n}\n","/**\n * @module LRUCache\n */\nconst perf = typeof performance === 'object' &&\n    performance &&\n    typeof performance.now === 'function'\n    ? performance\n    : Date;\nconst warned = new Set();\n/* c8 ignore start */\nconst PROCESS = (typeof process === 'object' && !!process ? process : {});\n/* c8 ignore start */\nconst emitWarning = (msg, type, code, fn) => {\n    typeof PROCESS.emitWarning === 'function'\n        ? PROCESS.emitWarning(msg, type, code, fn)\n        : console.error(`[${code}] ${type}: ${msg}`);\n};\nlet AC = globalThis.AbortController;\nlet AS = globalThis.AbortSignal;\n/* c8 ignore start */\nif (typeof AC === 'undefined') {\n    //@ts-ignore\n    AS = class AbortSignal {\n        onabort;\n        _onabort = [];\n        reason;\n        aborted = false;\n        addEventListener(_, fn) {\n            this._onabort.push(fn);\n        }\n    };\n    //@ts-ignore\n    AC = class AbortController {\n        constructor() {\n            warnACPolyfill();\n        }\n        signal = new AS();\n        abort(reason) {\n            if (this.signal.aborted)\n                return;\n            //@ts-ignore\n            this.signal.reason = reason;\n            //@ts-ignore\n            this.signal.aborted = true;\n            //@ts-ignore\n            for (const fn of this.signal._onabort) {\n                fn(reason);\n            }\n            this.signal.onabort?.(reason);\n        }\n    };\n    let printACPolyfillWarning = PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== '1';\n    const warnACPolyfill = () => {\n        if (!printACPolyfillWarning)\n            return;\n        printACPolyfillWarning = false;\n        emitWarning('AbortController is not defined. If using lru-cache in ' +\n            'node 14, load an AbortController polyfill from the ' +\n            '`node-abort-controller` package. A minimal polyfill is ' +\n            'provided for use by LRUCache.fetch(), but it should not be ' +\n            'relied upon in other contexts (eg, passing it to other APIs that ' +\n            'use AbortController/AbortSignal might have undesirable effects). ' +\n            'You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.', 'NO_ABORT_CONTROLLER', 'ENOTSUP', warnACPolyfill);\n    };\n}\n/* c8 ignore stop */\nconst shouldWarn = (code) => !warned.has(code);\nconst TYPE = Symbol('type');\nconst isPosInt = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n);\n/* c8 ignore start */\n// This is a little bit ridiculous, tbh.\n// The maximum array length is 2^32-1 or thereabouts on most JS impls.\n// And well before that point, you're caching the entire world, I mean,\n// that's ~32GB of just integers for the next/prev links, plus whatever\n// else to hold that many keys and values.  Just filling the memory with\n// zeroes at init time is brutal when you get that big.\n// But why not be complete?\n// Maybe in the future, these limits will have expanded.\nconst getUintArray = (max) => !isPosInt(max)\n    ? null\n    : max <= Math.pow(2, 8)\n        ? Uint8Array\n        : max <= Math.pow(2, 16)\n            ? Uint16Array\n            : max <= Math.pow(2, 32)\n                ? Uint32Array\n                : max <= Number.MAX_SAFE_INTEGER\n                    ? ZeroArray\n                    : null;\n/* c8 ignore stop */\nclass ZeroArray extends Array {\n    constructor(size) {\n        super(size);\n        this.fill(0);\n    }\n}\nclass Stack {\n    heap;\n    length;\n    // private constructor\n    static #constructing = false;\n    static create(max) {\n        const HeapCls = getUintArray(max);\n        if (!HeapCls)\n            return [];\n        Stack.#constructing = true;\n        const s = new Stack(max, HeapCls);\n        Stack.#constructing = false;\n        return s;\n    }\n    constructor(max, HeapCls) {\n        /* c8 ignore start */\n        if (!Stack.#constructing) {\n            throw new TypeError('instantiate Stack using Stack.create(n)');\n        }\n        /* c8 ignore stop */\n        this.heap = new HeapCls(max);\n        this.length = 0;\n    }\n    push(n) {\n        this.heap[this.length++] = n;\n    }\n    pop() {\n        return this.heap[--this.length];\n    }\n}\n/**\n * Default export, the thing you're using this module to get.\n *\n * All properties from the options object (with the exception of\n * {@link OptionsBase.max} and {@link OptionsBase.maxSize}) are added as\n * normal public members. (`max` and `maxBase` are read-only getters.)\n * Changing any of these will alter the defaults for subsequent method calls,\n * but is otherwise safe.\n */\nexport class LRUCache {\n    // properties coming in from the options of these, only max and maxSize\n    // really *need* to be protected. The rest can be modified, as they just\n    // set defaults for various methods.\n    #max;\n    #maxSize;\n    #dispose;\n    #disposeAfter;\n    #fetchMethod;\n    /**\n     * {@link LRUCache.OptionsBase.ttl}\n     */\n    ttl;\n    /**\n     * {@link LRUCache.OptionsBase.ttlResolution}\n     */\n    ttlResolution;\n    /**\n     * {@link LRUCache.OptionsBase.ttlAutopurge}\n     */\n    ttlAutopurge;\n    /**\n     * {@link LRUCache.OptionsBase.updateAgeOnGet}\n     */\n    updateAgeOnGet;\n    /**\n     * {@link LRUCache.OptionsBase.updateAgeOnHas}\n     */\n    updateAgeOnHas;\n    /**\n     * {@link LRUCache.OptionsBase.allowStale}\n     */\n    allowStale;\n    /**\n     * {@link LRUCache.OptionsBase.noDisposeOnSet}\n     */\n    noDisposeOnSet;\n    /**\n     * {@link LRUCache.OptionsBase.noUpdateTTL}\n     */\n    noUpdateTTL;\n    /**\n     * {@link LRUCache.OptionsBase.maxEntrySize}\n     */\n    maxEntrySize;\n    /**\n     * {@link LRUCache.OptionsBase.sizeCalculation}\n     */\n    sizeCalculation;\n    /**\n     * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}\n     */\n    noDeleteOnFetchRejection;\n    /**\n     * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}\n     */\n    noDeleteOnStaleGet;\n    /**\n     * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}\n     */\n    allowStaleOnFetchAbort;\n    /**\n     * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}\n     */\n    allowStaleOnFetchRejection;\n    /**\n     * {@link LRUCache.OptionsBase.ignoreFetchAbort}\n     */\n    ignoreFetchAbort;\n    // computed properties\n    #size;\n    #calculatedSize;\n    #keyMap;\n    #keyList;\n    #valList;\n    #next;\n    #prev;\n    #head;\n    #tail;\n    #free;\n    #disposed;\n    #sizes;\n    #starts;\n    #ttls;\n    #hasDispose;\n    #hasFetchMethod;\n    #hasDisposeAfter;\n    /**\n     * Do not call this method unless you need to inspect the\n     * inner workings of the cache.  If anything returned by this\n     * object is modified in any way, strange breakage may occur.\n     *\n     * These fields are private for a reason!\n     *\n     * @internal\n     */\n    static unsafeExposeInternals(c) {\n        return {\n            // properties\n            starts: c.#starts,\n            ttls: c.#ttls,\n            sizes: c.#sizes,\n            keyMap: c.#keyMap,\n            keyList: c.#keyList,\n            valList: c.#valList,\n            next: c.#next,\n            prev: c.#prev,\n            get head() {\n                return c.#head;\n            },\n            get tail() {\n                return c.#tail;\n            },\n            free: c.#free,\n            // methods\n            isBackgroundFetch: (p) => c.#isBackgroundFetch(p),\n            backgroundFetch: (k, index, options, context) => c.#backgroundFetch(k, index, options, context),\n            moveToTail: (index) => c.#moveToTail(index),\n            indexes: (options) => c.#indexes(options),\n            rindexes: (options) => c.#rindexes(options),\n            isStale: (index) => c.#isStale(index),\n        };\n    }\n    // Protected read-only members\n    /**\n     * {@link LRUCache.OptionsBase.max} (read-only)\n     */\n    get max() {\n        return this.#max;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.maxSize} (read-only)\n     */\n    get maxSize() {\n        return this.#maxSize;\n    }\n    /**\n     * The total computed size of items in the cache (read-only)\n     */\n    get calculatedSize() {\n        return this.#calculatedSize;\n    }\n    /**\n     * The number of items stored in the cache (read-only)\n     */\n    get size() {\n        return this.#size;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.fetchMethod} (read-only)\n     */\n    get fetchMethod() {\n        return this.#fetchMethod;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.dispose} (read-only)\n     */\n    get dispose() {\n        return this.#dispose;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.disposeAfter} (read-only)\n     */\n    get disposeAfter() {\n        return this.#disposeAfter;\n    }\n    constructor(options) {\n        const { max = 0, ttl, ttlResolution = 1, ttlAutopurge, updateAgeOnGet, updateAgeOnHas, allowStale, dispose, disposeAfter, noDisposeOnSet, noUpdateTTL, maxSize = 0, maxEntrySize = 0, sizeCalculation, fetchMethod, noDeleteOnFetchRejection, noDeleteOnStaleGet, allowStaleOnFetchRejection, allowStaleOnFetchAbort, ignoreFetchAbort, } = options;\n        if (max !== 0 && !isPosInt(max)) {\n            throw new TypeError('max option must be a nonnegative integer');\n        }\n        const UintArray = max ? getUintArray(max) : Array;\n        if (!UintArray) {\n            throw new Error('invalid max value: ' + max);\n        }\n        this.#max = max;\n        this.#maxSize = maxSize;\n        this.maxEntrySize = maxEntrySize || this.#maxSize;\n        this.sizeCalculation = sizeCalculation;\n        if (this.sizeCalculation) {\n            if (!this.#maxSize && !this.maxEntrySize) {\n                throw new TypeError('cannot set sizeCalculation without setting maxSize or maxEntrySize');\n            }\n            if (typeof this.sizeCalculation !== 'function') {\n                throw new TypeError('sizeCalculation set to non-function');\n            }\n        }\n        if (fetchMethod !== undefined &&\n            typeof fetchMethod !== 'function') {\n            throw new TypeError('fetchMethod must be a function if specified');\n        }\n        this.#fetchMethod = fetchMethod;\n        this.#hasFetchMethod = !!fetchMethod;\n        this.#keyMap = new Map();\n        this.#keyList = new Array(max).fill(undefined);\n        this.#valList = new Array(max).fill(undefined);\n        this.#next = new UintArray(max);\n        this.#prev = new UintArray(max);\n        this.#head = 0;\n        this.#tail = 0;\n        this.#free = Stack.create(max);\n        this.#size = 0;\n        this.#calculatedSize = 0;\n        if (typeof dispose === 'function') {\n            this.#dispose = dispose;\n        }\n        if (typeof disposeAfter === 'function') {\n            this.#disposeAfter = disposeAfter;\n            this.#disposed = [];\n        }\n        else {\n            this.#disposeAfter = undefined;\n            this.#disposed = undefined;\n        }\n        this.#hasDispose = !!this.#dispose;\n        this.#hasDisposeAfter = !!this.#disposeAfter;\n        this.noDisposeOnSet = !!noDisposeOnSet;\n        this.noUpdateTTL = !!noUpdateTTL;\n        this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;\n        this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;\n        this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;\n        this.ignoreFetchAbort = !!ignoreFetchAbort;\n        // NB: maxEntrySize is set to maxSize if it's set\n        if (this.maxEntrySize !== 0) {\n            if (this.#maxSize !== 0) {\n                if (!isPosInt(this.#maxSize)) {\n                    throw new TypeError('maxSize must be a positive integer if specified');\n                }\n            }\n            if (!isPosInt(this.maxEntrySize)) {\n                throw new TypeError('maxEntrySize must be a positive integer if specified');\n            }\n            this.#initializeSizeTracking();\n        }\n        this.allowStale = !!allowStale;\n        this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;\n        this.updateAgeOnGet = !!updateAgeOnGet;\n        this.updateAgeOnHas = !!updateAgeOnHas;\n        this.ttlResolution =\n            isPosInt(ttlResolution) || ttlResolution === 0\n                ? ttlResolution\n                : 1;\n        this.ttlAutopurge = !!ttlAutopurge;\n        this.ttl = ttl || 0;\n        if (this.ttl) {\n            if (!isPosInt(this.ttl)) {\n                throw new TypeError('ttl must be a positive integer if specified');\n            }\n            this.#initializeTTLTracking();\n        }\n        // do not allow completely unbounded caches\n        if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {\n            throw new TypeError('At least one of max, maxSize, or ttl is required');\n        }\n        if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {\n            const code = 'LRU_CACHE_UNBOUNDED';\n            if (shouldWarn(code)) {\n                warned.add(code);\n                const msg = 'TTL caching without ttlAutopurge, max, or maxSize can ' +\n                    'result in unbounded memory consumption.';\n                emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache);\n            }\n        }\n    }\n    /**\n     * Return the remaining TTL time for a given entry key\n     */\n    getRemainingTTL(key) {\n        return this.#keyMap.has(key) ? Infinity : 0;\n    }\n    #initializeTTLTracking() {\n        const ttls = new ZeroArray(this.#max);\n        const starts = new ZeroArray(this.#max);\n        this.#ttls = ttls;\n        this.#starts = starts;\n        this.#setItemTTL = (index, ttl, start = perf.now()) => {\n            starts[index] = ttl !== 0 ? start : 0;\n            ttls[index] = ttl;\n            if (ttl !== 0 && this.ttlAutopurge) {\n                const t = setTimeout(() => {\n                    if (this.#isStale(index)) {\n                        this.delete(this.#keyList[index]);\n                    }\n                }, ttl + 1);\n                // unref() not supported on all platforms\n                /* c8 ignore start */\n                if (t.unref) {\n                    t.unref();\n                }\n                /* c8 ignore stop */\n            }\n        };\n        this.#updateItemAge = index => {\n            starts[index] = ttls[index] !== 0 ? perf.now() : 0;\n        };\n        this.#statusTTL = (status, index) => {\n            if (ttls[index]) {\n                const ttl = ttls[index];\n                const start = starts[index];\n                status.ttl = ttl;\n                status.start = start;\n                status.now = cachedNow || getNow();\n                const age = status.now - start;\n                status.remainingTTL = ttl - age;\n            }\n        };\n        // debounce calls to perf.now() to 1s so we're not hitting\n        // that costly call repeatedly.\n        let cachedNow = 0;\n        const getNow = () => {\n            const n = perf.now();\n            if (this.ttlResolution > 0) {\n                cachedNow = n;\n                const t = setTimeout(() => (cachedNow = 0), this.ttlResolution);\n                // not available on all platforms\n                /* c8 ignore start */\n                if (t.unref) {\n                    t.unref();\n                }\n                /* c8 ignore stop */\n            }\n            return n;\n        };\n        this.getRemainingTTL = key => {\n            const index = this.#keyMap.get(key);\n            if (index === undefined) {\n                return 0;\n            }\n            const ttl = ttls[index];\n            const start = starts[index];\n            if (ttl === 0 || start === 0) {\n                return Infinity;\n            }\n            const age = (cachedNow || getNow()) - start;\n            return ttl - age;\n        };\n        this.#isStale = index => {\n            return (ttls[index] !== 0 &&\n                starts[index] !== 0 &&\n                (cachedNow || getNow()) - starts[index] > ttls[index]);\n        };\n    }\n    // conditionally set private methods related to TTL\n    #updateItemAge = () => { };\n    #statusTTL = () => { };\n    #setItemTTL = () => { };\n    /* c8 ignore stop */\n    #isStale = () => false;\n    #initializeSizeTracking() {\n        const sizes = new ZeroArray(this.#max);\n        this.#calculatedSize = 0;\n        this.#sizes = sizes;\n        this.#removeItemSize = index => {\n            this.#calculatedSize -= sizes[index];\n            sizes[index] = 0;\n        };\n        this.#requireSize = (k, v, size, sizeCalculation) => {\n            // provisionally accept background fetches.\n            // actual value size will be checked when they return.\n            if (this.#isBackgroundFetch(v)) {\n                return 0;\n            }\n            if (!isPosInt(size)) {\n                if (sizeCalculation) {\n                    if (typeof sizeCalculation !== 'function') {\n                        throw new TypeError('sizeCalculation must be a function');\n                    }\n                    size = sizeCalculation(v, k);\n                    if (!isPosInt(size)) {\n                        throw new TypeError('sizeCalculation return invalid (expect positive integer)');\n                    }\n                }\n                else {\n                    throw new TypeError('invalid size value (must be positive integer). ' +\n                        'When maxSize or maxEntrySize is used, sizeCalculation ' +\n                        'or size must be set.');\n                }\n            }\n            return size;\n        };\n        this.#addItemSize = (index, size, status) => {\n            sizes[index] = size;\n            if (this.#maxSize) {\n                const maxSize = this.#maxSize - sizes[index];\n                while (this.#calculatedSize > maxSize) {\n                    this.#evict(true);\n                }\n            }\n            this.#calculatedSize += sizes[index];\n            if (status) {\n                status.entrySize = size;\n                status.totalCalculatedSize = this.#calculatedSize;\n            }\n        };\n    }\n    #removeItemSize = _i => { };\n    #addItemSize = (_i, _s, _st) => { };\n    #requireSize = (_k, _v, size, sizeCalculation) => {\n        if (size || sizeCalculation) {\n            throw new TypeError('cannot set size without setting maxSize or maxEntrySize on cache');\n        }\n        return 0;\n    };\n    *#indexes({ allowStale = this.allowStale } = {}) {\n        if (this.#size) {\n            for (let i = this.#tail; true;) {\n                if (!this.#isValidIndex(i)) {\n                    break;\n                }\n                if (allowStale || !this.#isStale(i)) {\n                    yield i;\n                }\n                if (i === this.#head) {\n                    break;\n                }\n                else {\n                    i = this.#prev[i];\n                }\n            }\n        }\n    }\n    *#rindexes({ allowStale = this.allowStale } = {}) {\n        if (this.#size) {\n            for (let i = this.#head; true;) {\n                if (!this.#isValidIndex(i)) {\n                    break;\n                }\n                if (allowStale || !this.#isStale(i)) {\n                    yield i;\n                }\n                if (i === this.#tail) {\n                    break;\n                }\n                else {\n                    i = this.#next[i];\n                }\n            }\n        }\n    }\n    #isValidIndex(index) {\n        return (index !== undefined &&\n            this.#keyMap.get(this.#keyList[index]) === index);\n    }\n    /**\n     * Return a generator yielding `[key, value]` pairs,\n     * in order from most recently used to least recently used.\n     */\n    *entries() {\n        for (const i of this.#indexes()) {\n            if (this.#valList[i] !== undefined &&\n                this.#keyList[i] !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield [this.#keyList[i], this.#valList[i]];\n            }\n        }\n    }\n    /**\n     * Inverse order version of {@link LRUCache.entries}\n     *\n     * Return a generator yielding `[key, value]` pairs,\n     * in order from least recently used to most recently used.\n     */\n    *rentries() {\n        for (const i of this.#rindexes()) {\n            if (this.#valList[i] !== undefined &&\n                this.#keyList[i] !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield [this.#keyList[i], this.#valList[i]];\n            }\n        }\n    }\n    /**\n     * Return a generator yielding the keys in the cache,\n     * in order from most recently used to least recently used.\n     */\n    *keys() {\n        for (const i of this.#indexes()) {\n            const k = this.#keyList[i];\n            if (k !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield k;\n            }\n        }\n    }\n    /**\n     * Inverse order version of {@link LRUCache.keys}\n     *\n     * Return a generator yielding the keys in the cache,\n     * in order from least recently used to most recently used.\n     */\n    *rkeys() {\n        for (const i of this.#rindexes()) {\n            const k = this.#keyList[i];\n            if (k !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield k;\n            }\n        }\n    }\n    /**\n     * Return a generator yielding the values in the cache,\n     * in order from most recently used to least recently used.\n     */\n    *values() {\n        for (const i of this.#indexes()) {\n            const v = this.#valList[i];\n            if (v !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield this.#valList[i];\n            }\n        }\n    }\n    /**\n     * Inverse order version of {@link LRUCache.values}\n     *\n     * Return a generator yielding the values in the cache,\n     * in order from least recently used to most recently used.\n     */\n    *rvalues() {\n        for (const i of this.#rindexes()) {\n            const v = this.#valList[i];\n            if (v !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield this.#valList[i];\n            }\n        }\n    }\n    /**\n     * Iterating over the cache itself yields the same results as\n     * {@link LRUCache.entries}\n     */\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n    /**\n     * Find a value for which the supplied fn method returns a truthy value,\n     * similar to Array.find().  fn is called as fn(value, key, cache).\n     */\n    find(fn, getOptions = {}) {\n        for (const i of this.#indexes()) {\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined)\n                continue;\n            if (fn(value, this.#keyList[i], this)) {\n                return this.get(this.#keyList[i], getOptions);\n            }\n        }\n    }\n    /**\n     * Call the supplied function on each item in the cache, in order from\n     * most recently used to least recently used.  fn is called as\n     * fn(value, key, cache).  Does not update age or recenty of use.\n     * Does not iterate over stale values.\n     */\n    forEach(fn, thisp = this) {\n        for (const i of this.#indexes()) {\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined)\n                continue;\n            fn.call(thisp, value, this.#keyList[i], this);\n        }\n    }\n    /**\n     * The same as {@link LRUCache.forEach} but items are iterated over in\n     * reverse order.  (ie, less recently used items are iterated over first.)\n     */\n    rforEach(fn, thisp = this) {\n        for (const i of this.#rindexes()) {\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined)\n                continue;\n            fn.call(thisp, value, this.#keyList[i], this);\n        }\n    }\n    /**\n     * Delete any stale entries. Returns true if anything was removed,\n     * false otherwise.\n     */\n    purgeStale() {\n        let deleted = false;\n        for (const i of this.#rindexes({ allowStale: true })) {\n            if (this.#isStale(i)) {\n                this.delete(this.#keyList[i]);\n                deleted = true;\n            }\n        }\n        return deleted;\n    }\n    /**\n     * Return an array of [key, {@link LRUCache.Entry}] tuples which can be\n     * passed to cache.load()\n     */\n    dump() {\n        const arr = [];\n        for (const i of this.#indexes({ allowStale: true })) {\n            const key = this.#keyList[i];\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined || key === undefined)\n                continue;\n            const entry = { value };\n            if (this.#ttls && this.#starts) {\n                entry.ttl = this.#ttls[i];\n                // always dump the start relative to a portable timestamp\n                // it's ok for this to be a bit slow, it's a rare operation.\n                const age = perf.now() - this.#starts[i];\n                entry.start = Math.floor(Date.now() - age);\n            }\n            if (this.#sizes) {\n                entry.size = this.#sizes[i];\n            }\n            arr.unshift([key, entry]);\n        }\n        return arr;\n    }\n    /**\n     * Reset the cache and load in the items in entries in the order listed.\n     * Note that the shape of the resulting cache may be different if the\n     * same options are not used in both caches.\n     */\n    load(arr) {\n        this.clear();\n        for (const [key, entry] of arr) {\n            if (entry.start) {\n                // entry.start is a portable timestamp, but we may be using\n                // node's performance.now(), so calculate the offset, so that\n                // we get the intended remaining TTL, no matter how long it's\n                // been on ice.\n                //\n                // it's ok for this to be a bit slow, it's a rare operation.\n                const age = Date.now() - entry.start;\n                entry.start = perf.now() - age;\n            }\n            this.set(key, entry.value, entry);\n        }\n    }\n    /**\n     * Add a value to the cache.\n     *\n     * Note: if `undefined` is specified as a value, this is an alias for\n     * {@link LRUCache#delete}\n     */\n    set(k, v, setOptions = {}) {\n        if (v === undefined) {\n            this.delete(k);\n            return this;\n        }\n        const { ttl = this.ttl, start, noDisposeOnSet = this.noDisposeOnSet, sizeCalculation = this.sizeCalculation, status, } = setOptions;\n        let { noUpdateTTL = this.noUpdateTTL } = setOptions;\n        const size = this.#requireSize(k, v, setOptions.size || 0, sizeCalculation);\n        // if the item doesn't fit, don't do anything\n        // NB: maxEntrySize set to maxSize by default\n        if (this.maxEntrySize && size > this.maxEntrySize) {\n            if (status) {\n                status.set = 'miss';\n                status.maxEntrySizeExceeded = true;\n            }\n            // have to delete, in case something is there already.\n            this.delete(k);\n            return this;\n        }\n        let index = this.#size === 0 ? undefined : this.#keyMap.get(k);\n        if (index === undefined) {\n            // addition\n            index = (this.#size === 0\n                ? this.#tail\n                : this.#free.length !== 0\n                    ? this.#free.pop()\n                    : this.#size === this.#max\n                        ? this.#evict(false)\n                        : this.#size);\n            this.#keyList[index] = k;\n            this.#valList[index] = v;\n            this.#keyMap.set(k, index);\n            this.#next[this.#tail] = index;\n            this.#prev[index] = this.#tail;\n            this.#tail = index;\n            this.#size++;\n            this.#addItemSize(index, size, status);\n            if (status)\n                status.set = 'add';\n            noUpdateTTL = false;\n        }\n        else {\n            // update\n            this.#moveToTail(index);\n            const oldVal = this.#valList[index];\n            if (v !== oldVal) {\n                if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {\n                    oldVal.__abortController.abort(new Error('replaced'));\n                    const { __staleWhileFetching: s } = oldVal;\n                    if (s !== undefined && !noDisposeOnSet) {\n                        if (this.#hasDispose) {\n                            this.#dispose?.(s, k, 'set');\n                        }\n                        if (this.#hasDisposeAfter) {\n                            this.#disposed?.push([s, k, 'set']);\n                        }\n                    }\n                }\n                else if (!noDisposeOnSet) {\n                    if (this.#hasDispose) {\n                        this.#dispose?.(oldVal, k, 'set');\n                    }\n                    if (this.#hasDisposeAfter) {\n                        this.#disposed?.push([oldVal, k, 'set']);\n                    }\n                }\n                this.#removeItemSize(index);\n                this.#addItemSize(index, size, status);\n                this.#valList[index] = v;\n                if (status) {\n                    status.set = 'replace';\n                    const oldValue = oldVal && this.#isBackgroundFetch(oldVal)\n                        ? oldVal.__staleWhileFetching\n                        : oldVal;\n                    if (oldValue !== undefined)\n                        status.oldValue = oldValue;\n                }\n            }\n            else if (status) {\n                status.set = 'update';\n            }\n        }\n        if (ttl !== 0 && !this.#ttls) {\n            this.#initializeTTLTracking();\n        }\n        if (this.#ttls) {\n            if (!noUpdateTTL) {\n                this.#setItemTTL(index, ttl, start);\n            }\n            if (status)\n                this.#statusTTL(status, index);\n        }\n        if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {\n            const dt = this.#disposed;\n            let task;\n            while ((task = dt?.shift())) {\n                this.#disposeAfter?.(...task);\n            }\n        }\n        return this;\n    }\n    /**\n     * Evict the least recently used item, returning its value or\n     * `undefined` if cache is empty.\n     */\n    pop() {\n        try {\n            while (this.#size) {\n                const val = this.#valList[this.#head];\n                this.#evict(true);\n                if (this.#isBackgroundFetch(val)) {\n                    if (val.__staleWhileFetching) {\n                        return val.__staleWhileFetching;\n                    }\n                }\n                else if (val !== undefined) {\n                    return val;\n                }\n            }\n        }\n        finally {\n            if (this.#hasDisposeAfter && this.#disposed) {\n                const dt = this.#disposed;\n                let task;\n                while ((task = dt?.shift())) {\n                    this.#disposeAfter?.(...task);\n                }\n            }\n        }\n    }\n    #evict(free) {\n        const head = this.#head;\n        const k = this.#keyList[head];\n        const v = this.#valList[head];\n        if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error('evicted'));\n        }\n        else if (this.#hasDispose || this.#hasDisposeAfter) {\n            if (this.#hasDispose) {\n                this.#dispose?.(v, k, 'evict');\n            }\n            if (this.#hasDisposeAfter) {\n                this.#disposed?.push([v, k, 'evict']);\n            }\n        }\n        this.#removeItemSize(head);\n        // if we aren't about to use the index, then null these out\n        if (free) {\n            this.#keyList[head] = undefined;\n            this.#valList[head] = undefined;\n            this.#free.push(head);\n        }\n        if (this.#size === 1) {\n            this.#head = this.#tail = 0;\n            this.#free.length = 0;\n        }\n        else {\n            this.#head = this.#next[head];\n        }\n        this.#keyMap.delete(k);\n        this.#size--;\n        return head;\n    }\n    /**\n     * Check if a key is in the cache, without updating the recency of use.\n     * Will return false if the item is stale, even though it is technically\n     * in the cache.\n     *\n     * Will not update item age unless\n     * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.\n     */\n    has(k, hasOptions = {}) {\n        const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined) {\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v) &&\n                v.__staleWhileFetching === undefined) {\n                return false;\n            }\n            if (!this.#isStale(index)) {\n                if (updateAgeOnHas) {\n                    this.#updateItemAge(index);\n                }\n                if (status) {\n                    status.has = 'hit';\n                    this.#statusTTL(status, index);\n                }\n                return true;\n            }\n            else if (status) {\n                status.has = 'stale';\n                this.#statusTTL(status, index);\n            }\n        }\n        else if (status) {\n            status.has = 'miss';\n        }\n        return false;\n    }\n    /**\n     * Like {@link LRUCache#get} but doesn't update recency or delete stale\n     * items.\n     *\n     * Returns `undefined` if the item is stale, unless\n     * {@link LRUCache.OptionsBase.allowStale} is set.\n     */\n    peek(k, peekOptions = {}) {\n        const { allowStale = this.allowStale } = peekOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined &&\n            (allowStale || !this.#isStale(index))) {\n            const v = this.#valList[index];\n            // either stale and allowed, or forcing a refresh of non-stale value\n            return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;\n        }\n    }\n    #backgroundFetch(k, index, options, context) {\n        const v = index === undefined ? undefined : this.#valList[index];\n        if (this.#isBackgroundFetch(v)) {\n            return v;\n        }\n        const ac = new AC();\n        const { signal } = options;\n        // when/if our AC signals, then stop listening to theirs.\n        signal?.addEventListener('abort', () => ac.abort(signal.reason), {\n            signal: ac.signal,\n        });\n        const fetchOpts = {\n            signal: ac.signal,\n            options,\n            context,\n        };\n        const cb = (v, updateCache = false) => {\n            const { aborted } = ac.signal;\n            const ignoreAbort = options.ignoreFetchAbort && v !== undefined;\n            if (options.status) {\n                if (aborted && !updateCache) {\n                    options.status.fetchAborted = true;\n                    options.status.fetchError = ac.signal.reason;\n                    if (ignoreAbort)\n                        options.status.fetchAbortIgnored = true;\n                }\n                else {\n                    options.status.fetchResolved = true;\n                }\n            }\n            if (aborted && !ignoreAbort && !updateCache) {\n                return fetchFail(ac.signal.reason);\n            }\n            // either we didn't abort, and are still here, or we did, and ignored\n            const bf = p;\n            if (this.#valList[index] === p) {\n                if (v === undefined) {\n                    if (bf.__staleWhileFetching) {\n                        this.#valList[index] = bf.__staleWhileFetching;\n                    }\n                    else {\n                        this.delete(k);\n                    }\n                }\n                else {\n                    if (options.status)\n                        options.status.fetchUpdated = true;\n                    this.set(k, v, fetchOpts.options);\n                }\n            }\n            return v;\n        };\n        const eb = (er) => {\n            if (options.status) {\n                options.status.fetchRejected = true;\n                options.status.fetchError = er;\n            }\n            return fetchFail(er);\n        };\n        const fetchFail = (er) => {\n            const { aborted } = ac.signal;\n            const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;\n            const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;\n            const noDelete = allowStale || options.noDeleteOnFetchRejection;\n            const bf = p;\n            if (this.#valList[index] === p) {\n                // if we allow stale on fetch rejections, then we need to ensure that\n                // the stale value is not removed from the cache when the fetch fails.\n                const del = !noDelete || bf.__staleWhileFetching === undefined;\n                if (del) {\n                    this.delete(k);\n                }\n                else if (!allowStaleAborted) {\n                    // still replace the *promise* with the stale value,\n                    // since we are done with the promise at this point.\n                    // leave it untouched if we're still waiting for an\n                    // aborted background fetch that hasn't yet returned.\n                    this.#valList[index] = bf.__staleWhileFetching;\n                }\n            }\n            if (allowStale) {\n                if (options.status && bf.__staleWhileFetching !== undefined) {\n                    options.status.returnedStale = true;\n                }\n                return bf.__staleWhileFetching;\n            }\n            else if (bf.__returned === bf) {\n                throw er;\n            }\n        };\n        const pcall = (res, rej) => {\n            const fmp = this.#fetchMethod?.(k, v, fetchOpts);\n            if (fmp && fmp instanceof Promise) {\n                fmp.then(v => res(v === undefined ? undefined : v), rej);\n            }\n            // ignored, we go until we finish, regardless.\n            // defer check until we are actually aborting,\n            // so fetchMethod can override.\n            ac.signal.addEventListener('abort', () => {\n                if (!options.ignoreFetchAbort ||\n                    options.allowStaleOnFetchAbort) {\n                    res(undefined);\n                    // when it eventually resolves, update the cache.\n                    if (options.allowStaleOnFetchAbort) {\n                        res = v => cb(v, true);\n                    }\n                }\n            });\n        };\n        if (options.status)\n            options.status.fetchDispatched = true;\n        const p = new Promise(pcall).then(cb, eb);\n        const bf = Object.assign(p, {\n            __abortController: ac,\n            __staleWhileFetching: v,\n            __returned: undefined,\n        });\n        if (index === undefined) {\n            // internal, don't expose status.\n            this.set(k, bf, { ...fetchOpts.options, status: undefined });\n            index = this.#keyMap.get(k);\n        }\n        else {\n            this.#valList[index] = bf;\n        }\n        return bf;\n    }\n    #isBackgroundFetch(p) {\n        if (!this.#hasFetchMethod)\n            return false;\n        const b = p;\n        return (!!b &&\n            b instanceof Promise &&\n            b.hasOwnProperty('__staleWhileFetching') &&\n            b.__abortController instanceof AC);\n    }\n    async fetch(k, fetchOptions = {}) {\n        const { \n        // get options\n        allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, \n        // set options\n        ttl = this.ttl, noDisposeOnSet = this.noDisposeOnSet, size = 0, sizeCalculation = this.sizeCalculation, noUpdateTTL = this.noUpdateTTL, \n        // fetch exclusive options\n        noDeleteOnFetchRejection = this.noDeleteOnFetchRejection, allowStaleOnFetchRejection = this.allowStaleOnFetchRejection, ignoreFetchAbort = this.ignoreFetchAbort, allowStaleOnFetchAbort = this.allowStaleOnFetchAbort, context, forceRefresh = false, status, signal, } = fetchOptions;\n        if (!this.#hasFetchMethod) {\n            if (status)\n                status.fetch = 'get';\n            return this.get(k, {\n                allowStale,\n                updateAgeOnGet,\n                noDeleteOnStaleGet,\n                status,\n            });\n        }\n        const options = {\n            allowStale,\n            updateAgeOnGet,\n            noDeleteOnStaleGet,\n            ttl,\n            noDisposeOnSet,\n            size,\n            sizeCalculation,\n            noUpdateTTL,\n            noDeleteOnFetchRejection,\n            allowStaleOnFetchRejection,\n            allowStaleOnFetchAbort,\n            ignoreFetchAbort,\n            status,\n            signal,\n        };\n        let index = this.#keyMap.get(k);\n        if (index === undefined) {\n            if (status)\n                status.fetch = 'miss';\n            const p = this.#backgroundFetch(k, index, options, context);\n            return (p.__returned = p);\n        }\n        else {\n            // in cache, maybe already fetching\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v)) {\n                const stale = allowStale && v.__staleWhileFetching !== undefined;\n                if (status) {\n                    status.fetch = 'inflight';\n                    if (stale)\n                        status.returnedStale = true;\n                }\n                return stale ? v.__staleWhileFetching : (v.__returned = v);\n            }\n            // if we force a refresh, that means do NOT serve the cached value,\n            // unless we are already in the process of refreshing the cache.\n            const isStale = this.#isStale(index);\n            if (!forceRefresh && !isStale) {\n                if (status)\n                    status.fetch = 'hit';\n                this.#moveToTail(index);\n                if (updateAgeOnGet) {\n                    this.#updateItemAge(index);\n                }\n                if (status)\n                    this.#statusTTL(status, index);\n                return v;\n            }\n            // ok, it is stale or a forced refresh, and not already fetching.\n            // refresh the cache.\n            const p = this.#backgroundFetch(k, index, options, context);\n            const hasStale = p.__staleWhileFetching !== undefined;\n            const staleVal = hasStale && allowStale;\n            if (status) {\n                status.fetch = isStale ? 'stale' : 'refresh';\n                if (staleVal && isStale)\n                    status.returnedStale = true;\n            }\n            return staleVal ? p.__staleWhileFetching : (p.__returned = p);\n        }\n    }\n    /**\n     * Return a value from the cache. Will update the recency of the cache\n     * entry found.\n     *\n     * If the key is not found, get() will return `undefined`.\n     */\n    get(k, getOptions = {}) {\n        const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status, } = getOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined) {\n            const value = this.#valList[index];\n            const fetching = this.#isBackgroundFetch(value);\n            if (status)\n                this.#statusTTL(status, index);\n            if (this.#isStale(index)) {\n                if (status)\n                    status.get = 'stale';\n                // delete only if not an in-flight background fetch\n                if (!fetching) {\n                    if (!noDeleteOnStaleGet) {\n                        this.delete(k);\n                    }\n                    if (status && allowStale)\n                        status.returnedStale = true;\n                    return allowStale ? value : undefined;\n                }\n                else {\n                    if (status &&\n                        allowStale &&\n                        value.__staleWhileFetching !== undefined) {\n                        status.returnedStale = true;\n                    }\n                    return allowStale ? value.__staleWhileFetching : undefined;\n                }\n            }\n            else {\n                if (status)\n                    status.get = 'hit';\n                // if we're currently fetching it, we don't actually have it yet\n                // it's not stale, which means this isn't a staleWhileRefetching.\n                // If it's not stale, and fetching, AND has a __staleWhileFetching\n                // value, then that means the user fetched with {forceRefresh:true},\n                // so it's safe to return that value.\n                if (fetching) {\n                    return value.__staleWhileFetching;\n                }\n                this.#moveToTail(index);\n                if (updateAgeOnGet) {\n                    this.#updateItemAge(index);\n                }\n                return value;\n            }\n        }\n        else if (status) {\n            status.get = 'miss';\n        }\n    }\n    #connect(p, n) {\n        this.#prev[n] = p;\n        this.#next[p] = n;\n    }\n    #moveToTail(index) {\n        // if tail already, nothing to do\n        // if head, move head to next[index]\n        // else\n        //   move next[prev[index]] to next[index] (head has no prev)\n        //   move prev[next[index]] to prev[index]\n        // prev[index] = tail\n        // next[tail] = index\n        // tail = index\n        if (index !== this.#tail) {\n            if (index === this.#head) {\n                this.#head = this.#next[index];\n            }\n            else {\n                this.#connect(this.#prev[index], this.#next[index]);\n            }\n            this.#connect(this.#tail, index);\n            this.#tail = index;\n        }\n    }\n    /**\n     * Deletes a key out of the cache.\n     * Returns true if the key was deleted, false otherwise.\n     */\n    delete(k) {\n        let deleted = false;\n        if (this.#size !== 0) {\n            const index = this.#keyMap.get(k);\n            if (index !== undefined) {\n                deleted = true;\n                if (this.#size === 1) {\n                    this.clear();\n                }\n                else {\n                    this.#removeItemSize(index);\n                    const v = this.#valList[index];\n                    if (this.#isBackgroundFetch(v)) {\n                        v.__abortController.abort(new Error('deleted'));\n                    }\n                    else if (this.#hasDispose || this.#hasDisposeAfter) {\n                        if (this.#hasDispose) {\n                            this.#dispose?.(v, k, 'delete');\n                        }\n                        if (this.#hasDisposeAfter) {\n                            this.#disposed?.push([v, k, 'delete']);\n                        }\n                    }\n                    this.#keyMap.delete(k);\n                    this.#keyList[index] = undefined;\n                    this.#valList[index] = undefined;\n                    if (index === this.#tail) {\n                        this.#tail = this.#prev[index];\n                    }\n                    else if (index === this.#head) {\n                        this.#head = this.#next[index];\n                    }\n                    else {\n                        this.#next[this.#prev[index]] = this.#next[index];\n                        this.#prev[this.#next[index]] = this.#prev[index];\n                    }\n                    this.#size--;\n                    this.#free.push(index);\n                }\n            }\n        }\n        if (this.#hasDisposeAfter && this.#disposed?.length) {\n            const dt = this.#disposed;\n            let task;\n            while ((task = dt?.shift())) {\n                this.#disposeAfter?.(...task);\n            }\n        }\n        return deleted;\n    }\n    /**\n     * Clear the cache entirely, throwing away all values.\n     */\n    clear() {\n        for (const index of this.#rindexes({ allowStale: true })) {\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v)) {\n                v.__abortController.abort(new Error('deleted'));\n            }\n            else {\n                const k = this.#keyList[index];\n                if (this.#hasDispose) {\n                    this.#dispose?.(v, k, 'delete');\n                }\n                if (this.#hasDisposeAfter) {\n                    this.#disposed?.push([v, k, 'delete']);\n                }\n            }\n        }\n        this.#keyMap.clear();\n        this.#valList.fill(undefined);\n        this.#keyList.fill(undefined);\n        if (this.#ttls && this.#starts) {\n            this.#ttls.fill(0);\n            this.#starts.fill(0);\n        }\n        if (this.#sizes) {\n            this.#sizes.fill(0);\n        }\n        this.#head = 0;\n        this.#tail = 0;\n        this.#free.length = 0;\n        this.#calculatedSize = 0;\n        this.#size = 0;\n        if (this.#hasDisposeAfter && this.#disposed) {\n            const dt = this.#disposed;\n            let task;\n            while ((task = dt?.shift())) {\n                this.#disposeAfter?.(...task);\n            }\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","'use strict';\n\n// FNV_PRIMES and FNV_OFFSETS from\n// http://www.isthe.com/chongo/tech/comp/fnv/index.html#FNV-param\n\nconst FNV_PRIMES = {\n\t32: 16777619n,\n\t64: 1099511628211n,\n\t128: 309485009821345068724781371n,\n\t256: 374144419156711147060143317175368453031918731002211n,\n\t512: 35835915874844867368919076489095108449946327955754392558399825615420669938882575126094039892345713852759n,\n\t1024: 5016456510113118655434598811035278955030765345404790744303017523831112055108147451509157692220295382716162651878526895249385292291816524375083746691371804094271873160484737966720260389217684476157468082573n\n};\n\nconst FNV_OFFSETS = {\n\t32: 2166136261n,\n\t64: 14695981039346656037n,\n\t128: 144066263297769815596495629667062367629n,\n\t256: 100029257958052580907070968620625704837092796014241193945225284501741471925557n,\n\t512: 9659303129496669498009435400716310466090418745672637896108374329434462657994582932197716438449813051892206539805784495328239340083876191928701583869517785n,\n\t1024: 14197795064947621068722070641403218320880622795441933960878474914617582723252296732303717722150864096521202355549365628174669108571814760471015076148029755969804077320157692458563003215304957150157403644460363550505412711285966361610267868082893823963790439336411086884584107735010676915n\n};\n\n// Legacy implementation for 32-bit + number types\nfunction fnv1a(string) {\n\t// Handle Unicode code points > 0x7f\n\tlet hash = Number(FNV_OFFSETS[32]);\n\tlet isUnicoded = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet characterCode = string.charCodeAt(i);\n\n\t\t// Non-ASCII characters trigger the Unicode escape logic\n\t\tif (characterCode > 0x7F && !isUnicoded) {\n\t\t\tstring = unescape(encodeURIComponent(string));\n\t\t\tcharacterCode = string.charCodeAt(i);\n\t\t\tisUnicoded = true;\n\t\t}\n\n\t\thash ^= characterCode;\n\t\thash += (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);\n\t}\n\n\treturn hash >>> 0;\n}\n\nfunction bigInt(string, {size = 32} = {}) {\n\tif (!FNV_PRIMES[size]) {\n\t\tthrow new Error('The `size` option must be one of 32, 64, 128, 256, 512, or 1024');\n\t}\n\n\tlet hash = FNV_OFFSETS[size];\n\tconst fnvPrime = FNV_PRIMES[size];\n\n\t// Handle Unicode code points > 0x7f\n\tlet isUnicoded = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet characterCode = string.charCodeAt(i);\n\n\t\t// Non-ASCII characters trigger the Unicode escape logic\n\t\tif (characterCode > 0x7F && !isUnicoded) {\n\t\t\tstring = unescape(encodeURIComponent(string));\n\t\t\tcharacterCode = string.charCodeAt(i);\n\t\t\tisUnicoded = true;\n\t\t}\n\n\t\thash ^= BigInt(characterCode);\n\t\thash = BigInt.asUintN(size, hash * fnvPrime);\n\t}\n\n\treturn hash;\n}\n\nmodule.exports = fnv1a;\nmodule.exports.bigInt = bigInt;\n","import { ts } from './ts';\nimport { parse, visit } from 'graphql';\n\nimport { findNode } from './ast';\n\nexport const UNUSED_FIELD_CODE = 52005;\n\nconst unwrapAbstractType = (type: ts.Type) => {\n  return type.isUnionOrIntersection()\n    ? type.types.find(type => type.flags & ts.TypeFlags.Object) || type\n    : type;\n};\n\nconst getVariableDeclaration = (\n  start: ts.Node\n): ts.VariableDeclaration | undefined => {\n  let node: ts.Node = start;\n  const seen = new Set();\n  while (node.parent && !seen.has(node)) {\n    seen.add(node);\n    if (ts.isBlock(node)) {\n      return; // NOTE: We never want to traverse up into a new function/module block\n    } else if (ts.isVariableDeclaration((node = node.parent))) {\n      return node;\n    }\n  }\n};\n\nconst traverseArrayDestructuring = (\n  node: ts.ArrayBindingPattern,\n  originalWip: Array<string>,\n  allFields: Array<string>,\n  source: ts.SourceFile,\n  info: ts.server.PluginCreateInfo\n): Array<string> => {\n  return node.elements.flatMap(element => {\n    if (ts.isOmittedExpression(element)) return [];\n\n    const wip = [...originalWip];\n    return ts.isIdentifier(element.name)\n      ? crawlScope(element.name, wip, allFields, source, info, false)\n      : ts.isObjectBindingPattern(element.name)\n      ? traverseDestructuring(element.name, wip, allFields, source, info)\n      : traverseArrayDestructuring(element.name, wip, allFields, source, info);\n  });\n};\n\nconst traverseDestructuring = (\n  node: ts.ObjectBindingPattern,\n  originalWip: Array<string>,\n  allFields: Array<string>,\n  source: ts.SourceFile,\n  info: ts.server.PluginCreateInfo\n): Array<string> => {\n  const results = [];\n  for (const binding of node.elements) {\n    if (ts.isObjectBindingPattern(binding.name)) {\n      const wip = [...originalWip];\n      if (\n        binding.propertyName &&\n        !originalWip.includes(binding.propertyName.getText())\n      ) {\n        const joined = [...wip, binding.propertyName.getText()].join('.');\n        if (allFields.find(x => x.startsWith(joined))) {\n          wip.push(binding.propertyName.getText());\n        }\n      }\n      const traverseResult = traverseDestructuring(\n        binding.name,\n        wip,\n        allFields,\n        source,\n        info\n      );\n\n      results.push(...traverseResult);\n    } else if (ts.isIdentifier(binding.name)) {\n      const wip = [...originalWip];\n      if (\n        binding.propertyName &&\n        !originalWip.includes(binding.propertyName.getText())\n      ) {\n        const joined = [...wip, binding.propertyName.getText()].join('.');\n        if (allFields.find(x => x.startsWith(joined))) {\n          wip.push(binding.propertyName.getText());\n        }\n      } else {\n        const joined = [...wip, binding.name.getText()].join('.');\n        if (allFields.find(x => x.startsWith(joined))) {\n          wip.push(binding.name.getText());\n        }\n      }\n\n      const crawlResult = crawlScope(\n        binding.name,\n        wip,\n        allFields,\n        source,\n        info,\n        false\n      );\n\n      results.push(...crawlResult);\n    }\n  }\n\n  return results;\n};\n\nconst arrayMethods = new Set([\n  'map',\n  'filter',\n  'forEach',\n  'reduce',\n  'every',\n  'some',\n  'find',\n  'flatMap',\n  'sort',\n]);\n\nconst crawlScope = (\n  node: ts.BindingName,\n  originalWip: Array<string>,\n  allFields: Array<string>,\n  source: ts.SourceFile,\n  info: ts.server.PluginCreateInfo,\n  inArrayMethod: boolean\n): Array<string> => {\n  if (ts.isObjectBindingPattern(node)) {\n    return traverseDestructuring(node, originalWip, allFields, source, info);\n  } else if (ts.isArrayBindingPattern(node)) {\n    return traverseArrayDestructuring(\n      node,\n      originalWip,\n      allFields,\n      source,\n      info\n    );\n  }\n\n  let results: string[] = [];\n\n  const references = info.languageService.getReferencesAtPosition(\n    source.fileName,\n    node.getStart()\n  );\n\n  if (!references) return results;\n\n  // Go over all the references tied to the result of\n  // accessing our equery and collect them as fully\n  // qualified paths (ideally ending in a leaf-node)\n  results = references.flatMap(ref => {\n    // If we get a reference to a different file we can bail\n    if (ref.fileName !== source.fileName) return [];\n    // We don't want to end back at our document so we narrow\n    // the scope.\n    if (\n      node.getStart() <= ref.textSpan.start &&\n      node.getEnd() >= ref.textSpan.start + ref.textSpan.length\n    )\n      return [];\n\n    let foundRef = findNode(source, ref.textSpan.start);\n    if (!foundRef) return [];\n\n    const pathParts = [...originalWip];\n    // In here we'll start crawling all the accessors of result\n    // and try to determine the total path\n    // - result.data.pokemon.name --> pokemon.name this is the easy route and never accesses\n    //   any of the recursive functions\n    // - const pokemon = result.data.pokemon --> this initiates a new crawl with a renewed scope\n    // - const { pokemon } = result.data --> this initiates a destructuring traversal which will\n    //   either end up in more destructuring traversals or a scope crawl\n    while (\n      ts.isIdentifier(foundRef) ||\n      ts.isPropertyAccessExpression(foundRef) ||\n      ts.isElementAccessExpression(foundRef) ||\n      ts.isVariableDeclaration(foundRef) ||\n      ts.isBinaryExpression(foundRef) ||\n      ts.isReturnStatement(foundRef) ||\n      ts.isArrowFunction(foundRef)\n    ) {\n      if (\n        !inArrayMethod &&\n        (ts.isReturnStatement(foundRef) || ts.isArrowFunction(foundRef))\n      ) {\n        // When we are returning the ref or we are dealing with an implicit return\n        // we mark all its children as used (bail scenario)\n        const joined = pathParts.join('.');\n        const bailedFields = allFields.filter(x => x.startsWith(joined + '.'));\n        return bailedFields;\n      } else if (ts.isVariableDeclaration(foundRef)) {\n        return crawlScope(\n          foundRef.name,\n          pathParts,\n          allFields,\n          source,\n          info,\n          false\n        );\n      } else if (\n        ts.isIdentifier(foundRef) &&\n        !pathParts.includes(foundRef.text)\n      ) {\n        const joined = [...pathParts, foundRef.text].join('.');\n        if (allFields.find(x => x.startsWith(joined + '.'))) {\n          pathParts.push(foundRef.text);\n        }\n      } else if (\n        ts.isPropertyAccessExpression(foundRef) &&\n        foundRef.name.text === 'at' &&\n        ts.isCallExpression(foundRef.parent)\n      ) {\n        foundRef = foundRef.parent;\n      } else if (\n        ts.isPropertyAccessExpression(foundRef) &&\n        arrayMethods.has(foundRef.name.text) &&\n        ts.isCallExpression(foundRef.parent)\n      ) {\n        const isReduce = foundRef.name.text === 'reduce';\n        const isSomeOrEvery =\n          foundRef.name.text === 'every' || foundRef.name.text === 'some';\n        const callExpression = foundRef.parent;\n        let func: ts.Expression | ts.FunctionDeclaration =\n          callExpression.arguments[0];\n\n        if (ts.isIdentifier(func)) {\n          // TODO: Scope utilities in checkFieldUsageInFile to deduplicate\n          const checker = info.languageService.getProgram()!.getTypeChecker();\n\n          const declaration =\n            checker.getSymbolAtLocation(func)?.valueDeclaration;\n          if (declaration && ts.isFunctionDeclaration(declaration)) {\n            func = declaration;\n          } else if (\n            declaration &&\n            ts.isVariableDeclaration(declaration) &&\n            declaration.initializer\n          ) {\n            func = declaration.initializer;\n          }\n        }\n\n        if (\n          ts.isFunctionDeclaration(func) ||\n          ts.isFunctionExpression(func) ||\n          ts.isArrowFunction(func)\n        ) {\n          const param = func.parameters[isReduce ? 1 : 0];\n          const res = crawlScope(\n            param.name,\n            pathParts,\n            allFields,\n            source,\n            info,\n            true\n          );\n\n          if (\n            ts.isVariableDeclaration(callExpression.parent) &&\n            !isSomeOrEvery\n          ) {\n            const varRes = crawlScope(\n              callExpression.parent.name,\n              pathParts,\n              allFields,\n              source,\n              info,\n              true\n            );\n            res.push(...varRes);\n          }\n\n          return res;\n        }\n      } else if (\n        ts.isPropertyAccessExpression(foundRef) &&\n        !pathParts.includes(foundRef.name.text)\n      ) {\n        const joined = [...pathParts, foundRef.name.text].join('.');\n        if (allFields.find(x => x.startsWith(joined))) {\n          pathParts.push(foundRef.name.text);\n        }\n      } else if (\n        ts.isElementAccessExpression(foundRef) &&\n        ts.isStringLiteral(foundRef.argumentExpression) &&\n        !pathParts.includes(foundRef.argumentExpression.text)\n      ) {\n        const joined = [...pathParts, foundRef.argumentExpression.text].join(\n          '.'\n        );\n        if (allFields.find(x => x.startsWith(joined))) {\n          pathParts.push(foundRef.argumentExpression.text);\n        }\n      }\n\n      if (ts.isNonNullExpression(foundRef.parent)) {\n        foundRef = foundRef.parent.parent;\n      } else {\n        foundRef = foundRef.parent;\n      }\n    }\n\n    return pathParts.join('.');\n  });\n\n  return results;\n};\n\nexport const checkFieldUsageInFile = (\n  source: ts.SourceFile,\n  nodes: ts.NoSubstitutionTemplateLiteral[],\n  info: ts.server.PluginCreateInfo\n) => {\n  const diagnostics: ts.Diagnostic[] = [];\n  const shouldTrackFieldUsage = info.config.trackFieldUsage ?? true;\n  if (!shouldTrackFieldUsage) return diagnostics;\n\n  const defaultReservedKeys = ['id', '_id', '__typename'];\n  const additionalKeys = info.config.reservedKeys ?? [];\n  const reservedKeys = new Set([...defaultReservedKeys, ...additionalKeys]);\n  const checker = info.languageService.getProgram()?.getTypeChecker();\n  if (!checker) return;\n\n  try {\n    nodes.forEach(node => {\n      const nodeText = node.getText();\n      // Bailing for mutations/subscriptions as these could have small details\n      // for normalised cache interactions\n      if (nodeText.includes('mutation') || nodeText.includes('subscription'))\n        return;\n\n      const variableDeclaration = getVariableDeclaration(node);\n      if (!variableDeclaration) return;\n\n      let dataType: ts.Type | undefined;\n\n      const type = checker.getTypeAtLocation(node.parent) as\n        | ts.TypeReference\n        | ts.Type;\n      // Attempt to retrieve type from internally resolve type arguments\n      if ('target' in type) {\n        const typeArguments = (type as any)\n          .resolvedTypeArguments as readonly ts.Type[];\n        dataType =\n          typeArguments && typeArguments.length > 1\n            ? typeArguments[0]\n            : undefined;\n      }\n      // Fallback to resolving the type from scratch\n      if (!dataType) {\n        const apiTypeSymbol = type.getProperty('__apiType');\n        if (apiTypeSymbol) {\n          let apiType = checker.getTypeOfSymbol(apiTypeSymbol);\n          let callSignature: ts.Signature | undefined =\n            type.getCallSignatures()[0];\n          if (apiType.isUnionOrIntersection()) {\n            for (const type of apiType.types) {\n              callSignature = type.getCallSignatures()[0];\n              if (callSignature) {\n                dataType = callSignature.getReturnType();\n                break;\n              }\n            }\n          }\n          dataType = callSignature && callSignature.getReturnType();\n        }\n      }\n\n      const references = info.languageService.getReferencesAtPosition(\n        source.fileName,\n        variableDeclaration.name.getStart()\n      );\n\n      if (!references) return;\n\n      const allAccess: string[] = [];\n      const inProgress: string[] = [];\n      const allPaths: string[] = [];\n      const fieldToLoc = new Map<string, { start: number; length: number }>();\n      // This visitor gets all the leaf-paths in the document\n      // as well as all fields that are part of the document\n      // We need the leaf-paths to check usage and we need the\n      // fields to validate whether an access on a given reference\n      // is valid given the current document...\n      visit(parse(node.getText().slice(1, -1)), {\n        Field: {\n          enter(node) {\n            const alias = node.alias ? node.alias.value : node.name.value;\n            const path = inProgress.length\n              ? `${inProgress.join('.')}.${alias}`\n              : alias;\n\n            if (!node.selectionSet && !reservedKeys.has(node.name.value)) {\n              allPaths.push(path);\n              fieldToLoc.set(path, {\n                start: node.name.loc!.start,\n                length: node.name.loc!.end - node.name.loc!.start,\n              });\n            } else if (node.selectionSet) {\n              inProgress.push(alias);\n              fieldToLoc.set(path, {\n                start: node.name.loc!.start,\n                length: node.name.loc!.end - node.name.loc!.start,\n              });\n            }\n          },\n          leave(node) {\n            if (node.selectionSet) {\n              inProgress.pop();\n            }\n          },\n        },\n      });\n\n      references.forEach(ref => {\n        if (ref.fileName !== source.fileName) return;\n\n        const targetNode = findNode(source, ref.textSpan.start);\n        if (!targetNode) return;\n        // Skip declaration as reference of itself\n        if (targetNode.parent === variableDeclaration) return;\n\n        const scopeSymbols = checker.getSymbolsInScope(\n          targetNode,\n          ts.SymbolFlags.BlockScopedVariable\n        );\n\n        let scopeDataSymbol: ts.Symbol | undefined;\n        for (let scopeSymbol of scopeSymbols) {\n          if (!scopeSymbol.valueDeclaration) continue;\n          let typeOfScopeSymbol = unwrapAbstractType(\n            checker.getTypeOfSymbol(scopeSymbol)\n          );\n          if (dataType === typeOfScopeSymbol) {\n            scopeDataSymbol = scopeSymbol;\n            break;\n          }\n\n          // NOTE: This is an aggressive fallback for hooks where the return value isn't destructured\n          // This is a last resort solution for patterns like react-query, where the fallback that\n          // would otherwise happen below isn't sufficient\n          if (typeOfScopeSymbol.flags & ts.TypeFlags.Object) {\n            const tuplePropertySymbol = typeOfScopeSymbol.getProperty('0');\n            if (tuplePropertySymbol) {\n              typeOfScopeSymbol = checker.getTypeOfSymbol(tuplePropertySymbol);\n              if (dataType === typeOfScopeSymbol) {\n                scopeDataSymbol = scopeSymbol;\n                break;\n              }\n            }\n\n            const dataPropertySymbol = typeOfScopeSymbol.getProperty('data');\n            if (dataPropertySymbol) {\n              typeOfScopeSymbol = unwrapAbstractType(\n                checker.getTypeOfSymbol(dataPropertySymbol)\n              );\n              if (dataType === typeOfScopeSymbol) {\n                scopeDataSymbol = scopeSymbol;\n                break;\n              }\n            }\n          }\n        }\n\n        const valueDeclaration = scopeDataSymbol?.valueDeclaration;\n        let name: ts.BindingName | undefined;\n        if (\n          valueDeclaration &&\n          'name' in valueDeclaration &&\n          !!valueDeclaration.name &&\n          (ts.isIdentifier(valueDeclaration.name as any) ||\n            ts.isBindingName(valueDeclaration.name as any))\n        ) {\n          name = valueDeclaration.name as ts.BindingName;\n        } else {\n          // Fall back to looking at the variable declaration directly,\n          // if we are on one.\n          const variableDeclaration = getVariableDeclaration(targetNode);\n          if (variableDeclaration) name = variableDeclaration.name;\n        }\n\n        if (name) {\n          const result = crawlScope(name, [], allPaths, source, info, false);\n          allAccess.push(...result);\n        }\n      });\n\n      if (!allAccess.length) {\n        return;\n      }\n\n      const unused = allPaths.filter(x => !allAccess.includes(x));\n      const aggregatedUnusedFields = new Set<string>();\n      const unusedChildren: { [key: string]: Set<string> } = {};\n      const unusedFragmentLeaf = new Set<string>();\n      unused.forEach(unusedField => {\n        const split = unusedField.split('.');\n        split.pop();\n        const parentField = split.join('.');\n        const loc = fieldToLoc.get(parentField);\n\n        if (loc) {\n          aggregatedUnusedFields.add(parentField);\n          if (unusedChildren[parentField]) {\n            unusedChildren[parentField].add(unusedField);\n          } else {\n            unusedChildren[parentField] = new Set([unusedField]);\n          }\n        } else {\n          unusedFragmentLeaf.add(unusedField);\n        }\n      });\n\n      aggregatedUnusedFields.forEach(field => {\n        const loc = fieldToLoc.get(field)!;\n        const unusedFields = unusedChildren[field]!;\n        diagnostics.push({\n          file: source,\n          length: loc.length,\n          start: node.getStart() + loc.start + 1,\n          category: ts.DiagnosticCategory.Warning,\n          code: UNUSED_FIELD_CODE,\n          messageText: `Field(s) ${[...unusedFields]\n            .map(x => `'${x}'`)\n            .join(', ')} are not used.`,\n        });\n      });\n\n      unusedFragmentLeaf.forEach(field => {\n        const loc = fieldToLoc.get(field)!;\n        diagnostics.push({\n          file: source,\n          length: loc.length,\n          start: node.getStart() + loc.start + 1,\n          category: ts.DiagnosticCategory.Warning,\n          code: UNUSED_FIELD_CODE,\n          messageText: `Field ${field} is not used.`,\n        });\n      });\n    });\n  } catch (e: any) {\n    console.error('[GraphQLSP]: ', e.message, e.stack);\n  }\n\n  return diagnostics;\n};\n","import { ts } from './ts';\nimport { FragmentDefinitionNode, Kind, parse } from 'graphql';\n\nimport { findAllCallExpressions, findAllImports, getSource } from './ast';\nimport { resolveTemplate } from './ast/resolve';\nimport {\n  VariableDeclaration,\n  VariableStatement,\n  isSourceFile,\n} from 'typescript';\n\nexport const MISSING_FRAGMENT_CODE = 52003;\n\nexport const getColocatedFragmentNames = (\n  source: ts.SourceFile,\n  info: ts.server.PluginCreateInfo\n): Record<\n  string,\n  { start: number; length: number; fragments: Array<string> }\n> => {\n  const imports = findAllImports(source);\n  const typeChecker = info.languageService.getProgram()?.getTypeChecker();\n\n  const importSpecifierToFragments: Record<\n    string,\n    { start: number; length: number; fragments: Array<string> }\n  > = {};\n\n  if (!typeChecker) return importSpecifierToFragments;\n\n  if (imports.length) {\n    imports.forEach(imp => {\n      if (!imp.importClause) return;\n\n      if (imp.importClause.name) {\n        const definitions = info.languageService.getDefinitionAtPosition(\n          source.fileName,\n          imp.importClause.name.getStart()\n        );\n        if (definitions && definitions.length) {\n          const [def] = definitions;\n          if (def.fileName.includes('node_modules')) return;\n\n          const externalSource = getSource(info, def.fileName);\n          if (!externalSource) return;\n\n          const fragmentsForImport = getFragmentsInSource(\n            externalSource,\n            typeChecker,\n            info\n          );\n\n          const names = fragmentsForImport.map(fragment => fragment.name.value);\n          if (\n            names.length &&\n            !importSpecifierToFragments[imp.moduleSpecifier.getText()]\n          ) {\n            importSpecifierToFragments[imp.moduleSpecifier.getText()] = {\n              start: imp.moduleSpecifier.getStart(),\n              length: imp.moduleSpecifier.getText().length,\n              fragments: names,\n            };\n          } else if (names.length) {\n            importSpecifierToFragments[\n              imp.moduleSpecifier.getText()\n            ].fragments =\n              importSpecifierToFragments[\n                imp.moduleSpecifier.getText()\n              ].fragments.concat(names);\n          }\n        }\n      }\n\n      if (\n        imp.importClause.namedBindings &&\n        ts.isNamespaceImport(imp.importClause.namedBindings)\n      ) {\n        const definitions = info.languageService.getDefinitionAtPosition(\n          source.fileName,\n          imp.importClause.namedBindings.getStart()\n        );\n        if (definitions && definitions.length) {\n          const [def] = definitions;\n          if (def.fileName.includes('node_modules')) return;\n\n          const externalSource = getSource(info, def.fileName);\n          if (!externalSource) return;\n\n          const fragmentsForImport = getFragmentsInSource(\n            externalSource,\n            typeChecker,\n            info\n          );\n          const names = fragmentsForImport.map(fragment => fragment.name.value);\n          if (\n            names.length &&\n            !importSpecifierToFragments[imp.moduleSpecifier.getText()]\n          ) {\n            importSpecifierToFragments[imp.moduleSpecifier.getText()] = {\n              start: imp.moduleSpecifier.getStart(),\n              length: imp.moduleSpecifier.getText().length,\n              fragments: names,\n            };\n          } else if (names.length) {\n            importSpecifierToFragments[\n              imp.moduleSpecifier.getText()\n            ].fragments =\n              importSpecifierToFragments[\n                imp.moduleSpecifier.getText()\n              ].fragments.concat(names);\n          }\n        }\n      } else if (\n        imp.importClause.namedBindings &&\n        ts.isNamedImportBindings(imp.importClause.namedBindings)\n      ) {\n        imp.importClause.namedBindings.elements.forEach(el => {\n          const definitions = info.languageService.getDefinitionAtPosition(\n            source.fileName,\n            el.getStart()\n          );\n          if (definitions && definitions.length) {\n            const [def] = definitions;\n            if (def.fileName.includes('node_modules')) return;\n\n            const externalSource = getSource(info, def.fileName);\n            if (!externalSource) return;\n\n            const fragmentsForImport = getFragmentsInSource(\n              externalSource,\n              typeChecker,\n              info\n            );\n            const names = fragmentsForImport.map(\n              fragment => fragment.name.value\n            );\n            if (\n              names.length &&\n              !importSpecifierToFragments[imp.moduleSpecifier.getText()]\n            ) {\n              importSpecifierToFragments[imp.moduleSpecifier.getText()] = {\n                start: imp.moduleSpecifier.getStart(),\n                length: imp.moduleSpecifier.getText().length,\n                fragments: names,\n              };\n            } else if (names.length) {\n              importSpecifierToFragments[\n                imp.moduleSpecifier.getText()\n              ].fragments =\n                importSpecifierToFragments[\n                  imp.moduleSpecifier.getText()\n                ].fragments.concat(names);\n            }\n          }\n        });\n      }\n    });\n  }\n\n  return importSpecifierToFragments;\n};\n\nfunction getFragmentsInSource(\n  src: ts.SourceFile,\n  typeChecker: ts.TypeChecker,\n  info: ts.server.PluginCreateInfo\n): Array<FragmentDefinitionNode> {\n  let fragments: Array<FragmentDefinitionNode> = [];\n  const callExpressions = findAllCallExpressions(src, info, false);\n\n  const symbol = typeChecker.getSymbolAtLocation(src);\n  if (!symbol) return [];\n\n  const exports = typeChecker.getExportsOfModule(symbol);\n  const exportedNames = exports.map(symb => symb.name);\n  const nodes = callExpressions.nodes.filter(x => {\n    let parent = x.parent;\n    while (\n      parent &&\n      !ts.isSourceFile(parent) &&\n      !ts.isVariableDeclaration(parent)\n    ) {\n      parent = parent.parent;\n    }\n\n    if (ts.isVariableDeclaration(parent)) {\n      return exportedNames.includes(parent.name.getText());\n    } else {\n      return false;\n    }\n  });\n\n  nodes.forEach(node => {\n    const text = resolveTemplate(node, src.fileName, info).combinedText;\n    try {\n      const parsed = parse(text, { noLocation: true });\n      if (parsed.definitions.every(x => x.kind === Kind.FRAGMENT_DEFINITION)) {\n        fragments = fragments.concat(parsed.definitions as any);\n      }\n    } catch (e) {\n      return;\n    }\n  });\n\n  return fragments;\n}\n","import { ts } from './ts';\n\nimport { createHash } from 'crypto';\n\nimport { findAllCallExpressions, findNode, getSource } from './ast';\nimport { resolveTemplate } from './ast/resolve';\nimport { templates } from './ast/templates';\nimport { parse, print, visit } from '@0no-co/graphql.web';\n\ntype PersistedAction = {\n  span: {\n    start: number;\n    length: number;\n  };\n  replacement: string;\n};\n\nconst isPersistedCall = (expr: ts.LeftHandSideExpression) => {\n  const expressionText = expr.getText();\n  const [template, method] = expressionText.split('.');\n  return templates.has(template) && method === 'persisted';\n};\n\nexport function getPersistedCodeFixAtPosition(\n  filename: string,\n  position: number,\n  info: ts.server.PluginCreateInfo\n): PersistedAction | undefined {\n  const isCallExpression = info.config.templateIsCallExpression ?? true;\n\n  if (!isCallExpression) return undefined;\n\n  let source = getSource(info, filename);\n  if (!source) return undefined;\n\n  const node = findNode(source, position);\n  if (!node) return undefined;\n\n  let callExpression: ts.Node = node;\n  // We found a node and need to check where on the path we are\n  // we expect this to look a little bit like\n  // const persistedDoc = graphql.persisted<typeof x>()\n  // When we are on the left half of this statement we bubble down\n  // looking for the correct call-expression and on the right hand\n  // we bubble up.\n  if (ts.isVariableStatement(callExpression)) {\n    callExpression =\n      callExpression.declarationList.declarations.find(declaration => {\n        return (\n          ts.isVariableDeclaration(declaration) &&\n          declaration.initializer &&\n          ts.isCallExpression(declaration.initializer)\n        );\n      }) || node;\n  } else if (ts.isVariableDeclarationList(callExpression)) {\n    callExpression =\n      callExpression.declarations.find(declaration => {\n        return (\n          ts.isVariableDeclaration(declaration) &&\n          declaration.initializer &&\n          ts.isCallExpression(declaration.initializer)\n        );\n      }) || node;\n  } else if (\n    ts.isVariableDeclaration(callExpression) &&\n    callExpression.initializer &&\n    ts.isCallExpression(callExpression.initializer)\n  ) {\n    callExpression = callExpression.initializer;\n  } else {\n    while (callExpression && !ts.isCallExpression(callExpression)) {\n      callExpression = callExpression.parent;\n    }\n  }\n\n  // We want to ensure that we found a call-expression and that it looks\n  // like \"graphql.persisted\", in a future iteration when the API surface\n  // is more defined we will need to use the ts.Symbol to support re-exporting\n  // this function by means of \"export const peristed = graphql.persisted\".\n  if (\n    !ts.isCallExpression(callExpression) ||\n    !isPersistedCall(callExpression.expression) ||\n    (!callExpression.typeArguments && !callExpression.arguments[1])\n  )\n    return undefined;\n\n  let foundNode,\n    foundFilename = filename;\n  if (callExpression.typeArguments) {\n    const [typeQuery] = callExpression.typeArguments;\n    if (!ts.isTypeQueryNode(typeQuery)) return undefined;\n    const { node: found, filename: fileName } =\n      getDocumentReferenceFromTypeQuery(typeQuery, filename, info);\n    foundNode = found;\n    foundFilename = fileName;\n  } else if (callExpression.arguments[1]) {\n    if (\n      !ts.isIdentifier(callExpression.arguments[1]) &&\n      !ts.isCallExpression(callExpression.arguments[1])\n    )\n      return undefined;\n    const { node: found, filename: fileName } =\n      getDocumentReferenceFromDocumentNode(\n        callExpression.arguments[1],\n        filename,\n        info\n      );\n    foundNode = found;\n    foundFilename = fileName;\n  }\n\n  if (!foundNode) return undefined;\n\n  const initializer = foundNode;\n  if (\n    !initializer ||\n    !ts.isCallExpression(initializer) ||\n    !ts.isNoSubstitutionTemplateLiteral(initializer.arguments[0])\n  )\n    return undefined;\n\n  const hash = generateHashForDocument(\n    info,\n    initializer.arguments[0],\n    foundFilename\n  );\n  const existingHash = callExpression.arguments[0];\n  // We assume for now that this is either undefined or an existing string literal\n  if (!existingHash) {\n    // We have no persisted-identifier yet, suggest adding in a new one\n    return {\n      span: {\n        start: callExpression.arguments.pos,\n        length: 1,\n      },\n      replacement: `\"sha256:${hash}\")`,\n    };\n  } else if (\n    ts.isStringLiteral(existingHash) &&\n    existingHash.getText() !== `\"sha256:${hash}\"`\n  ) {\n    // We are out of sync, suggest replacing this with the updated hash\n    return {\n      span: {\n        start: existingHash.getStart(),\n        length: existingHash.end - existingHash.getStart(),\n      },\n      replacement: `\"sha256:${hash}\"`,\n    };\n  } else if (ts.isIdentifier(existingHash)) {\n    // Suggest replacing a reference with a static one\n    // this to make these easier to statically analyze\n    return {\n      span: {\n        start: existingHash.getStart(),\n        length: existingHash.end - existingHash.getStart(),\n      },\n      replacement: `\"sha256:${hash}\"`,\n    };\n  } else {\n    return undefined;\n  }\n}\n\nexport const generateHashForDocument = (\n  info: ts.server.PluginCreateInfo,\n  templateLiteral:\n    | ts.NoSubstitutionTemplateLiteral\n    | ts.TaggedTemplateExpression,\n  foundFilename: string\n): string | undefined => {\n  const externalSource = getSource(info, foundFilename)!;\n  const { fragments } = findAllCallExpressions(externalSource, info);\n\n  const text = resolveTemplate(\n    templateLiteral,\n    foundFilename,\n    info\n  ).combinedText;\n  const parsed = parse(text);\n  const spreads = new Set();\n  visit(parsed, {\n    FragmentSpread: node => {\n      spreads.add(node.name.value);\n    },\n  });\n\n  let resolvedText = text;\n  [...spreads].forEach(spreadName => {\n    const fragmentDefinition = fragments.find(x => x.name.value === spreadName);\n    if (!fragmentDefinition) {\n      console.warn(\n        `[GraphQLSP] could not find fragment for spread ${spreadName}!`\n      );\n      return;\n    }\n\n    resolvedText = `${resolvedText}\\n\\n${print(fragmentDefinition)}`;\n  });\n\n  return createHash('sha256').update(text).digest('hex');\n};\n\nexport const getDocumentReferenceFromTypeQuery = (\n  typeQuery: ts.TypeQueryNode,\n  filename: string,\n  info: ts.server.PluginCreateInfo\n): { node: ts.CallExpression | null; filename: string } => {\n  // We look for the references of the generic so that we can use the document\n  // to generate the hash.\n  const references = info.languageService.getReferencesAtPosition(\n    filename,\n    typeQuery.exprName.getStart()\n  );\n\n  if (!references) return { node: null, filename };\n\n  let found: ts.CallExpression | null = null;\n  let foundFilename = filename;\n  references.forEach(ref => {\n    if (found) return;\n\n    const source = getSource(info, ref.fileName);\n    if (!source) return;\n    const foundNode = findNode(source, ref.textSpan.start);\n    if (!foundNode) return;\n\n    if (\n      ts.isVariableDeclaration(foundNode.parent) &&\n      foundNode.parent.initializer &&\n      ts.isCallExpression(foundNode.parent.initializer) &&\n      templates.has(foundNode.parent.initializer.expression.getText())\n    ) {\n      found = foundNode.parent.initializer;\n      foundFilename = ref.fileName;\n    }\n  });\n\n  return { node: found, filename: foundFilename };\n};\n\nexport const getDocumentReferenceFromDocumentNode = (\n  documentNodeArgument: ts.Identifier | ts.CallExpression,\n  filename: string,\n  info: ts.server.PluginCreateInfo\n): { node: ts.CallExpression | null; filename: string } => {\n  if (ts.isIdentifier(documentNodeArgument)) {\n    // We look for the references of the generic so that we can use the document\n    // to generate the hash.\n    const references = info.languageService.getReferencesAtPosition(\n      filename,\n      documentNodeArgument.getStart()\n    );\n\n    if (!references) return { node: null, filename };\n\n    let found: ts.CallExpression | null = null;\n    let foundFilename = filename;\n    references.forEach(ref => {\n      if (found) return;\n\n      const source = getSource(info, ref.fileName);\n      if (!source) return;\n      const foundNode = findNode(source, ref.textSpan.start);\n      if (!foundNode) return;\n\n      if (\n        ts.isVariableDeclaration(foundNode.parent) &&\n        foundNode.parent.initializer &&\n        ts.isCallExpression(foundNode.parent.initializer) &&\n        templates.has(foundNode.parent.initializer.expression.getText())\n      ) {\n        found = foundNode.parent.initializer;\n        foundFilename = ref.fileName;\n      }\n    });\n\n    return { node: found, filename: foundFilename };\n  } else {\n    return { node: documentNodeArgument, filename };\n  }\n};\n","import { ts } from './ts';\nimport { Diagnostic, getDiagnostics } from 'graphql-language-service';\nimport {\n  FragmentDefinitionNode,\n  GraphQLSchema,\n  Kind,\n  OperationDefinitionNode,\n  parse,\n  visit,\n} from 'graphql';\nimport { LRUCache } from 'lru-cache';\nimport fnv1a from '@sindresorhus/fnv1a';\nimport { print } from '@0no-co/graphql.web';\n\nimport {\n  findAllCallExpressions,\n  findAllPersistedCallExpressions,\n  findAllTaggedTemplateNodes,\n  getSource,\n} from './ast';\nimport { resolveTemplate } from './ast/resolve';\nimport { UNUSED_FIELD_CODE, checkFieldUsageInFile } from './fieldUsage';\nimport {\n  MISSING_FRAGMENT_CODE,\n  getColocatedFragmentNames,\n} from './checkImports';\nimport {\n  generateHashForDocument,\n  getDocumentReferenceFromDocumentNode,\n  getDocumentReferenceFromTypeQuery,\n} from './persisted';\n\nconst clientDirectives = new Set([\n  'populate',\n  'client',\n  '_unmask',\n  '_optional',\n  '_relayPagination',\n  '_simplePagination',\n  '_required',\n  'optional',\n  'required',\n  'arguments',\n  'argumentDefinitions',\n  'connection',\n  'refetchable',\n  'relay',\n  'required',\n  'inline',\n]);\n\nexport const SEMANTIC_DIAGNOSTIC_CODE = 52001;\nexport const MISSING_OPERATION_NAME_CODE = 52002;\nexport const USING_DEPRECATED_FIELD_CODE = 52004;\nexport const MISSING_PERSISTED_TYPE_ARG = 520100;\nexport const MISSING_PERSISTED_CODE_ARG = 520101;\nexport const MISSING_PERSISTED_DOCUMENT = 520102;\nexport const MISSMATCH_HASH_TO_DOCUMENT = 520103;\nexport const ALL_DIAGNOSTICS = [\n  SEMANTIC_DIAGNOSTIC_CODE,\n  MISSING_OPERATION_NAME_CODE,\n  USING_DEPRECATED_FIELD_CODE,\n  MISSING_FRAGMENT_CODE,\n  UNUSED_FIELD_CODE,\n  MISSING_PERSISTED_TYPE_ARG,\n  MISSING_PERSISTED_CODE_ARG,\n  MISSING_PERSISTED_DOCUMENT,\n  MISSMATCH_HASH_TO_DOCUMENT,\n];\n\nconst cache = new LRUCache<number, ts.Diagnostic[]>({\n  // how long to live in ms\n  ttl: 1000 * 60 * 15,\n  max: 5000,\n});\n\nexport function getGraphQLDiagnostics(\n  filename: string,\n  schema: { current: GraphQLSchema | null; version: number },\n  info: ts.server.PluginCreateInfo\n): ts.Diagnostic[] | undefined {\n  const isCallExpression = info.config.templateIsCallExpression ?? true;\n\n  let source = getSource(info, filename);\n  if (!source) return undefined;\n\n  let fragments: Array<FragmentDefinitionNode> = [],\n    nodes: (ts.TaggedTemplateExpression | ts.NoSubstitutionTemplateLiteral)[];\n  if (isCallExpression) {\n    const result = findAllCallExpressions(source, info);\n    fragments = result.fragments;\n    nodes = result.nodes;\n  } else {\n    nodes = findAllTaggedTemplateNodes(source);\n  }\n\n  const texts = nodes.map(node => {\n    if (\n      (ts.isNoSubstitutionTemplateLiteral(node) ||\n        ts.isTemplateExpression(node)) &&\n      !isCallExpression\n    ) {\n      if (ts.isTaggedTemplateExpression(node.parent)) {\n        node = node.parent;\n      } else {\n        return undefined;\n      }\n    }\n\n    return resolveTemplate(node, filename, info).combinedText;\n  });\n\n  const cacheKey = fnv1a(\n    isCallExpression\n      ? source.getText() +\n          fragments.map(x => print(x)).join('-') +\n          schema.version\n      : texts.join('-') + schema.version\n  );\n\n  let tsDiagnostics;\n  if (cache.has(cacheKey)) {\n    tsDiagnostics = cache.get(cacheKey)!;\n  } else {\n    tsDiagnostics = runDiagnostics(source, { nodes, fragments }, schema, info);\n    cache.set(cacheKey, tsDiagnostics);\n  }\n\n  const shouldCheckForColocatedFragments =\n    info.config.shouldCheckForColocatedFragments ?? true;\n  let fragmentDiagnostics: ts.Diagnostic[] = [];\n\n  if (isCallExpression) {\n    const persistedCalls = findAllPersistedCallExpressions(source);\n    // We need to check whether the user has correctly inserted a hash,\n    // by means of providing an argument to the function and that they\n    // are establishing a reference to the document by means of the generic.\n    //\n    // OPTIONAL: we could also check whether the hash is out of date with the\n    // document but this removes support for self-generating identifiers\n    const persistedDiagnostics = persistedCalls\n      .map<ts.Diagnostic | null>(callExpression => {\n        if (!callExpression.typeArguments && !callExpression.arguments[1]) {\n          return {\n            category: ts.DiagnosticCategory.Warning,\n            code: MISSING_PERSISTED_TYPE_ARG,\n            file: source,\n            messageText: 'Missing generic pointing at the GraphQL document.',\n            start: callExpression.getStart(),\n            length: callExpression.getEnd() - callExpression.getStart(),\n          };\n        }\n\n        let foundNode,\n          foundFilename = filename,\n          ref,\n          start,\n          length;\n        if (callExpression.typeArguments) {\n          const [typeQuery] = callExpression.typeArguments;\n          start = typeQuery.getStart();\n          length = typeQuery.getEnd() - typeQuery.getStart();\n\n          if (!ts.isTypeQueryNode(typeQuery)) {\n            return {\n              category: ts.DiagnosticCategory.Warning,\n              code: MISSING_PERSISTED_TYPE_ARG,\n              file: source,\n              messageText:\n                'Provided generic should be a typeQueryNode in the shape of graphql.persisted<typeof document>.',\n              start,\n              length,\n            };\n          }\n          const { node: found, filename: fileName } =\n            getDocumentReferenceFromTypeQuery(typeQuery, filename, info);\n          foundNode = found;\n          foundFilename = fileName;\n          ref = typeQuery.getText();\n        } else if (callExpression.arguments[1]) {\n          start = callExpression.arguments[1].getStart();\n          length =\n            callExpression.arguments[1].getEnd() -\n            callExpression.arguments[1].getStart();\n          if (\n            !ts.isIdentifier(callExpression.arguments[1]) &&\n            !ts.isCallExpression(callExpression.arguments[1])\n          ) {\n            return {\n              category: ts.DiagnosticCategory.Warning,\n              code: MISSING_PERSISTED_TYPE_ARG,\n              file: source,\n              messageText:\n                'Provided argument should be an identifier or invocation of \"graphql\" in the shape of graphql.persisted(hash, document).',\n              start,\n              length,\n            };\n          }\n\n          const { node: found, filename: fileName } =\n            getDocumentReferenceFromDocumentNode(\n              callExpression.arguments[1],\n              filename,\n              info\n            );\n          foundNode = found;\n          foundFilename = fileName;\n          ref = callExpression.arguments[1].getText();\n        }\n\n        if (!foundNode) {\n          return {\n            category: ts.DiagnosticCategory.Warning,\n            code: MISSING_PERSISTED_DOCUMENT,\n            file: source,\n            messageText: `Can't find reference to \"${ref}\".`,\n            start,\n            length,\n          };\n        }\n\n        const initializer = foundNode;\n        if (\n          !initializer ||\n          !ts.isCallExpression(initializer) ||\n          !ts.isNoSubstitutionTemplateLiteral(initializer.arguments[0])\n        ) {\n          // TODO: we can make this check more stringent where we also parse and resolve\n          // the accompanying template.\n          return {\n            category: ts.DiagnosticCategory.Warning,\n            code: MISSING_PERSISTED_DOCUMENT,\n            file: source,\n            messageText: `Referenced type \"${ref}\" is not a GraphQL document.`,\n            start,\n            length,\n          };\n        }\n\n        if (!callExpression.arguments[0]) {\n          // TODO: this might be covered by the API enforcing the first\n          // argument so can possibly be removed.\n          return {\n            category: ts.DiagnosticCategory.Warning,\n            code: MISSING_PERSISTED_CODE_ARG,\n            file: source,\n            messageText: `The call-expression is missing a hash for the persisted argument.`,\n            start: callExpression.arguments.pos,\n            length: callExpression.arguments.end - callExpression.arguments.pos,\n          };\n        }\n\n        const hash = callExpression.arguments[0].getText().slice(1, -1);\n        if (hash.startsWith('sha256:')) {\n          const hash = generateHashForDocument(\n            info,\n            initializer.arguments[0],\n            foundFilename\n          );\n          if (!hash) return null;\n          const upToDateHash = `sha256:${hash}`;\n          if (upToDateHash !== hash) {\n            return {\n              category: ts.DiagnosticCategory.Warning,\n              code: MISSMATCH_HASH_TO_DOCUMENT,\n              file: source,\n              messageText: `The persisted document's hash is outdated`,\n              start: callExpression.arguments.pos,\n              length:\n                callExpression.arguments.end - callExpression.arguments.pos,\n            };\n          }\n        }\n\n        return null;\n      })\n      .filter(Boolean);\n\n    tsDiagnostics.push(...(persistedDiagnostics as ts.Diagnostic[]));\n  }\n\n  if (isCallExpression && shouldCheckForColocatedFragments) {\n    const moduleSpecifierToFragments = getColocatedFragmentNames(source, info);\n\n    const usedFragments = new Set();\n    nodes.forEach(node => {\n      try {\n        const parsed = parse(node.getText().slice(1, -1), {\n          noLocation: true,\n        });\n        visit(parsed, {\n          FragmentSpread: node => {\n            usedFragments.add(node.name.value);\n          },\n        });\n      } catch (e) {}\n    });\n\n    Object.keys(moduleSpecifierToFragments).forEach(moduleSpecifier => {\n      const {\n        fragments: fragmentNames,\n        start,\n        length,\n      } = moduleSpecifierToFragments[moduleSpecifier];\n      const missingFragments = Array.from(\n        new Set(fragmentNames.filter(x => !usedFragments.has(x)))\n      );\n      if (missingFragments.length) {\n        fragmentDiagnostics.push({\n          file: source,\n          length,\n          start,\n          category: ts.DiagnosticCategory.Warning,\n          code: MISSING_FRAGMENT_CODE,\n          messageText: `Unused co-located fragment definition(s) \"${missingFragments.join(\n            ', '\n          )}\" in ${moduleSpecifier}`,\n        });\n      }\n    });\n\n    return [...tsDiagnostics, ...fragmentDiagnostics];\n  } else {\n    return tsDiagnostics;\n  }\n}\n\nconst runDiagnostics = (\n  source: ts.SourceFile,\n  {\n    nodes,\n    fragments,\n  }: {\n    nodes: (ts.TaggedTemplateExpression | ts.NoSubstitutionTemplateLiteral)[];\n    fragments: FragmentDefinitionNode[];\n  },\n  schema: { current: GraphQLSchema | null; version: number },\n  info: ts.server.PluginCreateInfo\n) => {\n  const filename = source.fileName;\n  const isCallExpression = info.config.templateIsCallExpression ?? true;\n\n  const diagnostics = nodes\n    .map(originalNode => {\n      let node = originalNode;\n      if (\n        !isCallExpression &&\n        (ts.isNoSubstitutionTemplateLiteral(node) ||\n          ts.isTemplateExpression(node))\n      ) {\n        if (ts.isTaggedTemplateExpression(node.parent)) {\n          node = node.parent;\n        } else {\n          return undefined;\n        }\n      }\n\n      const { combinedText: text, resolvedSpans } = resolveTemplate(\n        node,\n        filename,\n        info\n      );\n      const lines = text.split('\\n');\n\n      let isExpression = false;\n      if (ts.isAsExpression(node.parent)) {\n        if (ts.isExpressionStatement(node.parent.parent)) {\n          isExpression = true;\n        }\n      } else if (ts.isExpressionStatement(node.parent)) {\n        isExpression = true;\n      }\n      // When we are dealing with a plain gql statement we have to add two these can be recognised\n      // by the fact that the parent is an expressionStatement\n\n      let startingPosition =\n        node.getStart() +\n        (isCallExpression\n          ? 0\n          : (node as ts.TaggedTemplateExpression).tag.getText().length +\n            (isExpression ? 2 : 0));\n      const endPosition = startingPosition + node.getText().length;\n      let docFragments = [...fragments];\n      if (isCallExpression) {\n        try {\n          const documentFragments = parse(text, {\n            noLocation: true,\n          }).definitions.filter(x => x.kind === Kind.FRAGMENT_DEFINITION);\n          docFragments = docFragments.filter(\n            x =>\n              !documentFragments.some(\n                y =>\n                  y.kind === Kind.FRAGMENT_DEFINITION &&\n                  y.name.value === x.name.value\n              )\n          );\n        } catch (e) {}\n      }\n\n      const graphQLDiagnostics = getDiagnostics(\n        text,\n        schema.current,\n        undefined,\n        undefined,\n        docFragments\n      )\n        .filter(diag => {\n          if (!diag.message.includes('Unknown directive')) return true;\n\n          const [message] = diag.message.split('(');\n          const matches = /Unknown directive \"@([^)]+)\"/g.exec(message);\n          if (!matches) return true;\n          const directiveNmae = matches[1];\n          return !clientDirectives.has(directiveNmae);\n        })\n        .map(x => {\n          const { start, end } = x.range;\n\n          // We add the start.line to account for newline characters which are\n          // split out\n          let startChar = startingPosition + start.line;\n          for (let i = 0; i <= start.line; i++) {\n            if (i === start.line) startChar += start.character;\n            else if (lines[i]) startChar += lines[i].length;\n          }\n\n          let endChar = startingPosition + end.line;\n          for (let i = 0; i <= end.line; i++) {\n            if (i === end.line) endChar += end.character;\n            else if (lines[i]) endChar += lines[i].length;\n          }\n\n          const locatedInFragment = resolvedSpans.find(x => {\n            const newEnd = x.new.start + x.new.length;\n            return startChar >= x.new.start && endChar <= newEnd;\n          });\n\n          if (!!locatedInFragment) {\n            return {\n              ...x,\n              start: locatedInFragment.original.start,\n              length: locatedInFragment.original.length,\n            };\n          } else {\n            if (startChar > endPosition) {\n              // we have to calculate the added length and fix this\n              const addedCharacters = resolvedSpans\n                .filter(x => x.new.start + x.new.length < startChar)\n                .reduce(\n                  (acc, span) => acc + (span.new.length - span.original.length),\n                  0\n                );\n              startChar = startChar - addedCharacters;\n              endChar = endChar - addedCharacters;\n              return {\n                ...x,\n                start: startChar + 1,\n                length: endChar - startChar,\n              };\n            } else {\n              return {\n                ...x,\n                start: startChar + 1,\n                length: endChar - startChar,\n              };\n            }\n          }\n        })\n        .filter(x => x.start + x.length <= endPosition);\n\n      try {\n        const parsed = parse(text, { noLocation: true });\n\n        if (\n          parsed.definitions.some(x => x.kind === Kind.OPERATION_DEFINITION)\n        ) {\n          const op = parsed.definitions.find(\n            x => x.kind === Kind.OPERATION_DEFINITION\n          ) as OperationDefinitionNode;\n          if (!op.name) {\n            graphQLDiagnostics.push({\n              message: 'Operation should contain a name.',\n              start: node.getStart(),\n              code: MISSING_OPERATION_NAME_CODE,\n              length: originalNode.getText().length,\n              range: {} as any,\n              severity: 2,\n            } as any);\n          }\n        }\n      } catch (e) {}\n\n      return graphQLDiagnostics;\n    })\n    .flat()\n    .filter(Boolean) as Array<Diagnostic & { length: number; start: number }>;\n\n  const tsDiagnostics = diagnostics.map(diag => ({\n    file: source,\n    length: diag.length,\n    start: diag.start,\n    category:\n      diag.severity === 2\n        ? ts.DiagnosticCategory.Warning\n        : ts.DiagnosticCategory.Error,\n    code:\n      typeof diag.code === 'number'\n        ? diag.code\n        : diag.severity === 2\n        ? USING_DEPRECATED_FIELD_CODE\n        : SEMANTIC_DIAGNOSTIC_CODE,\n    messageText: diag.message.split('\\n')[0],\n  }));\n\n  if (isCallExpression) {\n    const usageDiagnostics =\n      checkFieldUsageInFile(\n        source,\n        nodes as ts.NoSubstitutionTemplateLiteral[],\n        info\n      ) || [];\n\n    if (!usageDiagnostics) return tsDiagnostics;\n\n    return [...tsDiagnostics, ...usageDiagnostics];\n  } else {\n    return tsDiagnostics;\n  }\n};\n"],"names":["ts","CharacterStream","constructor","sourceText","this","_start","_pos","getStartOfToken","getCurrentPosition","eol","_sourceText","length","sol","peek","charAt","next","char","eat","pattern","_testNextCharacter","eatWhile","match","isMatched","didEat","eatSpace","skipToEnd","skipTo","position","consume","caseFold","token","RegExp","test","slice","Array","startsWith","backUp","num","column","indentation","indent","whiteSpaces","pos","charCodeAt","current","character","opt","ofRule","list","separator","isList","t","kind","style","p","value","isIgnored","ch","LexRules","Name","Punctuation","Number","String","Comment","ParseRules","Document","Definition","Kind","FRAGMENT_DEFINITION","ShortQuery","Query","word","name","Mutation","Subscription","VariableDefinitions","VariableDefinition","Variable","DefaultValue","SelectionSet","Selection","stream","AliasedField","Field","Arguments","Argument","FragmentSpread","InlineFragment","FragmentDefinition","butNot","rule","exclusions","ruleMatch","check","every","exclusion","TypeCondition","Value","NumberValue","StringValue","update","state","inBlockstring","endsWith","BooleanValue","NullValue","EnumValue","ListValue","ObjectValue","ObjectField","Type","ListType","NonNullType","NamedType","type","_a","prevState","Directive","DirectiveDef","InterfaceDef","Implements","DirectiveLocation","SchemaDef","OperationTypeDef","ScalarDef","ObjectTypeDef","FieldDef","ArgumentsDef","InputValueDef","UnionDef","UnionMember","EnumDef","EnumValueDef","InputDef","ExtendDef","ExtensionDefinition","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","onlineParser","options","eatWhitespace","lexRules","parseRules","editorConfig","startState","initialState","level","step","needsSeparator","pushRule","DOCUMENT","getToken","popRule","needsAdvance","advanceRule","tabSize","indentLevel","Math","floor","lex","kinds","Object","keys","i","SpecialParseRules","backupState","assign","undefined","levels","concat","at","expected","call","unsuccessful","to","from","Invalid","rules","ruleKind","TypeError","successful","isArray","Range","start","end","containsPosition","line","setStart","Position","setEnd","lessThanOrEqualTo","setLine","setCharacter","specifiedSDLRules","LoneSchemaDefinitionRule","UniqueOperationTypesRule","UniqueTypeNamesRule","UniqueEnumValueNamesRule","UniqueFieldDefinitionNamesRule","UniqueDirectiveNamesRule","KnownTypeNamesRule","KnownDirectivesRule","UniqueDirectivesPerLocationRule","PossibleTypeExtensionsRule","UniqueArgumentNamesRule","UniqueInputFieldNamesRule","DIAGNOSTIC_SEVERITY","invariant","condition","message","Error","getDiagnostics","query","schema","customRules","isRelayCompatMode","externalFragments","ast","fragments","reduce","acc","node","print","enhancedQuery","parse","error","GraphQLError","range","getRange","location","queryText","parser","lines","split","_b","locations","severity","source","validateQuery","validationErrorAnnotations","validateWithCustomRules","isSchemaDocument","specifiedRules","filter","NoUnusedFragmentsRule","ExecutableDefinitionsRule","KnownFragmentNamesRule","prototype","push","apply","validate","includes","nodes","DIRECTIVE","flatMap","annotations","deprecationWarningAnnotations","NoDeprecatedCustomRule","Warning","highlightedNodes","entries","highlightNode","variable","loc","highlightLoc","getLocation","templates","Set","getSource","info","filename","program","languageService","getProgram","getSourceFile","findNode","sourceFile","find","getStart","getEnd","forEachChild","unrollFragment","element","definitions","getDefinitionAtPosition","fileName","fragment","externalSource","found","textSpan","isVariableDeclaration","parent","initializer","isCallExpression","isPropertyAssignment","has","expression","getText","arg","arg2","arguments","isArrayLiteralExpression","elements","forEach","isIdentifier","noLocation","definition","e","findAllCallExpressions","shouldSearchFragments","result","hasTriedToFindFragments","getAllFragments","isPropertyAccessExpression","el","isNoSubstitutionTemplateLiteral","findAllPersistedCallExpressions","parts","template","method","def","src","isVariableStatement","declarationList","declarations","declaration","isObjectLiteralExpression","properties","property","isStringLiteral","possibleFragment","JSON","replace","resolveTemplate","combinedText","resolvedSpans","templateText","templateSpans","addedCharacters","map","span","identifierName","escapedText","originalStart","originalRange","isTaggedTemplateExpression","text","alteredSpan","identifier","original","new","isAsExpression","resolvedTemplate","Boolean","perf","performance","now","Date","warned","PROCESS","process","emitWarning","msg","code","fn","console","AC","globalThis","AbortController","AS","AbortSignal","_onabort","aborted","addEventListener","_","warnACPolyfill","signal","abort","reason","onabort","printACPolyfillWarning","env","LRU_CACHE_IGNORE_AC_WARNING","isPosInt","n","isFinite","getUintArray","max","pow","Uint8Array","Uint16Array","Uint32Array","MAX_SAFE_INTEGER","ZeroArray","size","super","fill","Stack","static","create","HeapCls","constructing","s","heap","pop","LRUCache","maxSize","dispose","disposeAfter","fetchMethod","calculatedSize","keyMap","keyList","valList","prev","head","tail","free","disposed","sizes","starts","ttls","hasDispose","hasFetchMethod","hasDisposeAfter","unsafeExposeInternals","c","isBackgroundFetch","backgroundFetch","k","index","context","moveToTail","indexes","rindexes","isStale","ttl","ttlResolution","ttlAutopurge","updateAgeOnGet","updateAgeOnHas","allowStale","noDisposeOnSet","noUpdateTTL","maxEntrySize","sizeCalculation","noDeleteOnFetchRejection","noDeleteOnStaleGet","allowStaleOnFetchRejection","allowStaleOnFetchAbort","ignoreFetchAbort","UintArray","Map","initializeSizeTracking","initializeTTLTracking","shouldWarn","add","getRemainingTTL","key","Infinity","setItemTTL","setTimeout","delete","unref","updateItemAge","statusTTL","status","cachedNow","getNow","remainingTTL","get","#updateItemAge","#statusTTL","#setItemTTL","#isStale","removeItemSize","requireSize","v","addItemSize","evict","entrySize","totalCalculatedSize","_i","#addItemSize","_s","_st","#requireSize","_k","_v","isValidIndex","rentries","rkeys","values","rvalues","Symbol","iterator","getOptions","__staleWhileFetching","thisp","rforEach","purgeStale","deleted","dump","arr","entry","age","unshift","load","clear","set","setOptions","maxEntrySizeExceeded","oldVal","__abortController","oldValue","dt","task","shift","val","hasOptions","peekOptions","ac","fetchOpts","cb","updateCache","ignoreAbort","fetchAborted","fetchError","fetchAbortIgnored","fetchResolved","fetchFail","fetchUpdated","er","allowStaleAborted","bf","returnedStale","__returned","fetchDispatched","Promise","pcall","res","rej","fmp","then","fetchRejected","b","hasOwnProperty","fetch","fetchOptions","forceRefresh","stale","staleVal","fetching","connect","FNV_PRIMES","FNV_OFFSETS","fnv1aModule","exports","fnv1a","string","hash","isUnicoded","characterCode","unescape","encodeURIComponent","bigInt","fnvPrime","BigInt","asUintN","UNUSED_FIELD_CODE","unwrapAbstractType","isUnionOrIntersection","types","flags","TypeFlags","getVariableDeclaration","seen","isBlock","traverseArrayDestructuring","originalWip","allFields","isOmittedExpression","wip","crawlScope","isObjectBindingPattern","traverseDestructuring","results","_loop","binding","propertyName","joined","join","x","traverseResult","crawlResult","arrayMethods","inArrayMethod","isArrayBindingPattern","references","getReferencesAtPosition","ref","foundRef","pathParts","_ret","_loop2","isReturnStatement","isArrowFunction","isReduce","isSomeOrEvery","callExpression","func","checker","getTypeChecker","getSymbolAtLocation","valueDeclaration","isFunctionDeclaration","isFunctionExpression","parameters","varRes","isElementAccessExpression","argumentExpression","isNonNullExpression","isBinaryExpression","getColocatedFragmentNames","imports","findAllImports","statements","isImportDeclaration","typeChecker","importSpecifierToFragments","imp","importClause","names","getFragmentsInSource","moduleSpecifier","namedBindings","isNamespaceImport","isNamedImportBindings","callExpressions","symbol","exportedNames","getExportsOfModule","symb","isSourceFile","parsed","generateHashForDocument","templateLiteral","foundFilename","spreads","visit","resolvedText","spreadName","fragmentDefinition","warn","createHash","digest","getDocumentReferenceFromTypeQuery","typeQuery","exprName","foundNode","getDocumentReferenceFromDocumentNode","documentNodeArgument","clientDirectives","MISSING_PERSISTED_TYPE_ARG","MISSING_PERSISTED_CODE_ARG","MISSING_PERSISTED_DOCUMENT","MISSMATCH_HASH_TO_DOCUMENT","ALL_DIAGNOSTICS","cache","runDiagnostics","config","templateIsCallExpression","diagnostics","originalNode","isTemplateExpression","isExpression","isExpressionStatement","startingPosition","tag","endPosition","docFragments","documentFragments","some","y","graphQLDiagnostics","diag","matches","exec","startChar","endChar","locatedInFragment","OPERATION_DEFINITION","flat","tsDiagnostics","file","category","DiagnosticCategory","messageText","usageDiagnostics","checkFieldUsageInFile","trackFieldUsage","reservedKeys","nodeText","variableDeclaration","dataType","getTypeAtLocation","typeArguments","resolvedTypeArguments","apiTypeSymbol","getProperty","apiType","getTypeOfSymbol","callSignature","getCallSignatures","getReturnType","allAccess","inProgress","allPaths","fieldToLoc","enter","alias","path","selectionSet","leave","targetNode","scopeSymbols","getSymbolsInScope","SymbolFlags","BlockScopedVariable","scopeDataSymbol","scopeSymbol","typeOfScopeSymbol","tuplePropertySymbol","dataPropertySymbol","isBindingName","unused","aggregatedUnusedFields","unusedChildren","unusedFragmentLeaf","unusedField","parentField","field","unusedFields","stack","bubbleUpCallExpression","isToken","isTemplateSpan","bubbleUpTemplate","getGraphQLDiagnostics","findAllTaggedTemplateNodes","texts","cacheKey","version","shouldCheckForColocatedFragments","fragmentDiagnostics","persistedDiagnostics","isTypeQueryNode","moduleSpecifierToFragments","usedFragments","fragmentNames","missingFragments","getPersistedCodeFixAtPosition","isVariableDeclarationList","expr","expressionText","isPersistedCall","existingHash","replacement","init","modules","typescript","unrollTadaFragments","fragmentsArray"],"mappings":";;;;AAAWA,QAAEA,UAAA;;ACqBC,MAAOC;EAKnBC,WAAAA,CAAYC;IAJJC,KAAAC,SAAS;IACTD,KAAAE,OAAO;IAORF,KAAAG,kBAAkB,MAAcH,KAAKC;IAErCD,KAAAI,qBAAqB,MAAcJ,KAAKE;IAgBxCF,KAAAK,MAAM,MAAeL,KAAKM,YAAYC,WAAWP,KAAKE;IAEtDF,KAAAQ,MAAM,MAA6B,MAAdR,KAAKE;IAE1BF,KAAAS,OAAO,MACLT,KAAKM,YAAYI,OAAOV,KAAKE,SAAS;IAGxCF,KAAAW,OAAO;MACZ,IAAMC,IAAOZ,KAAKM,YAAYI,OAAOV,KAAKE;MAC1CF,KAAKE;MACL,OAAOU;AAAI;IAGNZ,KAAAa,MAAOC;MAEZ,IADkBd,KAAKe,mBAAmBD,IAC3B;QACbd,KAAKC,SAASD,KAAKE;QACnBF,KAAKE;QACL,OAAOF,KAAKM,YAAYI,OAAOV,KAAKE,OAAO;;MAE7C;AAAgB;IAGXF,KAAAgB,WAAYC;MACjB,IAAIC,IAAYlB,KAAKe,mBAAmBE;MACxC,IAAIE,KAAS;MAGb,IAAID,GAAW;QACbC,IAASD;QACTlB,KAAKC,SAASD,KAAKE;;MAGrB,OAAOgB,GAAW;QAChBlB,KAAKE;QACLgB,IAAYlB,KAAKe,mBAAmBE;QACpCE,KAAS;;MAGX,OAAOA;AAAM;IAGRnB,KAAAoB,WAAW,MAAepB,KAAKgB,SAAS;IAExChB,KAAAqB,YAAY;MACjBrB,KAAKE,OAAOF,KAAKM,YAAYC;AAAM;IAG9BP,KAAAsB,SAAUC;MACfvB,KAAKE,OAAOqB;AAAQ;IAGfvB,KAAAiB,QAAQ,CACbH,GACAU,KAAsC,GACtCC,KAAuC;MAEvC,IAAIC,IAAQ;MACZ,IAAIT,IAAQ;MAEZ,IAAuB,mBAAZH,GAAsB;QAE/BG,IADc,IAAIU,OAAOb,GAASW,IAAW,MAAM,KACrCG,KACZ5B,KAAKM,YAAYuB,MAAM7B,KAAKE,MAAMF,KAAKE,OAAOY,EAAQP;QAExDmB,IAAQZ;AACT,aAAM,IAAIA,aAAmBa;QAE5BD,IAAQT,SADRA,IAAQjB,KAAKM,YAAYuB,MAAM7B,KAAKE,MAAMe,MAAMH,eACxCG,EAAQ;;MAGlB,IACW,QAATA,MACoB,mBAAZH,KACLG,aAAiBa,SAIhB9B,KAAKM,YAAYyB,WAAWd,EAAM,IAAIjB,KAAKE,QAC/C;QACA,IAAIsB,GAAS;UACXxB,KAAKC,SAASD,KAAKE;UAEnB,IAAIwB,KAASA,EAAMnB;YACjBP,KAAKE,QAAQwB,EAAMnB;;;QAGvB,OAAOU;;MAIT,QAAO;AAAK;IAGPjB,KAAAgC,SAAUC;MACfjC,KAAKE,QAAQ+B;AAAG;IAGXjC,KAAAkC,SAAS,MAAclC,KAAKE;IAE5BF,KAAAmC,cAAc;MACnB,IAAMlB,IAAQjB,KAAKM,YAAYW,MAAM;MACrC,IAAImB,IAAS;MACb,IAAInB,KAA0B,MAAjBA,EAAMV,QAAc;QAC/B,IAAM8B,IAAcpB,EAAM;QAC1B,IAAIqB,IAAM;QACV,OAAOD,EAAY9B,SAAS+B,GAAK;UAC/B,IAAoC,MAAhCD,EAAYE,WAAWD;YACzBF,KAAU;;YAEVA;;UAEFE;;;MAIJ,OAAOF;AAAM;IAGRpC,KAAAwC,UAAU,MAAcxC,KAAKM,YAAYuB,MAAM7B,KAAKC,QAAQD,KAAKE;IA7ItEF,KAAKM,cAAcP;AACrB;EAMQgB,kBAAAA,CAAmBD;IACzB,IAAM2B,IAAYzC,KAAKM,YAAYI,OAAOV,KAAKE;IAC/C,IAAIgB,KAAY;IAChB,IAAuB,mBAAZJ;MACTI,IAAYuB,MAAc3B;;MAE1BI,IACEJ,aAAmBa,SACfb,EAAQc,KAAKa,KACb3B,EAAQ2B;;IAEhB,OAAOvB;AACT;;;AChCI,SAAUwB,IAAIC;EAClB,OAAO;IAAEA;;AACX;;AAGM,SAAUC,KAAKD,GAAuBE;EAC1C,OAAO;IAAEF;IAAQG,SAAQ;IAAMD;;AACjC;;AAoBM,SAAUE,IAAEC,GAAcC;EAC9B,OAAO;IAAEA;IAAOhC,OAAQS,KAAiBA,EAAMsB,SAASA;;AAC1D;;AAGM,SAAUE,IAAEC,GAAeF;EAC/B,OAAO;IACLA,OAAOA,KAAS;IAChBhC,OAAQS,KACS,kBAAfA,EAAMsB,QAA0BtB,EAAMyB,UAAUA;;AAEtD;;ACnCO,IAAMC,YAAaC,KACjB,QAAPA,KACO,SAAPA,KACO,QAAPA,KACO,SAAPA,KACO,SAAPA,KACO,aAAPA,KACO,QAAPA;;AAKK,IAAMC,IAAW;EAEtBC,MAAM;EAGNC,aAAa;EAGbC,QAAQ;EAGRC,QACE;EAGFC,SAAS;;;AAQJ,IAAMC,IAA4C;EACvDC,UAAU,EAACjB,KAAK;EAChBkB,UAAAA,CAAWpC;IACT,QAAQA,EAAMyB;KACZ,KAAK;MACH,OAAO;;KACT,KAAK;MACH,OAAO;;KACT,KAAK;MACH,OAAO;;KACT,KAAK;MACH,OAAO;;KACT,KAAK;MACH,OAAOY,EAAAA,KAAKC;;KACd,KAAK;MACH,OAAO;;KACT,KAAK;MACH,OAAO;;KACT,KAAK;MACH,OAAO;;KACT,KAAK;MACH,OAAO;;KACT,KAAK;MACH,OAAO;;KACT,KAAK;MACH,OAAO;;KACT,KAAK;MACH,OAAO;;KACT,KAAK;MACH,OAAO;;KACT,KAAK;MACH,OAAO;;AAEZ;EAEDC,YAAY,EAAC;EACbC,OAAO,EACLC,KAAK,UACLzB,IAAI0B,OAAK,SACT1B,IAAI,wBACJE,KAAK,cACL;EAGFyB,UAAU,EACRF,KAAK,aACLzB,IAAI0B,OAAK,SACT1B,IAAI,wBACJE,KAAK,cACL;EAGF0B,cAAc,EACZH,KAAK,iBACLzB,IAAI0B,OAAK,SACT1B,IAAI,wBACJE,KAAK,cACL;EAGF2B,qBAAqB,EAACrB,IAAE,MAAMN,KAAK,uBAAuBM,IAAE;EAC5DsB,oBAAoB,EAAC,YAAYtB,IAAE,MAAM,QAAQR,IAAI;EACrD+B,UAAU,EAACvB,IAAE,KAAK,aAAakB,OAAK;EACpCM,cAAc,EAACxB,IAAE,MAAM;EACvByB,cAAc,EAACzB,IAAE,MAAMN,KAAK,cAAcM,IAAE;EAC5C0B,WAASA,CAAClD,GAAcmD,MACC,UAAhBnD,EAAMyB,QACT0B,EAAO5D,MAAM,2BAA0B,KACrC,mBACA,mBACF4D,EAAO5D,MAAM,kBAAiB,KAC9B,iBACA;EAGN6D,cAAc,EACZV,OAAK,aACLlB,IAAE,MACFkB,OAAK,cACL1B,IAAI,cACJE,KAAK,cACLF,IAAI;EAGNqC,OAAO,EACLX,OAAK,aACL1B,IAAI,cACJE,KAAK,cACLF,IAAI;EAGNsC,WAAW,EAAC9B,IAAE,MAAMN,KAAK,aAAaM,IAAE;EACxC+B,UAAU,EAACb,OAAK,cAAclB,IAAE,MAAM;EACtCgC,gBAAgB,EAAChC,IAAE,QAAQkB,OAAK,QAAQxB,KAAK;EAC7CuC,gBAAgB,EACdjC,IAAE,QACFR,IAAI,kBACJE,KAAK,cACL;EAGFwC,oBAAoB,EAClBjB,KAAK,aACLzB,IDnIE,SAAU2C,OAAOC,GAAYC;IACjC,IAAMC,IAAYF,EAAKrE;IACvBqE,EAAKrE,QAAQS;MACX,IAAI+D,KAAQ;MACZ,IAAID;QACFC,IAAQD,EAAU9D;;MAEpB,OACE+D,KAEAF,EAAWG,OAAMC,KAAaA,EAAU1E,UAAU0E,EAAU1E,MAAMS;AAAO;IAG7E,OAAO4D;AACT,GCqHQD,CAAOjB,OAAK,QAAQ,EAACD,KAAK,WAC9B,iBACAvB,KAAK,cACL;EAGFgD,eAAe,EAACzB,KAAK,OAAO;EAE5B0B,KAAAA,CAAMnE;IACJ,QAAQA,EAAMsB;KACZ,KAAK;MACH,OAAO;;KACT,KAAK;MACH,OAAO;;KACT,KAAK;MACH,QAAQtB,EAAMyB;OACZ,KAAK;QACH,OAAO;;OACT,KAAK;QACH,OAAO;;OACT,KAAK;QACH,OAAO;;OACT,KAAK;QACH,OAAO;;MAGX,OAAO;;KACT,KAAK;MACH,QAAQzB,EAAMyB;OACZ,KAAK;OACL,KAAK;QACH,OAAO;;MAGX,IAAoB,WAAhBzB,EAAMyB;QACR,OAAO;;MAET,OAAO;;AAEZ;EACD2C,aAAa,EAAC/C,IAAE,UAAU;EAC1BgD,aAAa,EACX;IACE9C,OAAO;IACPhC,OAAQS,KAAgC,aAAfA,EAAMsB;IAC/BgD,MAAAA,CAAOC,GAAcvE;MACnB,IAAIA,EAAMyB,MAAMpB,WAAW;QACzBkE,EAAMC,iBAAiBxE,EAAMyB,MAAMtB,MAAM,GAAGsE,SAAS;;AAEzD;;EAGJC,cAAc,EAACrD,IAAE,QAAQ;EACzBsD,WAAW,EAACtD,IAAE,QAAQ;EACtBuD,WAAW,EAAClC,OAAK;EACjBmC,WAAW,EAACrD,IAAE,MAAMN,KAAK,UAAUM,IAAE;EACrCsD,aAAa,EAACtD,IAAE,MAAMN,KAAK,gBAAgBM,IAAE;EAC7CuD,aAAa,EAACrC,OAAK,cAAclB,IAAE,MAAM;EACzCwD,MAAKhF,KACoB,QAAhBA,EAAMyB,QAAgB,aAAa;EAG5CwD,UAAU,EAACzD,IAAE,MAAM,QAAQA,IAAE,MAAMR,IAAIQ,IAAE;EACzC0D,aAAa,EAAC,aAAalE,IAAIQ,IAAE;EACjC2D,WAAW,EAsIb,SAASC,OAAK7D;IACZ,OAAO;MACLA;MACAhC,OAAQS,KAAgC,WAAfA,EAAMsB;MAC/BgD,MAAAA,CAAOC,GAAcvE;;QACnB,IAAmBqF,UAAfA,IAAAd,EAAMe,mBAASD,MAAAA,SAAAA,IAAAA,EAAEC,WAAW;UAC9Bf,EAAM7B,OAAO1C,EAAMyB;UACnB8C,EAAMe,UAAUA,UAAUF,OAAOpF,EAAMyB;;AAE3C;;AAEJ,GAjJc2D,CAAK;EACjBG,WAAW,EAAC/D,IAAE,KAAK,SAASkB,OAAK,SAAS1B,IAAI;EAC9CwE,cAAc,EACZ/C,KAAK,cACLjB,IAAE,KAAK,SACPkB,OAAK,SACL1B,IAAI,iBACJyB,KAAK,OACLvB,KAAK,qBAAqBM,IAAE;EAE9BiE,cAAc,EACZhD,KAAK,cACLC,OAAK,SACL1B,IAAI,eACJE,KAAK,cACLM,IAAE,MACFN,KAAK,aACLM,IAAE;EAEJkE,YAAY,EAACjD,KAAK,eAAevB,KAAK,aAAaM,IAAE;EACrDmE,mBAAmB,EAACjD,OAAK;EAEzBkD,WAAW,EACTnD,KAAK,WACLvB,KAAK,cACLM,IAAE,MACFN,KAAK,qBACLM,IAAE;EAGJqE,kBAAkB,EAACnD,OAAK,YAAYlB,IAAE,MAAMkB,OAAK;EACjDoD,WAAW,EAACrD,KAAK,WAAWC,OAAK,SAASxB,KAAK;EAC/C6E,eAAe,EACbtD,KAAK,SACLC,OAAK,SACL1B,IAAI,eACJE,KAAK,cACLM,IAAE,MACFN,KAAK,aACLM,IAAE;EAGJwE,UAAU,EACRtD,OAAK,aACL1B,IAAI,iBACJQ,IAAE,MACF,QACAN,KAAK;EAGP+E,cAAc,EAACzE,IAAE,MAAMN,KAAK,kBAAkBM,IAAE;EAChD0E,eAAe,EACbxD,OAAK,cACLlB,IAAE,MACF,QACAR,IAAI,iBACJE,KAAK;EAGPiF,UAAU,EACR1D,KAAK,UACLC,OAAK,SACLxB,KAAK,cACLM,IAAE,MACFN,KAAK,eAAeM,IAAE;EAGxB4E,aAAa,EAAC;EACdC,SAAS,EACP5D,KAAK,SACLC,OAAK,SACLxB,KAAK,cACLM,IAAE,MACFN,KAAK,iBACLM,IAAE;EAGJ8E,cAAc,EAAC5D,OAAK,aAAaxB,KAAK;EACtCqF,UAAU,EACR9D,KAAK,UACLC,OAAK,SACLxB,KAAK,cACLM,IAAE,MACFN,KAAK,kBACLM,IAAE;EAEJgF,WAAW,EAAC/D,KAAK,WAAW;EAC5BgE,mBAAAA,CAAoBzG;IAClB,QAAQA,EAAMyB;KACZ,KAAK;MACH,OAAOY,EAAAA,KAAKqE;;KACd,KAAK;MACH,OAAOrE,EAAAA,KAAKsE;;KACd,KAAK;MACH,OAAOtE,EAAAA,KAAKuE;;KACd,KAAK;MACH,OAAOvE,EAAAA,KAAKwE;;KACd,KAAK;MACH,OAAOxE,EAAAA,KAAKyE;;KACd,KAAK;MACH,OAAOzE,EAAAA,KAAK0E;;KACd,KAAK;MACH,OAAO1E,EAAAA,KAAK2E;;AAEjB;EACD,CAAC3E,EAAIA,KAACqE,mBAAmB,EAAC;EAC1B,CAACrE,EAAIA,KAACsE,wBAAwB,EAAC;EAC/B,CAACtE,EAAIA,KAACuE,wBAAwB,EAAC;EAC/B,CAACvE,EAAIA,KAACwE,2BAA2B,EAAC;EAClC,CAACxE,EAAIA,KAACyE,uBAAuB,EAAC;EAC9B,CAACzE,EAAIA,KAAC0E,sBAAsB,EAAC;EAC7B,CAAC1E,EAAIA,KAAC2E,8BAA8B,EAAC;;;AAIvC,SAASvE,KAAKhB;EACZ,OAAO;IACLF,OAAO;IACPhC,OAAQS,KAAgC,WAAfA,EAAMsB,QAAmBtB,EAAMyB,UAAUA;;AAEtE;;AAGA,SAASiB,OAAKnB;EACZ,OAAO;IACLA;IACAhC,OAAQS,KAAgC,WAAfA,EAAMsB;IAC/BgD,MAAAA,CAAOC,GAAcvE;MACnBuE,EAAM7B,OAAO1C,EAAMyB;AACrB;;AAEJ;;ACpTc,SAAUwF,aACtBC,IAAyB;EACvBC,eAAehE,KAAUA,EAAO7D,SAASoC;EACzC0F,UAAUxF;EACVyF,YAAYnF;EACZoF,cAAc,CAAA;;EAMhB,OAAO;IACLC,UAAAA;MACE,IAAMC,IAAe;QACnBC,OAAO;QACPC,MAAM;QACNhF,MAAM;QACNpB,MAAM;QACN8D,MAAM;QACNxB,MAAM;QACN+D,iBAAgB;QAChBrC,WAAW;;MAGbsC,SAASV,EAAQG,YAAYG,GAAcnF,EAAIA,KAACwF;MAChD,OAAOL;AACR;IACDxH,OAAKA,CAACmD,GAAyBoB,MAMnC,SAASuD,SACP3E,GACAoB,GACA2C;;MAEA,IAAI3C,EAAMC,eAAe;QAEvB,IAAIrB,EAAO5D,MAAM,UAAU;UACzBgF,EAAMC,iBAAgB;UACtB,OAAO;;QAETrB,EAAOxD;QACP,OAAO;;MAGT,KAAMyH,UAAEA,GAAQC,YAAEA,GAAUF,eAAEA,GAAaG,cAAEA,KAAiBJ;MAE9D,IAAI3C,EAAMX,QAA8B,MAAtBW,EAAMX,KAAK/E;QAC3BkJ,QAAQxD;aACH,IAAIA,EAAMyD,cAAc;QAC7BzD,EAAMyD,gBAAe;QACrBC,YAAY1D,IAAO;;MAIrB,IAAIpB,EAAOrE,OAAO;QAChB,IAAMoJ,KAAUZ,iBAAY,IAAZA,EAAcY,YAAW;QACzC3D,EAAM4D,cAAcC,KAAKC,MAAMlF,EAAO1C,gBAAgByH;;MAIxD,IAAIf,EAAchE;QAChB,OAAO;;MAIT,IAAMnD,IAuOR,SAASsI,IACPlB,GACAjE;QAEA,IAAMoF,IAAQC,OAAOC,KAAKrB;QAC1B,KAAK,IAAIsB,IAAI,GAAGA,IAAIH,EAAM1J,QAAQ6J,KAAK;UAGrC,IAAMnJ,IAAQ4D,EAAO5D,MAAM6H,EAASmB,EAAMG;UAC1C,IAAInJ,KAASA,aAAiBa;YAC5B,OAAO;cAAEkB,MAAMiH,EAAMG;cAAIjH,OAAOlC,EAAM;;;;AAG5C,OApPgB+I,CAAIlB,GAAUjE;MAG5B,KAAKnD,GAAO;QAEV,KADyBmD,EAAO5D,MAAM;UAIpC4D,EAAO5D,MAAM;;QAEfqI,SAASe,GAAmBpE,GAAO;QACnC,OAAO;;MAIT,IAAmB,cAAfvE,EAAMsB,MAAoB;QAC5BsG,SAASe,GAAmBpE,GAAO;QACnC,OAAO;;MAIT,IAAMqE,IAAcC,OAAO,CAAE,GAAEtE;MAG/B,IAAmB,kBAAfvE,EAAMsB;QACR,IAAI,SAASpB,KAAKF,EAAMyB;UACtB,SAA0BqH,MAAtBvE,EAAM4D;YAER5D,EAAMwE,UAAUxE,EAAMwE,UAAU,IAAIC,OAAOzE,EAAM4D,cAAc;;eAE5D,IAAI,UAAUjI,KAAKF,EAAMyB,QAAQ;UAItC,IAAMsH,IAAUxE,EAAMwE,UAAUxE,EAAMwE,UAAU,IAAI5I,MAAM,IAAI;UAG9D,IACEoE,EAAM4D,eACNY,EAAOlK,SAAS,KAChBkK,EAAOE,IAAI,KAAM1E,EAAM4D;YAEvB5D,EAAM4D,cAAcY,EAAOE,IAAI;;;;MAKrC,OAAO1E,EAAMX,MAAM;QAGjB,IAAIsF,IACoB,qBAAf3E,EAAMX,OACM,MAAfW,EAAMmD,OACJnD,EAAMX,KAAK5D,GAAOmD,KAClB,OACFoB,EAAMX,KAAKW,EAAMmD;QAGvB,IAAInD,EAAMoD;UACRuB,IAAWA,iBAAAA,IAAAA,EAAU/H;;QAGvB,IAAI+H,GAAU;UAEZ,IAAIA,EAASjI;YACXiI,IAAWA,EAASjI;;UAItB,IAAwB,mBAAbiI,GAAuB;YAChCtB,SAASP,GAAY9C,GAAO2E;YAC5B;;UAIF,IAAkB7D,UAAdA,IAAA6D,EAAS3J,eAAK8F,MAAAA,SAAAA,IAAAA,EAAA8D,KAAAD,GAAGlJ,IAAQ;YAC3B,IAAIkJ,EAAS5E;cACX4E,EAAS5E,OAAOC,GAAOvE;;YAMzB,IAAmB,kBAAfA,EAAMsB;cACR2G,YAAY1D,IAAO;;cAEnBA,EAAMyD,gBAAe;;YAGvB,OAAOkB,EAAS3H;;;QAGpB6H,aAAa7E;;MAIfsE,OAAOtE,GAAOqE;MACdhB,SAASe,GAAmBpE,GAAO;MACnC,OAAO;AACT,KA5IauD,CAAS3E,GAAQoB,GAAO2C;;AAGrC;;AA4IA,SAAS2B,OAAOQ,GAAYC;EAC1B,IAAMb,IAAOD,OAAOC,KAAKa;EACzB,KAAK,IAAIZ,IAAI,GAAGA,IAAID,EAAK5J,QAAQ6J;IAG/BW,EAAGZ,EAAKC,MAAMY,EAAKb,EAAKC;;EAE1B,OAAOW;AACT;;AAGA,IAAMV,IAAoB;EACxBY,SAAS;EACTtH,SAAS;;;AAIX,SAAS2F,SACP4B,GACAjF,GACAkF;EAEA,KAAKD,EAAMC;IACT,MAAM,IAAIC,UAAU,mBAAmBD;;EAEzClF,EAAMe,YAASkD,OAAAK,OAAA,CAAA,GAAQtE;EACvBA,EAAMjD,OAAOmI;EACblF,EAAM7B,OAAO;EACb6B,EAAMa,OAAO;EACbb,EAAMX,OAAO4F,EAAMC;EACnBlF,EAAMmD,OAAO;EACbnD,EAAMoD,kBAAiB;AACzB;;AAGA,SAASI,QAAQxD;EAEf,KAAKA,EAAMe;IACT;;EAEFf,EAAMjD,OAAOiD,EAAMe,UAAUhE;EAC7BiD,EAAM7B,OAAO6B,EAAMe,UAAU5C;EAC7B6B,EAAMa,OAAOb,EAAMe,UAAUF;EAC7Bb,EAAMX,OAAOW,EAAMe,UAAU1B;EAC7BW,EAAMmD,OAAOnD,EAAMe,UAAUoC;EAC7BnD,EAAMoD,iBAAiBpD,EAAMe,UAAUqC;EACvCpD,EAAMe,YAAYf,EAAMe,UAAUA;AACpC;;AAGA,SAAS2C,YAAY1D,GAAcoF;;EAGjC,IAAIvI,OAAOmD,MAAUA,EAAMX,MAAM;IAG/B,IAAM8D,IAAOnD,EAAMX,KAAKW,EAAMmD;IAC9B,IAAIA,EAAKvG,WAAW;MAClB,KAAMA,WAAEA,KAAcuG;MACtBnD,EAAMoD,kBAAkBpD,EAAMoD;MAE9B,KAAKpD,EAAMoD,kBAAkBxG,EAAUF;QACrC;;;IAIJ,IAAI0I;MACF;;;EAMJpF,EAAMoD,kBAAiB;EACvBpD,EAAMmD;EAGN,OACEnD,EAAMX,UACJxD,MAAMwJ,QAAQrF,EAAMX,SAASW,EAAMmD,OAAOnD,EAAMX,KAAK/E,SACvD;IACAkJ,QAAQxD;IAER,IAAIA,EAAMX;MAER,IAAIxC,OAAOmD;QAGT,IAAcc,UAAVA,IAAAd,EAAMX,cAAIyB,MAAAA,SAAAA,IAAAA,EAAGd,EAAMmD,MAAMvG;UAC3BoD,EAAMoD,kBAAkBpD,EAAMoD;;aAE3B;QACLpD,EAAMoD,kBAAiB;QACvBpD,EAAMmD;;;;AAId;;AAEA,SAAStG,OAAOmD;EACd,IAAMmD,IACJtH,MAAMwJ,QAAQrF,EAAMX,SACc,mBAA3BW,EAAMX,KAAKW,EAAMmD,SACvBnD,EAAMX,KAAKW,EAAMmD;EAEpB,OAAOA,KAAQA,EAAKtG;AACtB;;AAGA,SAASgI,aAAa7E;EAGpB,OACEA,EAAMX,UAGJxD,MAAMwJ,QAAQrF,EAAMX,UAASW,EAAMX,KAAKW,EAAMmD,MAAMzG;IAEtD8G,QAAQxD;;EAKV,IAAIA,EAAMX;IACRqE,YAAY1D,IAAO;;AAEvB;;;;;;ACvUM,MAAOsF;EAGXzL,WAAAA,CAAY0L,GAAkBC;IAa9BzL,KAAA0L,mBAAoBnK;MAClB,IAAIvB,KAAKwL,MAAMG,SAASpK,EAASoK;QAC/B,OAAO3L,KAAKwL,MAAM/I,aAAalB,EAASkB;;MAE1C,IAAIzC,KAAKyL,IAAIE,SAASpK,EAASoK;QAC7B,OAAO3L,KAAKyL,IAAIhJ,aAAalB,EAASkB;;MAExC,OAAOzC,KAAKwL,MAAMG,QAAQpK,EAASoK,QAAQ3L,KAAKyL,IAAIE,QAAQpK,EAASoK;AAAI;IAnBzE3L,KAAKwL,QAAQA;IACbxL,KAAKyL,MAAMA;AACb;EAEAG,QAAAA,CAASD,GAAclJ;IACrBzC,KAAKwL,QAAQ,IAAIK,SAASF,GAAMlJ;AAClC;EAEAqJ,MAAAA,CAAOH,GAAclJ;IACnBzC,KAAKyL,MAAM,IAAII,SAASF,GAAMlJ;AAChC;;;AAaI,MAAOoJ;EAGX/L,WAAAA,CAAY6L,GAAclJ;IAa1BzC,KAAA+L,oBAAqBxK,KACnBvB,KAAK2L,OAAOpK,EAASoK,QACpB3L,KAAK2L,SAASpK,EAASoK,QAAQ3L,KAAKyC,aAAalB,EAASkB;IAd3DzC,KAAK2L,OAAOA;IACZ3L,KAAKyC,YAAYA;AACnB;EAEAuJ,OAAAA,CAAQL;IACN3L,KAAK2L,OAAOA;AACd;EAEAM,YAAAA,CAAaxJ;IACXzC,KAAKyC,YAAYA;AACnB;;;AChBF,IAAMyJ,IAAoB,EACxBC,EAAwBA,0BACxBC,EAAwBA,0BACxBC,EAAmBA,qBACnBC,EAAwBA,0BACxBC,EAA8BA,gCAC9BC,EAAwBA,0BACxBC,EAAkBA,oBAClBC,EAAmBA,qBACnBC,EAA+BA,iCAC/BC,EAA0BA,4BAE1BC,EAAuBA,yBACvBC,EAAyBA;;ACLpB,IAAMC,IAAsB;EACjC,CAXO,UAWW;EAClB,CAXS,YAWW;EACpB,CAXa,gBAWW;EACxB,CAXM,SAWW;;;AAGnB,IAAMC,YAAYA,CAACC,GAAgBC;EACjC,KAAKD;IACH,MAAM,IAAIE,MAAMD;;;;AAId,SAAUE,eACdC,GACAC,IAA2C,MAC3CC,GACAC,GACAC;;EAEA,IAAIC,IAAM;EACV,IAAIC,IAAY;EAChB,IAAIF;IACFE,IAC+B,mBAAtBF,IACHA,IACAA,EAAkBG,QAChB,CAACC,GAAKC,MAASD,IAAME,EAAKA,MAACD,KAAQ,SACnC;;EAGV,IAAME,IAAgBL,IAAY,GAAGN,QAAYM,MAAcN;EAE/D;IACEK,IAAMO,EAAAA,MAAMD;AACb,IAAC,OAAOE;IACP,IAAIA,aAAiBC,EAAAA,cAAc;MACjC,IAAMC,IA0FN,SAAUC,SAASC,GAA0BC;QACjD,IAAMC,IAAS7F;QACf,IAAM1C,IAAQuI,EAAOvF;QACrB,IAAMwF,IAAQF,EAAUG,MAAM;QAE9B1B,UACEyB,EAAMlO,UAAU+N,EAAS3C,MACzB;QAGF,IAAI9G,IAAS;QAEb,KAAK,IAAIuF,IAAI,GAAGA,IAAIkE,EAAS3C,MAAMvB,KAAK;UACtCvF,IAAS,IAAIhF,gBAAgB4O,EAAMrE;UACnC,QAAQvF,EAAOxE,OAAO;YAEpB,IAAc,kBADAmO,EAAO9M,MAAMmD,GAAQoB;cAEjC;;;;QAKN+G,UAAUnI,GAAQ;QAClB,IAAM8G,IAAO2C,EAAS3C,OAAO;QAG7B,IAAMH,IAAQ3G,EAAO1E;QAGrB,IAAMsL,IAAM5G,EAAOzE;QACnB,OAAO,IAAImL,MAAM,IAAIM,SAASF,GAAMH,IAAQ,IAAIK,SAASF,GAAMF;AACjE,OAzHoB4C,CACQM,UAApBA,IAAe5H,UAAfA,IAAAmH,EAAMU,mBAAS7H,MAAAA,SAAAA,IAAAA,EAAG,YAAE4H,MAAAA,IAAAA,IAAI;QAAEhD,MAAM;QAAGzJ,QAAQ;SAC3C8L;MAGF,OAAO,EACL;QACEa,UAAU9B,EAAoBI;QAC9BD,SAASgB,EAAMhB;QACf4B,QAAQ;QACRV;;;IAIN,MAAMF;;EAGR,OAGI,SAAUa,cACdrB,GACAJ,IAA2C,MAC3CC,GACAC;IAGA,KAAKF;MACH,OAAO;;IAGT,IAAM0B,IDxDF,SAAUC,wBACd3B,GACAI,GACAH,GACAC,GACA0B;MAEA,IAAMhE,IAAQiE,EAAAA,eAAeC,QAAO9J;QAIlC,IAAIA,MAAS+J,EAAAA,yBAAyB/J,MAASgK;UAC7C,QAAO;;QAET,IAAI9B,KAAqBlI,MAASiK;UAChC,QAAO;;QAET,QAAO;AAAI;MAGb,IAAIhC;QACFzL,MAAM0N,UAAUC,KAAKC,MAAMxE,GAAOqC;;MAEpC,IAAI2B;QACFpN,MAAM0N,UAAUC,KAAKC,MAAMxE,GAAOgB;;MAGpC,OADeyD,EAAQA,SAACrC,GAAQI,GAAKxC,GACvBkE,QAAOlB;QACnB,IAAIA,EAAMhB,QAAQ0C,SAAS,wBAAwB1B,EAAM2B,OAAO;UAC9D,IAAM/B,IAAOI,EAAM2B,MAAM;UACzB,IAAI/B,KAAQA,EAAK9K,SAASe,EAAAA,KAAK+L,WAAW;YACxC,IAAM1L,IAAO0J,EAAK1J,KAAKjB;YACvB,IAAa,gBAATiB,KAAiC,0BAATA;cAC1B,QAAO;;;;QAIb,QAAO;AAAI;AAEf,KCiBqC6K,CACjC3B,GACAI,GACAH,GACAC,GACAuC,SAAQ7B,KACR8B,YAAY9B,GAAOnB,EAAoBI,OAAO;IAIhD,IAAM8C,IAAgCN,EAAAA,SAASrC,GAAQI,GAAK,EAC1DwC,EAAsBA,0BACrBH,SAAQ7B,KACT8B,YAAY9B,GAAOnB,EAAoBoD,SAAS;IAElD,OAAOnB,EAA2BtE,OAAOuF;AAC3C,GA9BSlB,CAAcrB,GAAKJ,GAAQC,GAAaC;AACjD;;AA+BA,SAASwC,YACP9B,GACAW,GACA/H;EAEA,KAAKoH,EAAM2B;IACT,OAAO;;EAET,IAAMO,IAAiC;EACvC,KAAK,KAAOhG,GAAG0D,MAASI,EAAM2B,MAAMQ,WAAW;IAC7C,IAAMC,IACU,eAAdxC,EAAK9K,QAAuB,UAAU8K,UAAsBtD,MAAdsD,EAAK1J,OAC/C0J,EAAK1J,OACL,cAAc0J,UAA0BtD,MAAlBsD,EAAKyC,WAC3BzC,EAAKyC,WACLzC;IACN,IAAIwC,GAAe;MACjBtD,UACEkB,EAAMU,WACN;MAKF,IAAM4B,IAAMtC,EAAMU,UAAUxE;MAC5B,IAAMqG,IAAeC,YAAYJ;MACjC,IAAM7E,IAAM+E,EAAItO,UAAUuO,EAAahF,MAAMgF,EAAajF;MAC1D4E,EAAiBX,KAAK;QACpBX,QAAQ,YAAYhI;QACpBoG,SAASgB,EAAMhB;QACf2B;QACAT,OAAO,IAAI7C,MACT,IAAIM,SAAS2E,EAAI7E,OAAO,GAAG6E,EAAItO,SAAS,IACxC,IAAI2J,SAAS2E,EAAI7E,OAAO,GAAGF;;;;EAKnC,OAAO2E;AACT;;AA0CA,SAASM,YAAY5C;EAEnB,IAAMQ,IADiBR,EACS0C;EAChCxD,UAAUsB,GAAU;EAGpqC,IAAY,IAAIC,IAAI,EAAC,OAAO;;ACIlC,SAASC,UAAUC,GAAkCC;EAC1D,IAAMC,IAAUF,EAAKG,gBAAgBC;EACrC,KAAKF;IAAS;;EAEd,IAAMlC,IAASkC,EAAQG,cAAcJ;EACrC,KAAKjC;IAAQ;;EAEb,OAAOA;AACT;;AAEO,SAASsC,SACdC,GACA9P;EAOA,OALA,SAAS+P,KAAKxD;IACZ,IAAIvM,KAAYuM,EAAKyD,cAAchQ,IAAWuM,EAAK0D;MACjD,OAAO5R,QAAEA,GAAC6R,aAAa3D,GAAMwD,SAASxD;;AAE1C,GACOwD,CAAKD;AACd;;AA0BA,SAASK,eACPC,GACAb;EAEA,IAAMnD,IAA2C;EACjD,IAAMiE,IAAcd,EAAKG,gBAAgBY,wBACvCF,EAAQR,gBAAgBW,UACxBH,EAAQJ;EAGV,KAAKK,MAAgBA,EAAYrR;IAAQ,OAAOoN;;EAEhD,KAAOoE,KAAYH;EAEnB,IAAMI,IAAiBnB,UAAUC,GAAMiB,EAASD;EAChD,KAAKE;IAAgB,OAAOrE;;EAE5B,IAAIsE,IAAQb,SAASY,GAAgBD,EAASG,SAAS1G;EACvD,KAAKyG;IAAO,OAAOtE;;EAEnB,IACE/N,QAAEA,GAACuS,sBAAsBF,EAAMG,WAC/BH,EAAMG,OAAOC,eACbzS,QAAEA,GAAC0S,iBAAiBL,EAAMG,OAAOC;IAEjCJ,IAAQA,EAAMG,OAAOC;SAChB,IAAIzS,QAAAA,GAAG2S,qBAAqBN,EAAMG;IACvCH,IAAQA,EAAMG,OAAOC;;EAGvB,IAAIzS,QAAEA,GAAC0S,iBAAiBL,MAAUtB,EAAU6B,IAAIP,EAAMQ,WAAWC,YAAY;IAC3E,KAAOC,GAAKC,KAAQX,EAAMY;IAC1B,IAAID,KAAQhT,QAAAA,GAAGkT,yBAAyBF;MACtCA,EAAKG,SAASC,SAAQrB;QACpB,IAAI/R,QAAEA,GAACqT,aAAatB;UAClBhE,EAAU8B,QAAQiC,eAAeC,GAASb;;AAC5C;;IAIJ;MACiB7C,EAAKA,MAAC0E,EAAID,UAAU7Q,MAAM,IAAI,IAAI;QAAEqR,aAAY;SACxDtB,YAAYoB,SAAQG;QACzB,IAAwB,yBAApBA,EAAWnQ;UACb2K,EAAU8B,KAAK0D;;AACjB;AAEJ,MAAE,OAAOC,IAAI;AACf;EAEA,OAAOzF;AACT;;AAyBO,SAAS0F,uBACdhC,GACAP,GACAwC,KAAiC;EAKjC,IAAMC,IAAkD;EACxD,IAAI5F,IAA2C;EAC/C,IAAI6F,IAA0BF,KAAwB,KAAQ;GAC9D,SAAShC,KAAKxD;IACZ,IAAIlO,QAAEA,GAAC0S,iBAAiBxE,MAAS6C,EAAU6B,IAAI1E,EAAK2E,WAAWC,YAAY;MACzE,KAAOC,GAAKC,KAAQ9E,EAAK+E;MAEzB,KAAKW,MAA4BZ,GAAM;QACrCY,KAA0B;QAC1B7F,EAAU8B,QAAQgE,gBAAgBpC,EAAWS,UAAUhE,GAAMgD;AAC9D,aAAM,IAAI8B,KAAQhT,QAAAA,GAAGkT,yBAAyBF;QAC7CA,EAAKG,SAASC,SAAQrB;UACpB,IAAI/R,QAAEA,GAACqT,aAAatB;YAClBhE,EAAU8B,QAAQiC,eAAeC,GAASb;iBACrC,IAAIlR,QAAEA,GAAC8T,2BAA2B/B,IAAU;YACjD,IAAIgC,IAAKhC;YACT,OAAO/R,WAAG8T,2BAA2BC,EAAGlB;cACtCkB,IAAKA,EAAGlB;;YAGV,IAAI7S,WAAGqT,aAAaU,EAAGvP;cACrBuJ,EAAU8B,QAAQiC,eAAeiC,EAAGvP,MAAM0M;;AAE9C;AAAA;;MAIJ,IAAI6B,KAAO/S,QAAAA,GAAGgU,gCAAgCjB;QAC5CY,EAAO9D,KAAKkD;;MAEd;AACF;MACE/S,QAAAA,GAAG6R,aAAa3D,GAAMwD;;AAE1B,GACAA,CAAKD;EACL,OAAO;IAAExB,OAAO0D;IAAQ5F;;AAC1B;;AAEO,SAASkG,gCACdxC;EAEA,IAAMkC,IAAmC;GACzC,SAASjC,KAAKxD;IACZ,IAAIlO,QAAEA,GAAC0S,iBAAiBxE,IAAO;MAG7B,IAAMgG,IADahG,EAAK2E,WAAWC,UACVhE,MAAM;MAC/B,IAAqB,MAAjBoF,EAAMvT;QAAc;;MAExB,KAAOwT,GAAUC,KAAUF;MAC3B,KAAKnD,EAAU6B,IAAIuB,MAAwB,gBAAXC;QAAwB;;MAExDT,EAAO9D,KAAK3B;AACd;MACElO,QAAAA,GAAG6R,aAAa3D,GAAMwD;;AAE1B,GACAA,CAAKD;EACL,OAAOkC;AACT;;AAEO,SAASE,gBACd3B,GACAhE,GACAgD;EAEA,IAAInD,IAA2C;EAE/C,IAAMiE,IAAcd,EAAKG,gBAAgBY,wBACvCC,GACAhE,EAAK2E,WAAWlB;EAElB,KAAKK,MAAgBA,EAAYrR;IAAQ,OAAOoN;;EAEhD,IAAIG,EAAK+E,UAAU,MAAMjT,QAAAA,GAAGkT,yBAAyBhF,EAAK+E,UAAU,KAAK;IAC1D/E,EAAK+E,UAAU,GACvBE,SAASC,SAAQrB;MACpB,IAAI/R,QAAEA,GAACqT,aAAatB;QAClBhE,EAAU8B,QAAQiC,eAAeC,GAASb;;AAC5C;IAEF,OAAOnD;AACT;EAEA,IAAMsG,IAAMrC,EAAY;EACxB,KAAKqC;IAAK,OAAOtG;;EACjB,IAAMuG,IAAMrD,UAAUC,GAAMmD,EAAInC;EAChC,KAAKoC;IAAK,OAAOvG;;EAEjB/N,WAAG6R,aAAayC,IAAKpG;IACnB,IACElO,QAAEA,GAACuU,oBAAoBrG,MACvBA,EAAKsG,mBACmD,gBAAxDtG,EAAKsG,gBAAgBC,aAAa,GAAGjQ,KAAKsO,WAC1C;MACA,KAAO4B,KAAexG,EAAKsG,gBAAgBC;MAC3C,IACEC,EAAYjC,eACZzS,QAAAA,GAAG2U,0BAA0BD,EAAYjC;QAEzCiC,EAAYjC,YAAYmC,WAAWxB,SAAQyB;UACzC,IACE7U,QAAEA,GAAC2S,qBAAqBkC,MACxB7U,QAAEA,GAAC8U,gBAAgBD,EAASrQ;YAE5B;cACE,IAAMuQ,IAAmBC,KAAK3G,MAC3B,GAAEwG,EAASrQ,KAAKsO,UAAUmC,QAAQ,MAAM;cAG3C,IACEF,EAAiB/E,SAAS,gBAC1B+E,EAAiB/E,SAAS,SAC1B;gBACe3B,EAAKA,MAAC0G,GAAkB;kBACrCzB,aAAY;mBAEPtB,YAAYoB,SAAQG;kBACzB,IAAwB,yBAApBA,EAAWnQ;oBACb2K,EAAU8B,KAAK0D;;AACjB;AAEJ;AACF,cAAE,OAAOC,IAAS;;AACpB;;AAGN;AAAA;EAGF,OAAOzF;AACT;;AC3PO,SAASmH,gBACdhH,GACAiD,GACAD;EAEA,IAAIlR,QAAEA,GAACgU,gCAAgC9F;IACrC,OAAO;MAAEiH,cAAcjH,EAAK4E,UAAU7Q,MAAM,IAAI;MAAImT,eAAe;;;EAGrE,IAAIC,IAAenH,EAAKiG,SAASrB,UAAU7Q,MAAM,IAAI;EACrD,IACEjC,QAAEA,GAACgU,gCAAgC9F,EAAKiG,aACD,MAAvCjG,EAAKiG,SAASmB,cAAc3U;IAE5B,OAAO;MAAEwU,cAAcE;MAAcD,eAAe;;;EAGtD,IAAIG,IAAkB;EACtB,IAAMH,IAAgBlH,EAAKiG,SAASmB,cACjCE,KAAIC;IACH,IAAIzV,WAAGqT,aAAaoC,EAAK5C,aAAa;MACpC,IAAMb,IAAcd,EAAKG,gBAAgBY,wBACvCd,GACAsE,EAAK5C,WAAWlB;MAElB,KAAKK,MAAgBA,EAAYrR;QAAQ;;MAEzC,IAAM0T,IAAMrC,EAAY;MACxB,IAAMsC,IAAMrD,UAAUC,GAAMmD,EAAInC;MAChC,KAAKoC;QAAK;;MAEV,IAAMpG,IAAOsD,SAAS8C,GAAKD,EAAI/B,SAAS1G;MACxC,KAAKsC,MAASA,EAAKsE;QAAQ;;MAE3B,IAAMA,IAAStE,EAAKsE;MACpB,IAAIxS,QAAEA,GAACuS,sBAAsBC,IAAS;QACpC,IAAMkD,IAAiBD,EAAK5C,WAAW8C;QAEvC,IAAMC,IAAgBH,EAAK5C,WAAWlB,aAAa;QACnD,IAAMkE,IAAgB;UACpBjK,OAAOgK;UAEPjV,QAAQ8U,EAAK5C,WAAWhH,MAAM+J,IAAgB;;QAEhD,IACEpD,EAAOC,eACPzS,QAAAA,GAAG8V,2BAA2BtD,EAAOC,cACrC;UACA,IAAMsD,IAAOb,gBACX1C,EAAOC,aACP4B,EAAInC,UACJhB;UAEFmE,IAAeA,EAAaJ,QAC1B,OAAOQ,EAAK5C,WAAW8C,cAAc,KACrCI,EAAKZ;UAGP,IAAMa,IAAc;YAClBnH,OAAOkH,EAAKZ,aAAarG,MAAM,MAAMnO;YACrCsV,YAAYP;YACZQ,UAAUL;YACVM,KAAK;cACHvK,OAAOiK,EAAcjK,QAAQ2J;cAC7B5U,QAAQoV,EAAKZ,aAAaxU;;;UAG9B4U,KAAmBQ,EAAKZ,aAAaxU,SAASkV,EAAclV;UAC5D,OAAOqV;AACR,eAAM,IACLxD,EAAOC,eACPzS,QAAEA,GAACoW,eAAe5D,EAAOC,gBACzBzS,QAAEA,GAAC8V,2BAA2BtD,EAAOC,YAAYI,aACjD;UACA,IAAMkD,IAAOb,gBACX1C,EAAOC,YAAYI,YACnBwB,EAAInC,UACJhB;UAEFmE,IAAeA,EAAaJ,QAC1B,OAAOQ,EAAK5C,WAAW8C,cAAc,KACrCI,EAAKZ;UAEP,IAAMa,IAAc;YAClBnH,OAAOkH,EAAKZ,aAAarG,MAAM,MAAMnO;YACrCsV,YAAYP;YACZQ,UAAUL;YACVM,KAAK;cACHvK,OAAOiK,EAAcjK,QAAQ2J;cAC7B5U,QAAQoV,EAAKZ,aAAaxU;;;UAG9B4U,KAAmBQ,EAAKZ,aAAaxU,SAASkV,EAAclV;UAC5D,OAAOqV;AACT,eAAO,IACLxD,EAAOC,eACPzS,QAAEA,GAACoW,eAAe5D,EAAOC,gBACzBzS,QAAAA,GAAGoW,eAAe5D,EAAOC,YAAYI,eACrC7S,WAAG2U,0BACDnC,EAAOC,YAAYI,WAAWA,aAEhC;UAIA,IAAMwD,IAAmBlI,MAHP6G,KAAK3G,MACrBmE,EAAOC,YAAYI,WAAWA,WAAWC;UAG3CuC,IAAeA,EAAaJ,QAC1B,OAAOQ,EAAK5C,WAAW8C,cAAc,KACrCU;UAEF,IAAML,IAAc;YAClBnH,OAAOwH,EAAiBvH,MAAM,MAAMnO;YACpCsV,YAAYP;YACZQ,UAAUL;YACVM,KAAK;cACHvK,OAAOiK,EAAcjK,QAAQ2J;cAC7B5U,QAAQ0V,EAAiB1V;;;UAG7B4U,KAAmBc,EAAiB1V,SAASkV,EAAclV;UAC3D,OAAOqV;AACT;QAEA;AACF;AACF;IAEA;AAAgB,MAEjBxG,OAAO8G;EAEV,OAAO;IAAEnB,cAAcE;IAAcD;;AACvC;;AC7IA,IAAMmB,IACmB,mBAAhBC,eACPA,eAC2B,qBAApBA,YAAYC,MACfD,cACAE;;AAEN,IAAMC,IAAS,IAAI3F;;AAMnB,IAAM4F,IACe,mBAAZC,WAA0BA,UAAUA,UAAU;;AAIvD,IAAMC,cAAcA,CAClBC,GACA7P,GACA8P,GACAC;EAE+B,qBAAxBL,EAAQE,cACXF,EAAQE,YAAYC,GAAK7P,GAAM8P,GAAMC,KACrCC,QAAQ5I,MAAM,IAAI0I,MAAS9P,MAAS6P;AAAM;;AAGhD,IAAII,IAAKC,WAAWC;;AACpB,IAAIC,IAAKF,WAAWG;;AAGpB,SAAkB,MAAPJ,GAAoB;EAE7BG,IAAK,MAAMC;IAETC,SAAqC;IAErCC,SAAmB;IACnBC,gBAAAA,CAAiBC,GAAWV;MAC1B7W,KAAKoX,SAAS3H,KAAKoH;AACrB;;EAGFE,IAAK,MAAME;IACTnX,WAAAA;MACE0X;AACF;IACAC,OAAS,IAAIP;IACbQ,KAAAA,CAAMC;MACJ,IAAI3X,KAAKyX,OAAOJ;QAAS;;MAEzBrX,KAAKyX,OAAOE,SAASA;MAErB3X,KAAKyX,OAAOJ,WAAU;MAEtB,KAAK,IAAMR,KAAM7W,KAAKyX,OAAOL;QAC3BP,EAAGc;;MAEL3X,KAAKyX,OAAOG,UAAUD;AACxB;;EAEF,IAAIE,IAC2C,QAA7CrB,EAAQsB,KAAKC;EACf,IAAMP,iBAAiBA;IACrB,KAAKK;MAAwB;;IAC7BA,KAAyB;IACzBnB,YACE,oaAOA,uBACA,WACAc;AACD;;;AAWL,IAAMQ,WAAYC,KAChBA,KAAKA,MAAMnO,KAAKC,MAAMkO,MAAMA,IAAI,KAAKC,SAASD;;AAchD,IAAME,eAAgBC,MACnBJ,SAASI,KACN,OACAA,KAAOtO,KAAKuO,IAAI,GAAG,KACnBC,aACAF,KAAOtO,KAAKuO,IAAI,GAAG,MACnBE,cACAH,KAAOtO,KAAKuO,IAAI,GAAG,MACnBG,cACAJ,KAAO3U,OAAOgV,mBACdC,YACA;;AAGN,MAAMA,kBAAkB5W;EACtBhC,WAAAA,CAAY6Y;IACVC,MAAMD;IACN3Y,KAAK6Y,KAAK;AACZ;;;AAIF,MAAMC;EAIJC,WAAgC;EAChC,aAAOC,CAAOZ;IACZ,IAAMa,IAAUd,aAAaC;IAC7B,KAAKa;MAAS,OAAO;;IACrBH,OAAMI,KAAgB;IACtB,IAAMC,IAAI,IAAIL,MAAMV,GAAKa;IACzBH,OAAMI,KAAgB;IACtB,OAAOC;AACT;EACArZ,WAAAA,CACEsY,GACAa;IAGA,KAAKH,OAAMI;MACT,MAAM,IAAI9N,UAAU;;IAGtBpL,KAAKoZ,OAAO,IAAIH,EAAQb;IACxBpY,KAAKO,SAAS;AAChB;EACAkP,IAAAA,CAAKwI;IACHjY,KAAKoZ,KAAKpZ,KAAKO,YAAY0X;AAC7B;EACAoB,GAAAA;IACE,OAAOrZ,KAAKoZ,OAAOpZ,KAAKO;AAC1B;;;AAwoBI,MAAO+Y;EAIFlB;EACAmB;EACAC;EACAC;EACAC;EAkETf;EACAgB;EACAC;EACAC;EACAC;EACAnZ;EACAoZ;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;EAEAC;EACAC;EACAC;EAWA,4BAAOC,CAILC;IACA,OAAO;MAELN,QAAQM,GAAEN;MACVC,MAAMK,GAAEL;MACRF,OAAOO,GAAEP;MACTR,QAAQe,GAAEf;MACVC,SAASc,GAAEd;MACXC,SAASa,GAAEb;MACXnZ,MAAMga,GAAEha;MACRoZ,MAAMY,GAAEZ;MACR,QAAIC;QACF,OAAOW,GAAEX;AACV;MACD,QAAIC;QACF,OAAOU,GAAEV;AACV;MACDC,MAAMS,GAAET;MAERU,mBAAoB1X,KAAWyX,GAAEC,EAAmB1X;MACpD2X,iBAAiBA,CACfC,GACAC,GACAnS,GACAoS,MAEAL,GAAEE,EACAC,GACAC,GACAnS,GACAoS;MAEJC,YAAaF,KACXJ,GAAEM,EAAYF;MAChBG,SAAUtS,KACR+R,GAAEO,EAAStS;MACbuS,UAAWvS,KACT+R,GAAEQ,EAAUvS;MACdwS,SAAUL,KACRJ,GAAES,EAASL;;AAEjB;EAOA,OAAI3C;IACF,OAAOpY,MAAKoY;AACd;EAIA,WAAImB;IACF,OAAOvZ,MAAKuZ;AACd;EAIA,kBAAII;IACF,OAAO3Z,MAAK2Z;AACd;EAIA,QAAIhB;IACF,OAAO3Y,MAAK2Y;AACd;EAIA,eAAIe;IACF,OAAO1Z,MAAK0Z;AACd;EAIA,WAAIF;IACF,OAAOxZ,MAAKwZ;AACd;EAIA,gBAAIC;IACF,OAAOzZ,MAAKyZ;AACd;EAEA3Z,WAAAA,CACE8I;IAEA,KAAMwP,KACJA,IAAM,GAACiD,KACPA,GAAGC,eACHA,IAAgB,GAACC,cACjBA,GAAYC,gBACZA,GAAcC,gBACdA,GAAcC,YACdA,GAAUlC,SACVA,GAAOC,cACPA,GAAYkC,gBACZA,GAAcC,aACdA,GAAWrC,SACXA,IAAU,GAACsC,cACXA,IAAe,GAACC,iBAChBA,GAAepC,aACfA,GAAWqC,0BACXA,GAAwBC,oBACxBA,GAAkBC,4BAClBA,GAA0BC,wBAC1BA,GAAsBC,kBACtBA,KACEvT;IAEJ,IAAY,MAARwP,MAAcJ,SAASI;MACzB,MAAM,IAAIhN,UAAU;;IAGtB,IAAMgR,IAAYhE,IAAMD,aAAaC,KAAOtW;IAC5C,KAAKsa;MACH,MAAM,IAAIjP,MAAM,wBAAwBiL;;IAG1CpY,MAAKoY,IAAOA;IACZpY,MAAKuZ,IAAWA;IAChBvZ,KAAK6b,eAAeA,KAAgB7b,MAAKuZ;IACzCvZ,KAAK8b,kBAAkBA;IACvB,IAAI9b,KAAK8b,iBAAiB;MACxB,KAAK9b,MAAKuZ,MAAavZ,KAAK6b;QAC1B,MAAM,IAAIzQ,UACR;;MAGJ,IAAoC,qBAAzBpL,KAAK8b;QACd,MAAM,IAAI1Q,UAAU;;;IAIxB,SACkBZ,MAAhBkP,KACuB,qBAAhBA;MAEP,MAAM,IAAItO,UACR;;IAGJpL,MAAK0Z,IAAeA;IACpB1Z,MAAKwa,MAAoBd;IAEzB1Z,MAAK4Z,IAAU,IAAIyC;IACnBrc,MAAK6Z,IAAW,IAAI/X,MAAMsW,GAAKS,UAAKrO;IACpCxK,MAAK8Z,IAAW,IAAIhY,MAAMsW,GAAKS,UAAKrO;IACpCxK,MAAKW,IAAQ,IAAIyb,EAAUhE;IAC3BpY,MAAK+Z,IAAQ,IAAIqC,EAAUhE;IAC3BpY,MAAKga,IAAQ;IACbha,MAAKia,IAAQ;IACbja,MAAKka,IAAQpB,MAAME,OAAOZ;IAC1BpY,MAAK2Y,IAAQ;IACb3Y,MAAK2Z,IAAkB;IAEvB,IAAuB,qBAAZH;MACTxZ,MAAKwZ,IAAWA;;IAElB,IAA4B,qBAAjBC,GAA6B;MACtCzZ,MAAKyZ,IAAgBA;MACrBzZ,MAAKma,IAAY;WACZ;MACLna,MAAKyZ,SAAgBjP;MACrBxK,MAAKma,SAAY3P;;IAEnBxK,MAAKua,MAAgBva,MAAKwZ;IAC1BxZ,MAAKya,MAAqBza,MAAKyZ;IAE/BzZ,KAAK2b,mBAAmBA;IACxB3b,KAAK4b,gBAAgBA;IACrB5b,KAAK+b,6BAA6BA;IAClC/b,KAAKic,+BAA+BA;IACpCjc,KAAKkc,2BAA2BA;IAChClc,KAAKmc,qBAAqBA;IAG1B,IAA0B,MAAtBnc,KAAK6b,cAAoB;MAC3B,IAAsB,MAAlB7b,MAAKuZ;QACP,KAAKvB,SAAShY,MAAKuZ;UACjB,MAAM,IAAInO,UACR;;;MAIN,KAAK4M,SAAShY,KAAK6b;QACjB,MAAM,IAAIzQ,UACR;;MAGJpL,MAAKsc;;IAGPtc,KAAK0b,eAAeA;IACpB1b,KAAKgc,uBAAuBA;IAC5Bhc,KAAKwb,mBAAmBA;IACxBxb,KAAKyb,mBAAmBA;IACxBzb,KAAKsb,gBACHtD,SAASsD,MAAoC,MAAlBA,IACvBA,IACA;IACNtb,KAAKub,iBAAiBA;IACtBvb,KAAKqb,MAAMA,KAAO;IAClB,IAAIrb,KAAKqb,KAAK;MACZ,KAAKrD,SAAShY,KAAKqb;QACjB,MAAM,IAAIjQ,UACR;;MAGJpL,MAAKuc;;IAIP,IAAkB,MAAdvc,MAAKoY,KAA2B,MAAbpY,KAAKqb,OAA+B,MAAlBrb,MAAKuZ;MAC5C,MAAM,IAAInO,UACR;;IAGJ,KAAKpL,KAAKub,iBAAiBvb,MAAKoY,MAASpY,MAAKuZ,GAAU;MACtD,IAAM3C,IAAO;MACb,IA3hCcA,OAAkBL,EAAO/D,IAAIoE,GA2hCvC4F,CAAW5F,IAAO;QACpBL,EAAOkG,IAAI7F;QAIXF,YAFE,iGAEe,yBAAyBE,GAAM0C;;;AAGtD;EAKAoD,eAAAA,CAAgBC;IACd,OAAO3c,MAAK4Z,EAAQpH,IAAImK,KAAOC,QAAW;AAC5C;EAEA,EAAAL;IACE,IAAMjC,IAAO,IAAI5B,UAAU1Y,MAAKoY;IAChC,IAAMiC,IAAS,IAAI3B,UAAU1Y,MAAKoY;IAClCpY,MAAKsa,IAAQA;IACbta,MAAKqa,IAAUA;IAEfra,MAAK6c,IAAc,CAAC9B,GAAOM,GAAK7P,IAAQ2K,EAAKE;MAC3CgE,EAAOU,KAAiB,MAARM,IAAY7P,IAAQ;MACpC8O,EAAKS,KAASM;MACd,IAAY,MAARA,KAAarb,KAAKub,cAAc;QAClC,IAAMxY,IAAI+Z,YAAW;UACnB,IAAI9c,MAAKob,EAASL;YAChB/a,KAAK+c,OAAO/c,MAAK6Z,EAASkB;;YAE3BM,IAAM;QAGT,IAAItY,EAAEia;UACJja,EAAEia;;;;IAMRhd,MAAKid,IAAiBlC;MACpBV,EAAOU,KAAyB,MAAhBT,EAAKS,KAAe5E,EAAKE,QAAQ;AAAC;IAGpDrW,MAAKkd,IAAa,CAACC,GAAQpC;MACzB,IAAIT,EAAKS,IAAQ;QACf,IAAMM,IAAMf,EAAKS;QACjB,IAAMvP,IAAQ6O,EAAOU;QACrBoC,EAAO9B,MAAMA;QACb8B,EAAO3R,QAAQA;QACf2R,EAAO9G,MAAM+G,KAAaC;QAE1BF,EAAOG,eAAejC,KADV8B,EAAO9G,MAAM7K;;;IAO7B,IAAI4R,IAAY;IAChB,IAAMC,SAASA;MACb,IAAMpF,IAAI9B,EAAKE;MACf,IAAIrW,KAAKsb,gBAAgB,GAAG;QAC1B8B,IAAYnF;QACZ,IAAMlV,IAAI+Z,YACR,MAAOM,IAAY,IACnBpd,KAAKsb;QAIP,IAAIvY,EAAEia;UACJja,EAAEia;;;MAIN,OAAO/E;AAAC;IAGVjY,KAAK0c,kBAAkBC;MACrB,IAAM5B,IAAQ/a,MAAK4Z,EAAQ2D,IAAIZ;MAC/B,SAAcnS,MAAVuQ;QACF,OAAO;;MAET,IAAMM,IAAMf,EAAKS;MACjB,IAAMvP,IAAQ6O,EAAOU;MACrB,IAAY,MAARM,KAAuB,MAAV7P;QACf,OAAOoR;;MAGT,OAAOvB,MADM+B,KAAaC,YAAY7R;AACtB;IAGlBxL,MAAKob,IAAWL,KAEI,MAAhBT,EAAKS,MACa,MAAlBV,EAAOU,OACNqC,KAAaC,YAAYhD,EAAOU,KAAST,EAAKS;AAGrD;EAGAkC,GAAyCO;EACzCN,GACEO;EACFZ,GAMYa;EAGZtC,GAAsCuC,OAAM;EAE5C,EAAArB;IACE,IAAMlC,IAAQ,IAAI1B,UAAU1Y,MAAKoY;IACjCpY,MAAK2Z,IAAkB;IACvB3Z,MAAKoa,IAASA;IACdpa,MAAK4d,IAAkB7C;MACrB/a,MAAK2Z,KAAmBS,EAAMW;MAC9BX,EAAMW,KAAS;AAAC;IAElB/a,MAAK6d,IAAe,CAAC/C,GAAGgD,GAAGnF,GAAMmD;MAG/B,IAAI9b,MAAK4a,EAAmBkD;QAC1B,OAAO;;MAET,KAAK9F,SAASW;QACZ,IAAImD,GAAiB;UACnB,IAA+B,qBAApBA;YACT,MAAM,IAAI1Q,UAAU;;UAEtBuN,IAAOmD,EAAgBgC,GAAGhD;UAC1B,KAAK9C,SAASW;YACZ,MAAM,IAAIvN,UACR;;;UAIJ,MAAM,IAAIA,UACR;;;MAMN,OAAOuN;AAAI;IAEb3Y,MAAK+d,IAAe,CAClBhD,GACApC,GACAwE;MAEA/C,EAAMW,KAASpC;MACf,IAAI3Y,MAAKuZ,GAAU;QACjB,IAAMA,IAAUvZ,MAAKuZ,IAAWa,EAAMW;QACtC,OAAO/a,MAAK2Z,IAAkBJ;UAC5BvZ,MAAKge,GAAO;;;MAGhBhe,MAAK2Z,KAAmBS,EAAMW;MAC9B,IAAIoC,GAAQ;QACVA,EAAOc,YAAYtF;QACnBwE,EAAOe,sBAAsBle,MAAK2Z;;;AAGxC;EAEAiE,GAA0CO;EAC1CJ,GAIYK,CAACD,GAAIE,GAAIC,OAATF;EACZP,GAKqBU,CACnBC,GACAC,GACA9F,GACAmD;IAEA,IAAInD,KAAQmD;MACV,MAAM,IAAI1Q,UACR;;IAGJ,OAAO;AAAC;EAGV,IAAC8P,EAASQ,YAAEA,IAAa1b,KAAK0b,cAAe;IAC3C,IAAI1b,MAAK2Y;MACP,KAAK,IAAIvO,IAAIpK,MAAKia,GAAO,KAAQ;QAC/B,KAAKja,MAAK0e,EAActU;UACtB;;QAEF,IAAIsR,MAAe1b,MAAKob,EAAShR;gBACzBA;;QAER,IAAIA,MAAMpK,MAAKga;UACb;;UAEA5P,IAAIpK,MAAK+Z,EAAM3P;;;;AAIvB;EAEA,IAAC+Q,EAAUO,YAAEA,IAAa1b,KAAK0b,cAAe;IAC5C,IAAI1b,MAAK2Y;MACP,KAAK,IAAIvO,IAAIpK,MAAKga,GAAO,KAAQ;QAC/B,KAAKha,MAAK0e,EAActU;UACtB;;QAEF,IAAIsR,MAAe1b,MAAKob,EAAShR;gBACzBA;;QAER,IAAIA,MAAMpK,MAAKia;UACb;;UAEA7P,IAAIpK,MAAKW,EAAMyJ;;;;AAIvB;EAEA,EAAAsU,CAAc3D;IACZ,YACYvQ,MAAVuQ,KACA/a,MAAK4Z,EAAQ2D,IAAIvd,MAAK6Z,EAASkB,QAAiBA;AAEpD;EAMA,SAAC1K;IACC,KAAK,IAAMjG,KAAKpK,MAAKkb;MACnB,SACuB1Q,MAArBxK,MAAK8Z,EAAS1P,WACOI,MAArBxK,MAAK6Z,EAASzP,OACbpK,MAAK4a,EAAmB5a,MAAK8Z,EAAS1P;cAEjC,EAACpK,MAAK6Z,EAASzP,IAAIpK,MAAK8Z,EAAS1P;;;AAG7C;EAQA,UAACuU;IACC,KAAK,IAAMvU,KAAKpK,MAAKmb;MACnB,SACuB3Q,MAArBxK,MAAK8Z,EAAS1P,WACOI,MAArBxK,MAAK6Z,EAASzP,OACbpK,MAAK4a,EAAmB5a,MAAK8Z,EAAS1P;cAEjC,EAACpK,MAAK6Z,EAASzP,IAAIpK,MAAK8Z,EAAS1P;;;AAG7C;EAMA,MAACD;IACC,KAAK,IAAMC,KAAKpK,MAAKkb,KAAY;MAC/B,IAAMJ,IAAI9a,MAAK6Z,EAASzP;MACxB,SACQI,MAANsQ,MACC9a,MAAK4a,EAAmB5a,MAAK8Z,EAAS1P;cAEjC0Q;;;AAGZ;EAQA,OAAC8D;IACC,KAAK,IAAMxU,KAAKpK,MAAKmb,KAAa;MAChC,IAAML,IAAI9a,MAAK6Z,EAASzP;MACxB,SACQI,MAANsQ,MACC9a,MAAK4a,EAAmB5a,MAAK8Z,EAAS1P;cAEjC0Q;;;AAGZ;EAMA,QAAC+D;IACC,KAAK,IAAMzU,KAAKpK,MAAKkb,KAAY;MAE/B,SACQ1Q,MAFExK,MAAK8Z,EAAS1P,OAGrBpK,MAAK4a,EAAmB5a,MAAK8Z,EAAS1P;cAEjCpK,MAAK8Z,EAAS1P;;;AAG1B;EAQA,SAAC0U;IACC,KAAK,IAAM1U,KAAKpK,MAAKmb,KAAa;MAEhC,SACQ3Q,MAFExK,MAAK8Z,EAAS1P,OAGrBpK,MAAK4a,EAAmB5a,MAAK8Z,EAAS1P;cAEjCpK,MAAK8Z,EAAS1P;;;AAG1B;EAMA,CAAC2U,OAAOC;IACN,OAAOhf,KAAKqQ;AACd;EAMAiB,IAAAA,CACEuF,GACAoI,IAA4C;IAE5C,KAAK,IAAM7U,KAAKpK,MAAKkb,KAAY;MAC/B,IAAM4C,IAAI9d,MAAK8Z,EAAS1P;MACxB,IAAMjH,IAAQnD,MAAK4a,EAAmBkD,KAClCA,EAAEoB,uBACFpB;MACJ,SAActT,MAAVrH;QAAqB;;MACzB,IAAI0T,EAAG1T,GAAOnD,MAAK6Z,EAASzP,IAASpK;QACnC,OAAOA,KAAKud,IAAIvd,MAAK6Z,EAASzP,IAAS6U;;;AAG7C;EAQAjM,OAAAA,CACE6D,GACAsI,IAAanf;IAEb,KAAK,IAAMoK,KAAKpK,MAAKkb,KAAY;MAC/B,IAAM4C,IAAI9d,MAAK8Z,EAAS1P;MACxB,IAAMjH,IAAQnD,MAAK4a,EAAmBkD,KAClCA,EAAEoB,uBACFpB;MACJ,SAActT,MAAVrH;QAAqB;;MACzB0T,EAAGhM,KAAKsU,GAAOhc,GAAOnD,MAAK6Z,EAASzP,IAASpK;;AAEjD;EAMAof,QAAAA,CACEvI,GACAsI,IAAanf;IAEb,KAAK,IAAMoK,KAAKpK,MAAKmb,KAAa;MAChC,IAAM2C,IAAI9d,MAAK8Z,EAAS1P;MACxB,IAAMjH,IAAQnD,MAAK4a,EAAmBkD,KAClCA,EAAEoB,uBACFpB;MACJ,SAActT,MAAVrH;QAAqB;;MACzB0T,EAAGhM,KAAKsU,GAAOhc,GAAOnD,MAAK6Z,EAASzP,IAASpK;;AAEjD;EAMAqf,UAAAA;IACE,IAAIC,KAAU;IACd,KAAK,IAAMlV,KAAKpK,MAAKmb,EAAU;MAAEO,aAAY;;MAC3C,IAAI1b,MAAKob,EAAShR,IAAI;QACpBpK,KAAK+c,OAAO/c,MAAK6Z,EAASzP;QAC1BkV,KAAU;;;IAGd,OAAOA;AACT;EAMAC,IAAAA;IACE,IAAMC,IAAgC;IACtC,KAAK,IAAMpV,KAAKpK,MAAKkb,EAAS;MAAEQ,aAAY;QAAS;MACnD,IAAMiB,IAAM3c,MAAK6Z,EAASzP;MAC1B,IAAM0T,IAAI9d,MAAK8Z,EAAS1P;MACxB,IAAMjH,IAAuBnD,MAAK4a,EAAmBkD,KACjDA,EAAEoB,uBACFpB;MACJ,SAActT,MAAVrH,UAA+BqH,MAARmS;QAAmB;;MAC9C,IAAM8C,IAA2B;QAAEtc;;MACnC,IAAInD,MAAKsa,KAASta,MAAKqa,GAAS;QAC9BoF,EAAMpE,MAAMrb,MAAKsa,EAAMlQ;QAGvB,IAAMsV,IAAMvJ,EAAKE,QAAQrW,MAAKqa,EAAQjQ;QACtCqV,EAAMjU,QAAQ1B,KAAKC,MAAMuM,KAAKD,QAAQqJ;;MAExC,IAAI1f,MAAKoa;QACPqF,EAAM9G,OAAO3Y,MAAKoa,EAAOhQ;;MAE3BoV,EAAIG,QAAQ,EAAChD,GAAK8C;;IAEpB,OAAOD;AACT;EAOAI,IAAAA,CAAKJ;IACHxf,KAAK6f;IACL,KAAK,KAAOlD,GAAK8C,MAAUD,GAAK;MAC9B,IAAIC,EAAMjU,OAAO;QAOf,IAAMkU,IAAMpJ,KAAKD,QAAQoJ,EAAMjU;QAC/BiU,EAAMjU,QAAQ2K,EAAKE,QAAQqJ;;MAE7B1f,KAAK8f,IAAInD,GAAK8C,EAAMtc,OAAOsc;;AAE/B;EAQAK,GAAAA,CACEhF,GACAgD,GACAiC,IAA4C,CAAA;IAE5C,SAAUvV,MAANsT,GAAiB;MACnB9d,KAAK+c,OAAOjC;MACZ,OAAO9a;;IAET,KAAMqb,KACJA,IAAMrb,KAAKqb,KAAG7P,OACdA,GAAKmQ,gBACLA,IAAiB3b,KAAK2b,gBAAcG,iBACpCA,IAAkB9b,KAAK8b,iBAAeqB,QACtCA,KACE4C;IACJ,KAAInE,aAAEA,IAAc5b,KAAK4b,eAAgBmE;IAEzC,IAAMpH,IAAO3Y,MAAK6d,EAChB/C,GACAgD,GACAiC,EAAWpH,QAAQ,GACnBmD;IAIF,IAAI9b,KAAK6b,gBAAgBlD,IAAO3Y,KAAK6b,cAAc;MACjD,IAAIsB,GAAQ;QACVA,EAAO2C,MAAM;QACb3C,EAAO6C,wBAAuB;;MAGhChgB,KAAK+c,OAAOjC;MACZ,OAAO9a;;IAET,IAAI+a,IAAuB,MAAf/a,MAAK2Y,SAAcnO,IAAYxK,MAAK4Z,EAAQ2D,IAAIzC;IAC5D,SAActQ,MAAVuQ,GAAqB;MAEvBA,IACiB,MAAf/a,MAAK2Y,IACD3Y,MAAKia,IACiB,MAAtBja,MAAKka,EAAM3Z,SACXP,MAAKka,EAAMb,QACXrZ,MAAK2Y,MAAU3Y,MAAKoY,IACpBpY,MAAKge,GAAO,KACZhe,MAAK2Y;MAEX3Y,MAAK6Z,EAASkB,KAASD;MACvB9a,MAAK8Z,EAASiB,KAAS+C;MACvB9d,MAAK4Z,EAAQkG,IAAIhF,GAAGC;MACpB/a,MAAKW,EAAMX,MAAKia,KAASc;MACzB/a,MAAK+Z,EAAMgB,KAAS/a,MAAKia;MACzBja,MAAKia,IAAQc;MACb/a,MAAK2Y;MACL3Y,MAAK+d,EAAahD,GAAOpC,GAAMwE;MAC/B,IAAIA;QAAQA,EAAO2C,MAAM;;MACzBlE,KAAc;WACT;MAEL5b,MAAKib,EAAYF;MACjB,IAAMkF,IAASjgB,MAAK8Z,EAASiB;MAC7B,IAAI+C,MAAMmC,GAAQ;QAChB,IAAIjgB,MAAKwa,KAAmBxa,MAAK4a,EAAmBqF,IAAS;UAC3DA,EAAOC,kBAAkBxI,MAAM,IAAIvK,MAAM;UACzC,KAAQ+R,sBAAsB/F,KAAM8G;UACpC,SAAUzV,MAAN2O,MAAoBwC,GAAgB;YACtC,IAAI3b,MAAKua;cACPva,MAAKwZ,IAAWL,GAAQ2B,GAAG;;YAE7B,IAAI9a,MAAKya;cACPza,MAAKma,GAAW1K,KAAK,EAAC0J,GAAQ2B,GAAG;;;eAGhC,KAAKa,GAAgB;UAC1B,IAAI3b,MAAKua;YACPva,MAAKwZ,IAAWyG,GAAanF,GAAG;;UAElC,IAAI9a,MAAKya;YACPza,MAAKma,GAAW1K,KAAK,EAACwQ,GAAanF,GAAG;;;QAG1C9a,MAAK4d,EAAgB7C;QACrB/a,MAAK+d,EAAahD,GAAOpC,GAAMwE;QAC/Bnd,MAAK8Z,EAASiB,KAAS+C;QACvB,IAAIX,GAAQ;UACVA,EAAO2C,MAAM;UACb,IAAMK,IACJF,KAAUjgB,MAAK4a,EAAmBqF,KAC9BA,EAAOf,uBACPe;UACN,SAAiBzV,MAAb2V;YAAwBhD,EAAOgD,WAAWA;;;AAEjD,aAAM,IAAIhD;QACTA,EAAO2C,MAAM;;;IAGjB,IAAY,MAARzE,MAAcrb,MAAKsa;MACrBta,MAAKuc;;IAEP,IAAIvc,MAAKsa,GAAO;MACd,KAAKsB;QACH5b,MAAK6c,EAAY9B,GAAOM,GAAK7P;;MAE/B,IAAI2R;QAAQnd,MAAKkd,EAAWC,GAAQpC;;;IAEtC,KAAKY,KAAkB3b,MAAKya,KAAoBza,MAAKma,GAAW;MAC9D,IAAMiG,IAAKpgB,MAAKma;MAChB,IAAIkG;MACJ,OAAQA,IAAOD,GAAIE;QACjBtgB,MAAKyZ,OAAmB4G;;;IAG5B,OAAOrgB;AACT;EAMAqZ,GAAAA;IACE;MACE,OAAOrZ,MAAK2Y,GAAO;QACjB,IAAM4H,IAAMvgB,MAAK8Z,EAAS9Z,MAAKga;QAC/Bha,MAAKge,GAAO;QACZ,IAAIhe,MAAK4a,EAAmB2F;UAC1B,IAAIA,EAAIrB;YACN,OAAOqB,EAAIrB;;eAER,SAAY1U,MAAR+V;UACT,OAAOA;;;MAGH;MACR,IAAIvgB,MAAKya,KAAoBza,MAAKma,GAAW;QAC3C,IAAMiG,IAAKpgB,MAAKma;QAChB,IAAIkG;QACJ,OAAQA,IAAOD,GAAIE;UACjBtgB,MAAKyZ,OAAmB4G;;;;AAIhC;EAEA,EAAArC,CAAO9D;IACL,IAAMF,IAAOha,MAAKga;IAClB,IAAMc,IAAI9a,MAAK6Z,EAASG;IACxB,IAAM8D,IAAI9d,MAAK8Z,EAASE;IACxB,IAAIha,MAAKwa,KAAmBxa,MAAK4a,EAAmBkD;MAClDA,EAAEoC,kBAAkBxI,MAAM,IAAIvK,MAAM;WAC/B,IAAInN,MAAKua,KAAeva,MAAKya,GAAkB;MACpD,IAAIza,MAAKua;QACPva,MAAKwZ,IAAWsE,GAAGhD,GAAG;;MAExB,IAAI9a,MAAKya;QACPza,MAAKma,GAAW1K,KAAK,EAACqO,GAAGhD,GAAG;;;IAGhC9a,MAAK4d,EAAgB5D;IAErB,IAAIE,GAAM;MACRla,MAAK6Z,EAASG,UAAQxP;MACtBxK,MAAK8Z,EAASE,UAAQxP;MACtBxK,MAAKka,EAAMzK,KAAKuK;;IAElB,IAAmB,MAAfha,MAAK2Y,GAAa;MACpB3Y,MAAKga,IAAQha,MAAKia,IAAQ;MAC1Bja,MAAKka,EAAM3Z,SAAS;;MAEpBP,MAAKga,IAAQha,MAAKW,EAAMqZ;;IAE1Bha,MAAK4Z,EAAQmD,OAAOjC;IACpB9a,MAAK2Y;IACL,OAAOqB;AACT;EAUAxH,GAAAA,CAAIsI,GAAM0F,IAA4C;IACpD,KAAM/E,gBAAEA,IAAiBzb,KAAKyb,gBAAc0B,QAAEA,KAC5CqD;IACF,IAAMzF,IAAQ/a,MAAK4Z,EAAQ2D,IAAIzC;IAC/B,SAActQ,MAAVuQ,GAAqB;MACvB,IAAM+C,IAAI9d,MAAK8Z,EAASiB;MACxB,IACE/a,MAAK4a,EAAmBkD,WACGtT,MAA3BsT,EAAEoB;QAEF,QAAO;;MAET,KAAKlf,MAAKob,EAASL,IAAQ;QACzB,IAAIU;UACFzb,MAAKid,EAAelC;;QAEtB,IAAIoC,GAAQ;UACVA,EAAO3K,MAAM;UACbxS,MAAKkd,EAAWC,GAAQpC;;QAE1B,QAAO;AACR,aAAM,IAAIoC,GAAQ;QACjBA,EAAO3K,MAAM;QACbxS,MAAKkd,EAAWC,GAAQpC;;AAE3B,WAAM,IAAIoC;MACTA,EAAO3K,MAAM;;IAEf,QAAO;AACT;EASA/R,IAAAA,CAAKqa,GAAM2F,IAA8C;IACvD,KAAM/E,YAAEA,IAAa1b,KAAK0b,cAAe+E;IACzC,IAAM1F,IAAQ/a,MAAK4Z,EAAQ2D,IAAIzC;IAC/B,SACYtQ,MAAVuQ,MACCW,MAAe1b,MAAKob,EAASL,KAC9B;MACA,IAAM+C,IAAI9d,MAAK8Z,EAASiB;MAExB,OAAO/a,MAAK4a,EAAmBkD,KAAKA,EAAEoB,uBAAuBpB;;AAEjE;EAEA,EAAAjD,CACEC,GACAC,GACAnS,GACAoS;IAEA,IAAM8C,SAActT,MAAVuQ,SAAsBvQ,IAAYxK,MAAK8Z,EAASiB;IAC1D,IAAI/a,MAAK4a,EAAmBkD;MAC1B,OAAOA;;IAGT,IAAM4C,IAAK,IAAI3J;IACf,KAAMU,QAAEA,KAAW7O;IAEnB6O,GAAQH,iBAAiB,UAAS,MAAMoJ,EAAGhJ,MAAMD,EAAOE,UAAS;MAC/DF,QAAQiJ,EAAGjJ;;IAGb,IAAMkJ,IAAY;MAChBlJ,QAAQiJ,EAAGjJ;MACX7O;MACAoS;;IAGF,IAAM4F,KAAKA,CACT9C,GACA+C,KAAc;MAEd,KAAMxJ,SAAEA,KAAYqJ,EAAGjJ;MACvB,IAAMqJ,IAAclY,EAAQuT,yBAA0B3R,MAANsT;MAChD,IAAIlV,EAAQuU;QACV,IAAI9F,MAAYwJ,GAAa;UAC3BjY,EAAQuU,OAAO4D,gBAAe;UAC9BnY,EAAQuU,OAAO6D,aAAaN,EAAGjJ,OAAOE;UACtC,IAAImJ;YAAalY,EAAQuU,OAAO8D,qBAAoB;;;UAEpDrY,EAAQuU,OAAO+D,iBAAgB;;;MAGnC,IAAI7J,MAAYyJ,MAAgBD;QAC9B,OAAOM,UAAUT,EAAGjJ,OAAOE;;MAI7B,IAAI3X,MAAK8Z,EAASiB,OAAoB7X;QACpC,SAAUsH,MAANsT;UACF,IAHO5a,EAGAgc;YACLlf,MAAK8Z,EAASiB,KAJT7X,EAI8Bgc;;YAEnClf,KAAK+c,OAAOjC;;eAET;UACL,IAAIlS,EAAQuU;YAAQvU,EAAQuU,OAAOiE,gBAAe;;UAClDphB,KAAK8f,IAAIhF,GAAGgD,GAAG6C,EAAU/X;;;MAG7B,OAAOkV;AAAC;IAWV,IAAMqD,YAAaE;MACjB,KAAMhK,SAAEA,KAAYqJ,EAAGjJ;MACvB,IAAM6J,IACJjK,KAAWzO,EAAQsT;MACrB,IAAMR,IACJ4F,KAAqB1Y,EAAQqT;MAE/B,IAAMsF,IAAKre;MACX,IAAIlD,MAAK8Z,EAASiB,OAAoB7X,GAAG;QAIvC,MANewY,KAAc9S,EAAQmT,kCAKgBvR,MAA5B+W,EAAGrC;UAE1Blf,KAAK+c,OAAOjC;eACP,KAAKwG;UAKVthB,MAAK8Z,EAASiB,KAAkBwG,EAAGrC;;;MAGvC,IAAIxD,GAAY;QACd,IAAI9S,EAAQuU,eAAsC3S,MAA5B+W,EAAGrC;UACvBtW,EAAQuU,OAAOqE,iBAAgB;;QAEjC,OAAOD,EAAGrC;AACX,aAAM,IAAIqC,EAAGE,eAAeF;QAC3B,MAAMF;;;IA6BV,IAAIzY,EAAQuU;MAAQvU,EAAQuU,OAAOuE,mBAAkB;;IACrD,IAAMxe,IAAI,IAAIye,SA1BAC,CACZC,GACAC;MAEA,IAAMC,IAAM/hB,MAAK0Z,IAAeoB,GAAGgD,GAAG6C;MACtC,IAAIoB,KAAOA,aAAeJ;QACxBI,EAAIC,MAAKlE,KAAK+D,OAAUrX,MAANsT,SAAkBtT,IAAYsT,KAAIgE;;MAKtDpB,EAAGjJ,OAAOH,iBAAiB,UAAS;QAClC,KACG1O,EAAQuT,oBACTvT,EAAQsT,wBACR;UACA2F,OAAIrX;UAEJ,IAAI5B,EAAQsT;YACV2F,IAAM/D,KAAK8C,GAAG9C,IAAG;;;;AAGrB,QAIyBkE,KAAKpB,KAlEtBS;MACV,IAAIzY,EAAQuU,QAAQ;QAClBvU,EAAQuU,OAAO8E,iBAAgB;QAC/BrZ,EAAQuU,OAAO6D,aAAaK;;MAE9B,OAAOF,UAAUE;AAAG;IA8DtB,IAAME,IAAyBrX,OAAOK,OAAOrH,GAAG;MAC9Cgd,mBAAmBQ;MACnBxB,sBAAsBpB;MACtB2D,iBAAYjX;;IAGd,SAAcA,MAAVuQ,GAAqB;MAEvB/a,KAAK8f,IAAIhF,GAAGyG,GAAI;WAAKZ,EAAU/X;QAASuU,aAAQ3S;;MAChDuQ,IAAQ/a,MAAK4Z,EAAQ2D,IAAIzC;;MAEzB9a,MAAK8Z,EAASiB,KAASwG;;IAEzB,OAAOA;AACT;EAEA,EAAA3G,CAAmB1X;IACjB,KAAKlD,MAAKwa;MAAiB,QAAO;;IAClC,IAAM0H,IAAIhf;IACV,SACIgf,KACFA,aAAaP,WACbO,EAAEC,eAAe,2BACjBD,EAAEhC,6BAA6BnJ;AAEnC;EAwCA,WAAMqL,CACJtH,GACAuH,IAAgD;IAEhD,KAAM3G,YAEJA,IAAa1b,KAAK0b,YAAUF,gBAC5BA,IAAiBxb,KAAKwb,gBAAcQ,oBACpCA,IAAqBhc,KAAKgc,oBAAkBX,KAE5CA,IAAMrb,KAAKqb,KAAGM,gBACdA,IAAiB3b,KAAK2b,gBAAchD,MACpCA,IAAO,GAACmD,iBACRA,IAAkB9b,KAAK8b,iBAAeF,aACtCA,IAAc5b,KAAK4b,aAAWG,0BAE9BA,IAA2B/b,KAAK+b,0BAAwBE,4BACxDA,IAA6Bjc,KAAKic,4BAA0BE,kBAC5DA,IAAmBnc,KAAKmc,kBAAgBD,wBACxCA,IAAyBlc,KAAKkc,wBAAsBlB,SACpDA,GAAOsH,cACPA,KAAe,GAAKnF,QACpBA,GAAM1F,QACNA,KACE4K;IAEJ,KAAKriB,MAAKwa,GAAiB;MACzB,IAAI2C;QAAQA,EAAOiF,QAAQ;;MAC3B,OAAOpiB,KAAKud,IAAIzC,GAAG;QACjBY;QACAF;QACAQ;QACAmB;;;IAIJ,IAAMvU,IAAU;MACd8S;MACAF;MACAQ;MACAX;MACAM;MACAhD;MACAmD;MACAF;MACAG;MACAE;MACAC;MACAC;MACAgB;MACA1F;;IAGF,IAAIsD,IAAQ/a,MAAK4Z,EAAQ2D,IAAIzC;IAC7B,SAActQ,MAAVuQ,GAAqB;MACvB,IAAIoC;QAAQA,EAAOiF,QAAQ;;MAC3B,IAAMlf,IAAIlD,MAAK6a,EAAiBC,GAAGC,GAAOnS,GAASoS;MACnD,OAAQ9X,EAAEue,aAAave;WAClB;MAEL,IAAM4a,IAAI9d,MAAK8Z,EAASiB;MACxB,IAAI/a,MAAK4a,EAAmBkD,IAAI;QAC9B,IAAMyE,IACJ7G,UAAyClR,MAA3BsT,EAAEoB;QAClB,IAAI/B,GAAQ;UACVA,EAAOiF,QAAQ;UACf,IAAIG;YAAOpF,EAAOqE,iBAAgB;;;QAEpC,OAAOe,IAAQzE,EAAEoB,uBAAwBpB,EAAE2D,aAAa3D;;MAK1D,IAAM1C,IAAUpb,MAAKob,EAASL;MAC9B,KAAKuH,MAAiBlH,GAAS;QAC7B,IAAI+B;UAAQA,EAAOiF,QAAQ;;QAC3BpiB,MAAKib,EAAYF;QACjB,IAAIS;UACFxb,MAAKid,EAAelC;;QAEtB,IAAIoC;UAAQnd,MAAKkd,EAAWC,GAAQpC;;QACpC,OAAO+C;;MAKT,IAAM5a,IAAIlD,MAAK6a,EAAiBC,GAAGC,GAAOnS,GAASoS;MAEnD,IAAMwH,SADsChY,MAA3BtH,EAAEgc,wBACUxD;MAC7B,IAAIyB,GAAQ;QACVA,EAAOiF,QAAQhH,IAAU,UAAU;QACnC,IAAIoH,KAAYpH;UAAS+B,EAAOqE,iBAAgB;;;MAElD,OAAOgB,IAAWtf,EAAEgc,uBAAwBhc,EAAEue,aAAave;;AAE/D;EAQAqa,GAAAA,CAAIzC,GAAMmE,IAA4C;IACpD,KAAMvD,YACJA,IAAa1b,KAAK0b,YAAUF,gBAC5BA,IAAiBxb,KAAKwb,gBAAcQ,oBACpCA,IAAqBhc,KAAKgc,oBAAkBmB,QAC5CA,KACE8B;IACJ,IAAMlE,IAAQ/a,MAAK4Z,EAAQ2D,IAAIzC;IAC/B,SAActQ,MAAVuQ,GAAqB;MACvB,IAAM5X,IAAQnD,MAAK8Z,EAASiB;MAC5B,IAAM0H,IAAWziB,MAAK4a,EAAmBzX;MACzC,IAAIga;QAAQnd,MAAKkd,EAAWC,GAAQpC;;MACpC,IAAI/a,MAAKob,EAASL,IAAQ;QACxB,IAAIoC;UAAQA,EAAOI,MAAM;;QAEzB,KAAKkF,GAAU;UACb,KAAKzG;YACHhc,KAAK+c,OAAOjC;;UAEd,IAAIqC,KAAUzB;YAAYyB,EAAOqE,iBAAgB;;UACjD,OAAO9F,IAAavY,SAAQqH;eACvB;UACL,IACE2S,KACAzB,UAC+BlR,MAA/BrH,EAAM+b;YAEN/B,EAAOqE,iBAAgB;;UAEzB,OAAO9F,IAAavY,EAAM+b,4BAAuB1U;;aAE9C;QACL,IAAI2S;UAAQA,EAAOI,MAAM;;QAMzB,IAAIkF;UACF,OAAOtf,EAAM+b;;QAEflf,MAAKib,EAAYF;QACjB,IAAIS;UACFxb,MAAKid,EAAelC;;QAEtB,OAAO5X;;AAEV,WAAM,IAAIga;MACTA,EAAOI,MAAM;;AAEjB;EAEA,EAAAmF,CAASxf,GAAU+U;IACjBjY,MAAK+Z,EAAM9B,KAAK/U;IAChBlD,MAAKW,EAAMuC,KAAK+U;AAClB;EAEA,EAAAgD,CAAYF;IASV,IAAIA,MAAU/a,MAAKia,GAAO;MACxB,IAAIc,MAAU/a,MAAKga;QACjBha,MAAKga,IAAQha,MAAKW,EAAMoa;;QAExB/a,MAAK0iB,EACH1iB,MAAK+Z,EAAMgB,IACX/a,MAAKW,EAAMoa;;MAGf/a,MAAK0iB,EAAS1iB,MAAKia,GAAOc;MAC1B/a,MAAKia,IAAQc;;AAEjB;EAMAgC,OAAOjC;IACL,IAAIwE,KAAU;IACd,IAAmB,MAAftf,MAAK2Y,GAAa;MACpB,IAAMoC,IAAQ/a,MAAK4Z,EAAQ2D,IAAIzC;MAC/B,SAActQ,MAAVuQ,GAAqB;QACvBuE,KAAU;QACV,IAAmB,MAAftf,MAAK2Y;UACP3Y,KAAK6f;eACA;UACL7f,MAAK4d,EAAgB7C;UACrB,IAAM+C,IAAI9d,MAAK8Z,EAASiB;UACxB,IAAI/a,MAAK4a,EAAmBkD;YAC1BA,EAAEoC,kBAAkBxI,MAAM,IAAIvK,MAAM;iBAC/B,IAAInN,MAAKua,KAAeva,MAAKya,GAAkB;YACpD,IAAIza,MAAKua;cACPva,MAAKwZ,IAAWsE,GAAQhD,GAAG;;YAE7B,IAAI9a,MAAKya;cACPza,MAAKma,GAAW1K,KAAK,EAACqO,GAAQhD,GAAG;;;UAGrC9a,MAAK4Z,EAAQmD,OAAOjC;UACpB9a,MAAK6Z,EAASkB,UAASvQ;UACvBxK,MAAK8Z,EAASiB,UAASvQ;UACvB,IAAIuQ,MAAU/a,MAAKia;YACjBja,MAAKia,IAAQja,MAAK+Z,EAAMgB;iBACnB,IAAIA,MAAU/a,MAAKga;YACxBha,MAAKga,IAAQha,MAAKW,EAAMoa;iBACnB;YACL/a,MAAKW,EAAMX,MAAK+Z,EAAMgB,MAAU/a,MAAKW,EAAMoa;YAC3C/a,MAAK+Z,EAAM/Z,MAAKW,EAAMoa,MAAU/a,MAAK+Z,EAAMgB;;UAE7C/a,MAAK2Y;UACL3Y,MAAKka,EAAMzK,KAAKsL;;;;IAItB,IAAI/a,MAAKya,KAAoBza,MAAKma,GAAW5Z,QAAQ;MACnD,IAAM6f,IAAKpgB,MAAKma;MAChB,IAAIkG;MACJ,OAAQA,IAAOD,GAAIE;QACjBtgB,MAAKyZ,OAAmB4G;;;IAG5B,OAAOf;AACT;EAKAO,KAAAA;IACE,KAAK,IAAM9E,KAAS/a,MAAKmb,EAAU;MAAEO,aAAY;QAAS;MACxD,IAAMoC,IAAI9d,MAAK8Z,EAASiB;MACxB,IAAI/a,MAAK4a,EAAmBkD;QAC1BA,EAAEoC,kBAAkBxI,MAAM,IAAIvK,MAAM;aAC/B;QACL,IAAM2N,IAAI9a,MAAK6Z,EAASkB;QACxB,IAAI/a,MAAKua;UACPva,MAAKwZ,IAAWsE,GAAQhD,GAAQ;;QAElC,IAAI9a,MAAKya;UACPza,MAAKma,GAAW1K,KAAK,EAACqO,GAAQhD,GAAQ;;;;IAK5C9a,MAAK4Z,EAAQiG;IACb7f,MAAK8Z,EAASjB,UAAKrO;IACnBxK,MAAK6Z,EAAShB,UAAKrO;IACnB,IAAIxK,MAAKsa,KAASta,MAAKqa,GAAS;MAC9Bra,MAAKsa,EAAMzB,KAAK;MAChB7Y,MAAKqa,EAAQxB,KAAK;;IAEpB,IAAI7Y,MAAKoa;MACPpa,MAAKoa,EAAOvB,KAAK;;IAEnB7Y,MAAKga,IAAQ;IACbha,MAAKia,IAAQ;IACbja,MAAKka,EAAM3Z,SAAS;IACpBP,MAAK2Z,IAAkB;IACvB3Z,MAAK2Y,IAAQ;IACb,IAAI3Y,MAAKya,KAAoBza,MAAKma,GAAW;MAC3C,IAAMiG,IAAKpgB,MAAKma;MAChB,IAAIkG;MACJ,OAAQA,IAAOD,GAAIE;QACjBtgB,MAAKyZ,OAAmB4G;;;AAG9B;;;;;;;AC3wEF,IAAMsC,IAAa;EAClB,IAAI;EACJ,IAAI;EACJ,KAAK;EACL,KAAK;EACL,KAAK;EACL,MAAM;;;AAGP,IAAMC,IAAc;EACnB,IAAI;EACJ,IAAI;EACJ,KAAK;EACL,KAAK;EACL,KAAK;EACL,MAAM;;;AAsDPC,EAAcC,UAlDd,SAASC,MAAMC;EAEd,IAAIC,IAAOxf,OAAOmf,EAAY;EAC9B,IAAIM,KAAa;EAEjB,KAAK,IAAI9Y,IAAI,GAAGA,IAAI4Y,EAAOziB,QAAQ6J,KAAK;IACvC,IAAI+Y,IAAgBH,EAAOzgB,WAAW6H;IAGtC,IAAI+Y,IAAgB,QAASD,GAAY;MAExCC,KADAH,IAASI,SAASC,mBAAmBL,KACdzgB,WAAW6H;MAClC8Y,KAAa;AACb;IAEDD,KAAQE;IACRF,MAASA,KAAQ,MAAMA,KAAQ,MAAMA,KAAQ,MAAMA,KAAQ,MAAMA,KAAQ;AACzE;EAED,OAAOA,MAAS;AACjB;;AA+BAJ,EAAAC,QAAAQ,SA7BA,SAASA,OAAON,IAAQrK,MAACA,IAAO,MAAM;EACrC,KAAKgK,EAAWhK;IACf,MAAM,IAAIxL,MAAM;;EAGjB,IAAI8V,IAAOL,EAAYjK;EACvB,IAAM4K,IAAWZ,EAAWhK;EAG5B,IAAIuK,KAAa;EAEjB,KAAK,IAAI9Y,IAAI,GAAGA,IAAI4Y,EAAOziB,QAAQ6J,KAAK;IACvC,IAAI+Y,IAAgBH,EAAOzgB,WAAW6H;IAGtC,IAAI+Y,IAAgB,QAASD,GAAY;MAExCC,KADAH,IAASI,SAASC,mBAAmBL,KACdzgB,WAAW6H;MAClC8Y,KAAa;AACb;IAEDD,KAAQO,OAAOL;IACfF,IAAOO,OAAOC,QAAQ9K,GAAMsK,IAAOM;AACnC;EAED,OAAON;AACR;;;;ACnEO,IAAMS,IAAoB;;AAEjC,IAAMC,qBAAsB7c,KACnBA,EAAK8c,0BACR9c,EAAK+c,MAAMvS,MAAKxK,KAAQA,EAAKgd,QAAQlkB,QAAEA,GAACmkB,UAAU7Z,YAAWpD,IAC7DA;;AAGN,IAAMkd,yBACJxY;EAEA,IAAIsC,IAAgBtC;EACpB,IAAMyY,IAAO,IAAIrT;EACjB,OAAO9C,EAAKsE,WAAW6R,EAAKzR,IAAI1E,IAAO;IACrCmW,EAAKxH,IAAI3O;IACT,IAAIlO,QAAEA,GAACskB,QAAQpW;MACb;WACK,IAAIlO,QAAEA,GAACuS,sBAAuBrE,IAAOA,EAAKsE;MAC/C,OAAOtE;;AAEX;AAAA;;AAGF,IAAMqW,6BAA6BA,CACjCrW,GACAsW,GACAC,GACAvV,GACAgC,MAEOhD,EAAKiF,SAAShD,SAAQ4B;EAC3B,IAAI/R,QAAEA,GAAC0kB,oBAAoB3S;IAAU,OAAO;;EAE5C,IAAM4S,IAAM,KAAIH;EAChB,OAAOxkB,QAAAA,GAAGqT,aAAatB,EAAQvN,QAC3BogB,WAAW7S,EAAQvN,MAAMmgB,GAAKF,GAAWvV,GAAQgC,IAAM,KACvDlR,QAAEA,GAAC6kB,uBAAuB9S,EAAQvN,QAClCsgB,sBAAsB/S,EAAQvN,MAAMmgB,GAAKF,GAAWvV,GAAQgC,KAC5DqT,2BAA2BxS,EAAQvN,MAAMmgB,GAAKF,GAAWvV,GAAQgC;AAAK;;AAI9E,IAAM4T,wBAAwBA,CAC5B5W,GACAsW,GACAC,GACAvV,GACAgC;EAEA,IAAM6T,IAAU;EAAG,IAAAC,QAAAA;IAEjB,IAAIhlB,WAAG6kB,uBAAuBI,EAAQzgB,OAAO;MAC3C,IAAMmgB,IAAM,KAAIH;MAChB,IACES,EAAQC,iBACPV,EAAYxU,SAASiV,EAAQC,aAAapS,YAC3C;QACA,IAAMqS,IAAS,KAAIR,GAAKM,EAAQC,aAAapS,YAAWsS,KAAK;QAC7D,IAAIX,EAAU/S,MAAK2T,KAAKA,EAAEljB,WAAWgjB;UACnCR,EAAI9U,KAAKoV,EAAQC,aAAapS;;AAElC;MACA,IAAMwS,IAAiBR,sBACrBG,EAAQzgB,MACRmgB,GACAF,GACAvV,GACAgC;MAGF6T,EAAQlV,QAAQyV;AACjB,WAAM,IAAItlB,QAAAA,GAAGqT,aAAa4R,EAAQzgB,OAAO;MACxC,IAAMmgB,IAAM,KAAIH;MAChB,IACES,EAAQC,iBACPV,EAAYxU,SAASiV,EAAQC,aAAapS,YAC3C;QACA,IAAMqS,IAAS,KAAIR,GAAKM,EAAQC,aAAapS,YAAWsS,KAAK;QAC7D,IAAIX,EAAU/S,MAAK2T,KAAKA,EAAEljB,WAAWgjB;UACnCR,EAAI9U,KAAKoV,EAAQC,aAAapS;;AAElC,aAAO;QACL,IAAMqS,IAAS,KAAIR,GAAKM,EAAQzgB,KAAKsO,YAAWsS,KAAK;QACrD,IAAIX,EAAU/S,MAAK2T,KAAKA,EAAEljB,WAAWgjB;UACnCR,EAAI9U,KAAKoV,EAAQzgB,KAAKsO;;AAE1B;MAEA,IAAMyS,IAAcX,WAClBK,EAAQzgB,MACRmgB,GACAF,GACAvV,GACAgC,IACA;MAGF6T,EAAQlV,QAAQ0V;AAClB;;EAhDF,KAAK,IAAMN,KAAW/W,EAAKiF;IAAQ6R;;EAmDnC,OAAOD;AAAO;;AAGhB,IAAMS,IAAe,IAAIxU,IAAI,EAC3B,OACA,UACA,WACA,UACA,SACA,QACA,QACA,WACA;;AAGF,IAAM4T,aAAaA,CACjB1W,GACAsW,GACAC,GACAvV,GACAgC,GACAuU;EAEA,IAAIzlB,QAAEA,GAAC6kB,uBAAuB3W;IAC5B,OAAO4W,sBAAsB5W,GAAMsW,GAAaC,GAAWvV,GAAQgC;SAC9D,IAAIlR,QAAEA,GAAC0lB,sBAAsBxX;IAClC,OAAOqW,2BACLrW,GACAsW,GACAC,GACAvV,GACAgC;;EAIJ,IAAI6T,IAAoB;EAExB,IAAMY,IAAazU,EAAKG,gBAAgBuU,wBACtC1W,EAAOgD,UACPhE,EAAKyD;EAGP,KAAKgU;IAAY,OAAOZ;;EAgKxB,OA3JAA,IAAUY,EAAWxV,SAAQ0V;IAE3B,IAAIA,EAAI3T,aAAahD,EAAOgD;MAAU,OAAO;;IAG7C,IACEhE,EAAKyD,cAAckU,EAAIvT,SAAS1G,SAChCsC,EAAK0D,YAAYiU,EAAIvT,SAAS1G,QAAQia,EAAIvT,SAAS3R;MAEnD,OAAO;;IAET,IAAImlB,IAAWtU,SAAStC,GAAQ2W,EAAIvT,SAAS1G;IAC7C,KAAKka;MAAU,OAAO;;IAEtB,IAAMC,IAAY,KAAIvB;IAOtB,IAiICwB,GAjIDC,SAAAA;MAUE,KACGR,MACAzlB,QAAEA,GAACkmB,kBAAkBJ,MAAa9lB,WAAGmmB,gBAAgBL,KACtD;QAGA,IAAMX,IAASY,EAAUX,KAAK;QACyC,OAAA;UAAAlH,GAAlDuG,EAAUjV,QAAO6V,KAAKA,EAAEljB,WAAWgjB,IAAS;;AAElE,aAAM,IAAInlB,QAAEA,GAACuS,sBAAsBuT;QAAW,OAAA;UAAA5H,GACtC0G,WACLkB,EAASthB,MACTuhB,GACAtB,GACAvV,GACAgC,IACA;;aAEG,IACLlR,QAAAA,GAAGqT,aAAayS,OACfC,EAAU/V,SAAS8V,EAAS/P,OAC7B;QACA,IAAMoP,IAAS,KAAIY,GAAWD,EAAS/P,OAAMqP,KAAK;QAClD,IAAIX,EAAU/S,MAAK2T,KAAKA,EAAEljB,WAAWgjB,IAAS;UAC5CY,EAAUlW,KAAKiW,EAAS/P;;AAE3B,aAAM,IACL/V,QAAAA,GAAG8T,2BAA2BgS,MACP,SAAvBA,EAASthB,KAAKuR,QACd/V,QAAEA,GAAC0S,iBAAiBoT,EAAStT;QAE7BsT,IAAWA,EAAStT;aACf,IACLxS,QAAEA,GAAC8T,2BAA2BgS,MAC9BN,EAAa5S,IAAIkT,EAASthB,KAAKuR,SAC/B/V,QAAEA,GAAC0S,iBAAiBoT,EAAStT,SAC7B;QACA,IAAM4T,IAAkC,aAAvBN,EAASthB,KAAKuR;QAC/B,IAAMsQ,IACmB,YAAvBP,EAASthB,KAAKuR,QAA2C,WAAvB+P,EAASthB,KAAKuR;QAClD,IAAMuQ,IAAiBR,EAAStT;QAChC,IAAI+T,IACFD,EAAerT,UAAU;QAE3B,IAAIjT,QAAEA,GAACqT,aAAakT,IAAO;UAEzB,IAAMC,IAAUtV,EAAKG,gBAAgBC,aAAcmV;UAEnD,IAAM/R,IACJ8R,EAAQE,oBAAoBH,IAAOI;UACrC,IAAIjS,KAAe1U,QAAAA,GAAG4mB,sBAAsBlS;YAC1C6R,IAAO7R;iBACF,IACLA,KACA1U,WAAGuS,sBAAsBmC,MACzBA,EAAYjC;YAEZ8T,IAAO7R,EAAYjC;;AAEvB;QAEA,IACEzS,WAAG4mB,sBAAsBL,MACzBvmB,QAAEA,GAAC6mB,qBAAqBN,MACxBvmB,QAAAA,GAAGmmB,gBAAgBI,IACnB;UAEA,IAAMtE,IAAM2C,WADE2B,EAAKO,WAAWV,IAAW,IAAI,GAErC5hB,MACNuhB,GACAtB,GACAvV,GACAgC,IACA;UAGF,IACElR,QAAAA,GAAGuS,sBAAsB+T,EAAe9T,YACvC6T,GACD;YACA,IAAMU,IAASnC,WACb0B,EAAe9T,OAAOhO,MACtBuhB,GACAtB,GACAvV,GACAgC,IACA;YAEF+Q,EAAIpS,QAAQkX;AACd;UAAC,OAAA;YAAA7I,GAEM+D;;AACT;AACD,aAAM,IACLjiB,QAAEA,GAAC8T,2BAA2BgS,OAC7BC,EAAU/V,SAAS8V,EAASthB,KAAKuR,OAClC;QACA,IAAMoP,IAAS,KAAIY,GAAWD,EAASthB,KAAKuR,OAAMqP,KAAK;QACvD,IAAIX,EAAU/S,MAAK2T,KAAKA,EAAEljB,WAAWgjB;UACnCY,EAAUlW,KAAKiW,EAASthB,KAAKuR;;AAEjC,aAAO,IACL/V,QAAEA,GAACgnB,0BAA0BlB,MAC7B9lB,QAAAA,GAAG8U,gBAAgBgR,EAASmB,wBAC3BlB,EAAU/V,SAAS8V,EAASmB,mBAAmBlR,OAChD;QACA,IAAMoP,IAAS,KAAIY,GAAWD,EAASmB,mBAAmBlR,OAAMqP,KAC9D;QAEF,IAAIX,EAAU/S,MAAK2T,KAAKA,EAAEljB,WAAWgjB;UACnCY,EAAUlW,KAAKiW,EAASmB,mBAAmBlR;;AAE/C;MAEA,IAAI/V,WAAGknB,oBAAoBpB,EAAStT;QAClCsT,IAAWA,EAAStT,OAAOA;;QAE3BsT,IAAWA,EAAStT;;AAEvB;IAhID,OACExS,WAAGqT,aAAayS,MAChB9lB,QAAAA,GAAG8T,2BAA2BgS,MAC9B9lB,QAAEA,GAACgnB,0BAA0BlB,MAC7B9lB,QAAEA,GAACuS,sBAAsBuT,MACzB9lB,QAAAA,GAAGmnB,mBAAmBrB,MACtB9lB,QAAAA,GAAGkmB,kBAAkBJ,MACrB9lB,QAAAA,GAAGmmB,gBAAgBL;MAAS,IAAAE,IAAAC;QAAA,OAAAD,EAAA9H;;;IA2H9B,OAAO6H,EAAUX,KAAK;AAAI;AAGd;;ACvST,IAAMgC,4BAA4BA,CACvClY,GACAgC;EAKA,IAAMmW,ILwPD,SAASC,eACd7V;IAEA,OAAOA,EAAW8V,WAAW/X,OAAOxP,QAAEA,GAACwnB;AACzC,GK5PkBF,CAAepY;EAC/B,IAAMuY,IAAcvW,EAAKG,gBAAgBC,cAAcmV;EAEvD,IAAMiB,IAGF,CAAA;EAEJ,KAAKD;IAAa,OAAOC;;EAEzB,IAAIL,EAAQ1mB;IACV0mB,EAAQjU,SAAQuU;MACd,KAAKA,EAAIC;QAAc;;MAEvB,IAAID,EAAIC,aAAapjB,MAAM;QACzB,IAAMwN,IAAcd,EAAKG,gBAAgBY,wBACvC/C,EAAOgD,UACPyV,EAAIC,aAAapjB,KAAKmN;QAExB,IAAIK,KAAeA,EAAYrR,QAAQ;UACrC,KAAO0T,KAAOrC;UACd,IAAIqC,EAAInC,SAASlC,SAAS;YAAiB;;UAE3C,IAAMoC,IAAiBnB,UAAUC,GAAMmD,EAAInC;UAC3C,KAAKE;YAAgB;;UAQrB,IAAMyV,IANqBC,qBACzB1V,GACAqV,GACAvW,GAG+BsE,KAAIrD,KAAYA,EAAS3N,KAAKjB;UAC/D,IACEskB,EAAMlnB,WACL+mB,EAA2BC,EAAII,gBAAgBjV;YAEhD4U,EAA2BC,EAAII,gBAAgBjV,aAAa;cAC1DlH,OAAO+b,EAAII,gBAAgBpW;cAC3BhR,QAAQgnB,EAAII,gBAAgBjV,UAAUnS;cACtCoN,WAAW8Z;;iBAER,IAAIA,EAAMlnB;YACf+mB,EACEC,EAAII,gBAAgBjV,WACpB/E,YACA2Z,EACEC,EAAII,gBAAgBjV,WACpB/E,UAAUjD,OAAO+c;;AAEzB;AACF;MAEA,IACEF,EAAIC,aAAaI,iBACjBhoB,QAAAA,GAAGioB,kBAAkBN,EAAIC,aAAaI,gBACtC;QACA,IAAMhW,IAAcd,EAAKG,gBAAgBY,wBACvC/C,EAAOgD,UACPyV,EAAIC,aAAaI,cAAcrW;QAEjC,IAAIK,KAAeA,EAAYrR,QAAQ;UACrC,KAAO0T,KAAOrC;UACd,IAAIqC,EAAInC,SAASlC,SAAS;YAAiB;;UAE3C,IAAMoC,IAAiBnB,UAAUC,GAAMmD,EAAInC;UAC3C,KAAKE;YAAgB;;UAOrB,IAAMyV,IALqBC,qBACzB1V,GACAqV,GACAvW,GAE+BsE,KAAIrD,KAAYA,EAAS3N,KAAKjB;UAC/D,IACEskB,EAAMlnB,WACL+mB,EAA2BC,EAAII,gBAAgBjV;YAEhD4U,EAA2BC,EAAII,gBAAgBjV,aAAa;cAC1DlH,OAAO+b,EAAII,gBAAgBpW;cAC3BhR,QAAQgnB,EAAII,gBAAgBjV,UAAUnS;cACtCoN,WAAW8Z;;iBAER,IAAIA,EAAMlnB;YACf+mB,EACEC,EAAII,gBAAgBjV,WACpB/E,YACA2Z,EACEC,EAAII,gBAAgBjV,WACpB/E,UAAUjD,OAAO+c;;AAEzB;AACF,aAAO,IACLF,EAAIC,aAAaI,iBACjBhoB,QAAAA,GAAGkoB,sBAAsBP,EAAIC,aAAaI;QAE1CL,EAAIC,aAAaI,cAAc7U,SAASC,SAAQW;UAC9C,IAAM/B,IAAcd,EAAKG,gBAAgBY,wBACvC/C,EAAOgD,UACP6B,EAAGpC;UAEL,IAAIK,KAAeA,EAAYrR,QAAQ;YACrC,KAAO0T,KAAOrC;YACd,IAAIqC,EAAInC,SAASlC,SAAS;cAAiB;;YAE3C,IAAMoC,IAAiBnB,UAAUC,GAAMmD,EAAInC;YAC3C,KAAKE;cAAgB;;YAOrB,IAAMyV,IALqBC,qBACzB1V,GACAqV,GACAvW,GAE+BsE,KAC/BrD,KAAYA,EAAS3N,KAAKjB;YAE5B,IACEskB,EAAMlnB,WACL+mB,EAA2BC,EAAII,gBAAgBjV;cAEhD4U,EAA2BC,EAAII,gBAAgBjV,aAAa;gBAC1DlH,OAAO+b,EAAII,gBAAgBpW;gBAC3BhR,QAAQgnB,EAAII,gBAAgBjV,UAAUnS;gBACtCoN,WAAW8Z;;mBAER,IAAIA,EAAMlnB;cACf+mB,EACEC,EAAII,gBAAgBjV,WACpB/E,YACA2Z,EACEC,EAAII,gBAAgBjV,WACpB/E,UAAUjD,OAAO+c;;AAEzB;AAAA;;AAEJ;;EAIJ,OAAOH;AAA0B;;AAGnC,SAASI,qBACPxT,GACAmT,GACAvW;EAEA,IAAInD,IAA2C;EAC/C,IAAMoa,IAAkB1U,uBAAuBa,GAAKpD,IAAM;EAE1D,IAAMkX,IAASX,EAAYf,oBAAoBpS;EAC/C,KAAK8T;IAAQ,OAAO;;EAGpB,IAAMC,IADUZ,EAAYa,mBAAmBF,GACjB5S,KAAI+S,KAAQA,EAAK/jB;EACjC2jB,EAAgBlY,MAAMT,QAAO6V;IACzC,IAAI7S,IAAS6S,EAAE7S;IACf,OACEA,MACCxS,QAAEA,GAACwoB,aAAahW,OAChBxS,QAAEA,GAACuS,sBAAsBC;MAE1BA,IAASA,EAAOA;;IAGlB,IAAIxS,QAAEA,GAACuS,sBAAsBC;MAC3B,OAAO6V,EAAcrY,SAASwC,EAAOhO,KAAKsO;;MAE1C,QAAO;;AACT,MAGIM,SAAQlF;IACZ,IAAM6H,IAAOb,gBAAgBhH,GAAMoG,EAAIpC,UAAUhB,GAAMiE;IACvD;MACE,IAAMsT,IAASpa,EAAKA,MAAC0H,GAAM;QAAEzC,aAAY;;MACzC,IAAImV,EAAOzW,YAAYlM,OAAMuf,KAAKA,EAAEjiB,SAASe,OAAKC;QAChD2J,IAAYA,EAAUjD,OAAO2d,EAAOzW;;AAEvC,MAAC,OAAOwB;MACP;AACF;AAAA;EAGF,OAAOzF;AACT;;ACzCO,IAAM2a,0BAA0BA,CACrCxX,GACAyX,GAGAC;EAEA,IAAMxW,IAAiBnB,UAAUC,GAAM0X;EACvC,KAAM7a,WAAEA,KAAc0F,uBAAuBrB,GAAgBlB;EAE7D,IAAM6E,IAAOb,gBACXyT,GACAC,GACA1X,GACAiE;EACF,IAAMsT;;;;;;;;;;;;;;;GAASpa,CAAM0H;EACrB,IAAM8S,IAAU,IAAI7X;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACpB8X,CAAML,GAAQ;IACZnjB,gBAAgB4I;MACd2a,EAAQhM,IAAI3O,EAAK1J,KAAKjB;AAAM;;EAIhC,IAAIwlB,IAAehT;EACnB,KAAI8S,IAASzV,SAAQ4V;IACnB,IAAMC,IAAqBlb,EAAU2D,MAAK2T,KAAKA,EAAE7gB,KAAKjB,UAAUylB;IAChE,KAAKC,GAAoB;MACvB/R,QAAQgS,KACL,kDAAiDF;MAEpD;AACF;IAEAD,IAAgB,GAAEA,QAAmB5a,MAAM8a;AAAqB;EAGlE,OAAOE,EAAAA,WAAW,UAAU/iB,OAAO2P,GAAMqT,OAAO;AAAM;;AAGjD,IAAMC,oCAAoCA,CAC/CC,GACAnY,GACAD;EAIA,IAAMyU,IAAazU,EAAKG,gBAAgBuU,wBACtCzU,GACAmY,EAAUC,SAAS5X;EAGrB,KAAKgU;IAAY,OAAO;MAAEzX,MAAM;MAAMiD;;;EAEtC,IAAIkB,IAAkC;EACtC,IAAIuW,IAAgBzX;EACpBwU,EAAWvS,SAAQyS;IACjB,IAAIxT;MAAO;;IAEX,IAAMnD,IAAS+B,UAAUC,GAAM2U,EAAI3T;IACnC,KAAKhD;MAAQ;;IACb,IAAMsa,IAAYhY,SAAStC,GAAQ2W,EAAIvT,SAAS1G;IAChD,KAAK4d;MAAW;;IAEhB,IACExpB,QAAEA,GAACuS,sBAAsBiX,EAAUhX,WACnCgX,EAAUhX,OAAOC,eACjBzS,QAAEA,GAAC0S,iBAAiB8W,EAAUhX,OAAOC,gBACrC1B,EAAU6B,IAAI4W,EAAUhX,OAAOC,YAAYI,WAAWC,YACtD;MACAT,IAAQmX,EAAUhX,OAAOC;MACzBmW,IAAgB/C,EAAI3T;AACtB;AAAA;EAGF,OAAO;IAAEhE,MAAMmE;IAAOlB,UAAUyX;;AAAe;;AAG1C,IAAMa,uCAAuCA,CAClDC,GACAvY,GACAD;EAEA,IAAIlR,QAAEA,GAACqT,aAAaqW,IAAuB;IAGzC,IAAM/D,IAAazU,EAAKG,gBAAgBuU,wBACtCzU,GACAuY,EAAqB/X;IAGvB,KAAKgU;MAAY,OAAO;QAAEzX,MAAM;QAAMiD;;;IAEtC,IAAIkB,IAAkC;IACtC,IAAIuW,IAAgBzX;IACpBwU,EAAWvS,SAAQyS;MACjB,IAAIxT;QAAO;;MAEX,IAAMnD,IAAS+B,UAAUC,GAAM2U,EAAI3T;MACnC,KAAKhD;QAAQ;;MACb,IAAMsa,IAAYhY,SAAStC,GAAQ2W,EAAIvT,SAAS1G;MAChD,KAAK4d;QAAW;;MAEhB,IACExpB,QAAEA,GAACuS,sBAAsBiX,EAAUhX,WACnCgX,EAAUhX,OAAOC,eACjBzS,QAAEA,GAAC0S,iBAAiB8W,EAAUhX,OAAOC,gBACrC1B,EAAU6B,IAAI4W,EAAUhX,OAAOC,YAAYI,WAAWC,YACtD;QACAT,IAAQmX,EAAUhX,OAAOC;QACzBmW,IAAgB/C,EAAI3T;AACtB;AAAA;IAGF,OAAO;MAAEhE,MAAMmE;MAAOlB,UAAUyX;;AAClC;IACE,OAAO;MAAE1a,MAAMwb;MAAsBvY;;;AACvC;;ACxPF,IAAMwY,IAAmB,IAAI3Y,IAAI,EAC/B,YACA,UACA,WACA,aACA,oBACA,qBACA,aACA,YACA,YACA,aACA,uBACA,cACA,eACA,SACA,YACA;;AAMK,IAAM4Y,IAA6B;;AACnC,IAAMC,IAA6B;;AACnC,IAAMC,IAA6B;;AACnC,IAAMC,IAA6B;;AACnC,IAAMC,IAAkB,EAPS,OACG,OACA,OF1CN,OEoDnClG,GACA8F,GACAC,GACAC,GACAC;;AAGF,IAAME,IAAQ,IAAIvQ,SAAkC;EAElD+B,KAAK;EACLjD,KAAK;;;AA8PP,IAAM0R,iBAAiBA,CACrBhb,IAEEe,UACAlC,eAKFL,GACAwD;EAEA,IAAMC,IAAWjC,EAAOgD;EACxB,IAAMQ,IAAmBxB,EAAKiZ,OAAOC,6BAA4B;EAEjE,IAAMC,IAAcpa,EACjBuF,KAAI8U;IACH,IAAIpc,IAAOoc;IACX,KACG5X,MACA1S,QAAEA,GAACgU,gCAAgC9F,MAClClO,WAAGuqB,qBAAqBrc;MAE1B,IAAIlO,WAAG8V,2BAA2B5H,EAAKsE;QACrCtE,IAAOA,EAAKsE;;QAEZ;;;IAIJ,KAAQ2C,cAAcY,GAAIX,eAAEA,KAAkBF,gBAC5ChH,GACAiD,GACAD;IAEF,IAAMrC,IAAQkH,EAAKjH,MAAM;IAEzB,IAAI0b,KAAe;IACnB,IAAIxqB,WAAGoW,eAAelI,EAAKsE;MACzB,IAAIxS,QAAEA,GAACyqB,sBAAsBvc,EAAKsE,OAAOA;QACvCgY,KAAe;;WAEZ,IAAIxqB,QAAAA,GAAGyqB,sBAAsBvc,EAAKsE;MACvCgY,KAAe;;IAKjB,IAAIE,IACFxc,EAAKyD,cACJe,IACG,IACCxE,EAAqCyc,IAAI7X,UAAUnS,UACnD6pB,IAAe,IAAI;IAC1B,IAAMI,IAAcF,IAAmBxc,EAAK4E,UAAUnS;IACtD,IAAIkqB,IAAe,KAAI9c;IACvB,IAAI2E;MACF;QACE,IAAMoY,IAAoBzc,EAAKA,MAAC0H,GAAM;UACpCzC,aAAY;WACXtB,YAAYxC,QAAO6V,KAAKA,EAAEjiB,SAASe,EAAAA,KAAKC;QAC3CymB,IAAeA,EAAarb,QAC1B6V,MACGyF,EAAkBC,MACjBC,KACEA,EAAE5nB,SAASe,EAAAA,KAAKC,uBAChB4mB,EAAExmB,KAAKjB,UAAU8hB,EAAE7gB,KAAKjB;AAGlC,QAAE,OAAOiQ,IAAI;;IAGf,IAAMyX,IAAqBzd,eACzBuI,GACArI,EAAO9K,cACPgI,QACAA,GACAigB,GAECrb,QAAO0b;MACN,KAAKA,EAAK5d,QAAQ0C,SAAS;QAAsB,QAAO;;MAExD,KAAO1C,KAAW4d,EAAK5d,QAAQwB,MAAM;MACrC,IAAMqc,IAAU,gCAAgCC,KAAK9d;MACrD,KAAK6d;QAAS,QAAO;;MAErB,QAAQxB,EAAiB/W,IADHuY,EAAQ;AACa,QAE5C3V,KAAI6P;MACH,KAAMzZ,OAAEA,GAAKC,KAAEA,KAAQwZ,EAAE7W;MAIzB,IAAI6c,IAAYX,IAAmB9e,EAAMG;MACzC,KAAK,IAAIvB,IAAI,GAAGA,KAAKoB,EAAMG,MAAMvB;QAC/B,IAAIA,MAAMoB,EAAMG;UAAMsf,KAAazf,EAAM/I;eACpC,IAAIgM,EAAMrE;UAAI6gB,KAAaxc,EAAMrE,GAAG7J;;;MAG3C,IAAI2qB,IAAUZ,IAAmB7e,EAAIE;MACrC,KAAK,IAAIvB,IAAI,GAAGA,KAAKqB,EAAIE,MAAMvB;QAC7B,IAAIA,MAAMqB,EAAIE;UAAMuf,KAAWzf,EAAIhJ;eAC9B,IAAIgM,EAAMrE;UAAI8gB,KAAWzc,EAAMrE,GAAG7J;;;MAGzC,IAAM4qB,IAAoBnW,EAAc1D,MAAK2T,KAEpCgG,KAAahG,EAAElP,IAAIvK,SAAS0f,KADpBjG,EAAElP,IAAIvK,QAAQyZ,EAAElP,IAAIxV;MAIrC,IAAM4qB;QACJ,OAAO;aACFlG;UACHzZ,OAAO2f,EAAkBrV,SAAStK;UAClCjL,QAAQ4qB,EAAkBrV,SAASvV;;aAGrC,IAAI0qB,IAAYT,GAAa;QAE3B,IAAMrV,IAAkBH,EACrB5F,QAAO6V,KAAKA,EAAElP,IAAIvK,QAAQyZ,EAAElP,IAAIxV,SAAS0qB,IACzCrd,QACC,CAACC,GAAKwH,MAASxH,KAAOwH,EAAKU,IAAIxV,SAAS8U,EAAKS,SAASvV,UACtD;QAEJ0qB,KAAwB9V;QACxB+V,KAAoB/V;QACpB,OAAO;aACF8P;UACHzZ,OAAOyf,IAAY;UACnB1qB,QAAQ2qB,IAAUD;;AAEtB;QACE,OAAO;aACFhG;UACHzZ,OAAOyf,IAAY;UACnB1qB,QAAQ2qB,IAAUD;;;AAGxB,QAED7b,QAAO6V,KAAKA,EAAEzZ,QAAQyZ,EAAE1kB,UAAUiqB;IAErC;MACE,IAAMnC,IAASpa,EAAKA,MAAC0H,GAAM;QAAEzC,aAAY;;MAEzC,IACEmV,EAAOzW,YAAY+Y,MAAK1F,KAAKA,EAAEjiB,SAASe,OAAKqnB,wBAC7C;QAIA,KAHW/C,EAAOzW,YAAYN,MAC5B2T,KAAKA,EAAEjiB,SAASe,OAAKqnB,uBAEfhnB;UACNymB,EAAmBpb,KAAK;YACtBvC,SAAS;YACT1B,OAAOsC,EAAKyD;YACZqF,MA/a6B;YAgb7BrW,QAAQ2pB,EAAaxX,UAAUnS;YAC/B6N,OAAO,CAAS;YAChBS,UAAU;;;AAGhB;AACF,MAAE,OAAOuE,IAAI;IAEb,OAAOyX;AAAkB,MAE1BQ,OACAjc,OAAO8G;EAEV,IAAMoV,IAAgBrB,EAAY7U,KAAI0V,MAAS;IAC7CS,MAAMzc;IACNvO,QAAQuqB,EAAKvqB;IACbiL,OAAOsf,EAAKtf;IACZggB,UACoB,MAAlBV,EAAKjc,WACDjP,QAAAA,GAAG6rB,mBAAmBtb,UACtBvQ,WAAG6rB,mBAAmBte;IAC5ByJ,MACuB,mBAAdkU,EAAKlU,OACRkU,EAAKlU,OACa,MAAlBkU,EAAKjc,WAvc4B,QAFH;IA4cpC6c,aAAaZ,EAAK5d,QAAQwB,MAAM,MAAM;;EAGxC,IAAI4D,GAAkB;IACpB,IAAMqZ,IH5M2BC,EACnC9c,GACAe,GACAiB;MAEA,IAAMmZ,IAA+B;MAErC,MAD8BnZ,EAAKiZ,OAAO8B,mBAAmB;QACjC,OAAO5B;;MAInC,IAAM6B,IAAe,IAAIlb,IAAI,EAFA,MAAM,OAAO,iBACnBE,EAAKiZ,OAAO+B,gBAAgB;MAEnD,IAAM1F,IAAUtV,EAAKG,gBAAgBC,cAAcmV;MACnD,KAAKD;QAAS;;MAEd;QACEvW,EAAMmD,SAAQlF;UACZ,IAAMie,IAAWje,EAAK4E;UAGtB,IAAIqZ,EAASnc,SAAS,eAAemc,EAASnc,SAAS;YACrD;;UAEF,IAAMoc,IAAsBhI,uBAAuBlW;UACnD,KAAKke;YAAqB;;UAE1B,IAAIC;UAEJ,IAAMnlB,IAAOsf,EAAQ8F,kBAAkBpe,EAAKsE;UAI5C,IAAI,YAAYtL,GAAM;YACpB,IAAMqlB,IAAiBrlB,EACpBslB;YACHH,IACEE,KAAiBA,EAAc5rB,SAAS,IACpC4rB,EAAc,UACd3hB;AACR;UAEA,KAAKyhB,GAAU;YACb,IAAMI,IAAgBvlB,EAAKwlB,YAAY;YACvC,IAAID,GAAe;cACjB,IAAIE,IAAUnG,EAAQoG,gBAAgBH;cACtC,IAAII,IACF3lB,EAAK4lB,oBAAoB;cAC3B,IAAIH,EAAQ3I;gBACV,KAAK,IAAM9c,KAAQylB,EAAQ1I;kBAEzB,IADA4I,IAAgB3lB,EAAK4lB,oBAAoB,IACtB;oBACjBT,IAAWQ,EAAcE;oBACzB;AACF;;;cAGJV,IAAWQ,KAAiBA,EAAcE;AAC5C;AACF;UAEA,IAAMpH,IAAazU,EAAKG,gBAAgBuU,wBACtC1W,EAAOgD,UACPka,EAAoB5nB,KAAKmN;UAG3B,KAAKgU;YAAY;;UAEjB,IAAMqH,IAAsB;UAC5B,IAAMC,IAAuB;UAC7B,IAAMC,IAAqB;UAC3B,IAAMC,IAAa,IAAI1Q;UAMvBqM,QAAMza,EAAAA,MAAMH,EAAK4E,UAAU7Q,MAAM,IAAI,KAAK;YACxCkD,OAAO;cACLioB,KAAAA,CAAMlf;gBACJ,IAAMmf,IAAQnf,EAAKmf,QAAQnf,EAAKmf,MAAM9pB,QAAQ2K,EAAK1J,KAAKjB;gBACxD,IAAM+pB,IAAOL,EAAWtsB,SACnB,GAAEssB,EAAW7H,KAAK,QAAQiI,MAC3BA;gBAEJ,KAAKnf,EAAKqf,iBAAiBrB,EAAatZ,IAAI1E,EAAK1J,KAAKjB,QAAQ;kBAC5D2pB,EAASrd,KAAKyd;kBACdH,EAAWjN,IAAIoN,GAAM;oBACnB1hB,OAAOsC,EAAK1J,KAAKoM,IAAKhF;oBACtBjL,QAAQuN,EAAK1J,KAAKoM,IAAK/E,MAAMqC,EAAK1J,KAAKoM,IAAKhF;;AAEhD,uBAAO,IAAIsC,EAAKqf,cAAc;kBAC5BN,EAAWpd,KAAKwd;kBAChBF,EAAWjN,IAAIoN,GAAM;oBACnB1hB,OAAOsC,EAAK1J,KAAKoM,IAAKhF;oBACtBjL,QAAQuN,EAAK1J,KAAKoM,IAAK/E,MAAMqC,EAAK1J,KAAKoM,IAAKhF;;AAEhD;AACD;cACD4hB,KAAAA,CAAMtf;gBACJ,IAAIA,EAAKqf;kBACPN,EAAWxT;;AAEf;;;UAIJkM,EAAWvS,SAAQyS;YACjB,IAAIA,EAAI3T,aAAahD,EAAOgD;cAAU;;YAEtC,IAAMub,IAAajc,SAAStC,GAAQ2W,EAAIvT,SAAS1G;YACjD,KAAK6hB;cAAY;;YAEjB,IAAIA,EAAWjb,WAAW4Z;cAAqB;;YAE/C,IAAMsB,IAAelH,EAAQmH,kBAC3BF,GACAztB,WAAG4tB,YAAYC;YAGjB,IAAIC;YACJ,KAAK,IAAIC,KAAeL,GAAc;cACpC,KAAKK,EAAYpH;gBAAkB;;cACnC,IAAIqH,IAAoBjK,mBACtByC,EAAQoG,gBAAgBmB;cAE1B,IAAI1B,MAAa2B,GAAmB;gBAClCF,IAAkBC;gBAClB;AACF;cAKA,IAAIC,EAAkB9J,QAAQlkB,WAAGmkB,UAAU7Z,QAAQ;gBACjD,IAAM2jB,IAAsBD,EAAkBtB,YAAY;gBAC1D,IAAIuB,GAAqB;kBACvBD,IAAoBxH,EAAQoG,gBAAgBqB;kBAC5C,IAAI5B,MAAa2B,GAAmB;oBAClCF,IAAkBC;oBAClB;AACF;AACF;gBAEA,IAAMG,IAAqBF,EAAkBtB,YAAY;gBACzD,IAAIwB,GAAoB;kBACtBF,IAAoBjK,mBAClByC,EAAQoG,gBAAgBsB;kBAE1B,IAAI7B,MAAa2B,GAAmB;oBAClCF,IAAkBC;oBAClB;AACF;AACF;AACF;AACF;YAEA,IAAMpH,IAAmBmH,GAAiBnH;YAC1C,IAAIniB;YACJ,IACEmiB,KACA,UAAUA,KACRA,EAAiBniB,SAClBxE,QAAEA,GAACqT,aAAasT,EAAiBniB,SAChCxE,QAAEA,GAACmuB,cAAcxH,EAAiBniB;cAEpCA,IAAOmiB,EAAiBniB;mBACnB;cAGL,IAAM4nB,IAAsBhI,uBAAuBqJ;cACnD,IAAIrB;gBAAqB5nB,IAAO4nB,EAAoB5nB;;AACtD;YAEA,IAAIA,GAAM;cACR,IAAMmP,IAASiR,WAAWpgB,GAAM,IAAI0oB,GAAUhe,GAAQgC,IAAM;cAC5D8b,EAAUnd,QAAQ8D;AACpB;AAAA;UAGF,KAAKqZ,EAAUrsB;YACb;;UAGF,IAAMytB,IAASlB,EAAS1d,QAAO6V,MAAM2H,EAAUhd,SAASqV;UACxD,IAAMgJ,IAAyB,IAAIrd;UACnC,IAAMsd,IAAiD,CAAA;UACvD,IAAMC,IAAqB,IAAIvd;UAC/Bod,EAAOhb,SAAQob;YACb,IAAM1f,IAAQ0f,EAAY1f,MAAM;YAChCA,EAAM2K;YACN,IAAMgV,IAAc3f,EAAMsW,KAAK;YAG/B,IAFY+H,EAAWxP,IAAI8Q,IAElB;cACPJ,EAAuBxR,IAAI4R;cAC3B,IAAIH,EAAeG;gBACjBH,EAAeG,GAAa5R,IAAI2R;;gBAEhCF,EAAeG,KAAe,IAAIzd,IAAI,EAACwd;;AAE3C;cACED,EAAmB1R,IAAI2R;;AACzB;UAGFH,EAAuBjb,SAAQsb;YAC7B,IAAM9d,IAAMuc,EAAWxP,IAAI+Q;YAC3B,IAAMC,IAAeL,EAAeI;YACpCrE,EAAYxa,KAAK;cACf8b,MAAMzc;cACNvO,QAAQiQ,EAAIjQ;cACZiL,OAAOsC,EAAKyD,aAAaf,EAAIhF,QAAQ;cACrCggB,UAAU5rB,QAAAA,GAAG6rB,mBAAmBtb;cAChCyG,MAAM8M;cACNgI,aAAc,YAAW,KAAI6C,IAC1BnZ,KAAI6P,KAAM,IAAGA,OACbD,KAAK;;AACR;UAGJmJ,EAAmBnb,SAAQsb;YACzB,IAAM9d,IAAMuc,EAAWxP,IAAI+Q;YAC3BrE,EAAYxa,KAAK;cACf8b,MAAMzc;cACNvO,QAAQiQ,EAAIjQ;cACZiL,OAAOsC,EAAKyD,aAAaf,EAAIhF,QAAQ;cACrCggB,UAAU5rB,QAAAA,GAAG6rB,mBAAmBtb;cAChCyG,MAAM8M;cACNgI,aAAc,SAAQ4C;;AACtB;AACF;AAEL,QAAC,OAAOlb;QACP0D,QAAQ5I,MAAM,iBAAiBkF,EAAElG,SAASkG,EAAEob;AAC9C;MAEA,OAAOvE;AAAW,MG/Bd2B,CACE9c,GACAe,GACAiB,MACG;IAEP,KAAK6a;MAAkB,OAAOL;;IAE9B,OAAO,KAAIA,MAAkBK;AAC/B;IACE,OAAOL;;AACT;;;;;;iCPhPK,SAASmD,uBAAuB3gB;EACrC,OACElO,QAAAA,GAAGgU,gCAAgC9F,MACnClO,QAAEA,GAAC8uB,QAAQ5gB,MACXlO,QAAAA,GAAGuqB,qBAAqBrc,MACxBlO,QAAEA,GAAC+uB,eAAe7gB;IAElBA,IAAOA,EAAKsE;;EAGd,OAAOtE;AACT;;2BAxBO,SAAS8gB,iBAAiB9gB;EAC/B,OACElO,QAAAA,GAAGgU,gCAAgC9F,MACnClO,QAAEA,GAAC8uB,QAAQ5gB,MACXlO,QAAAA,GAAGuqB,qBAAqBrc,MACxBlO,QAAEA,GAAC+uB,eAAe7gB;IAElBA,IAAOA,EAAKsE;;EAGd,OAAOtE;AACT;;;;;;;;;;;;gCOjNO,SAAS+gB,sBACd9d,GACAzD,GACAwD;EAEA,IAAMwB,IAAmBxB,EAAKiZ,OAAOC,6BAA4B;EAEjE,IAAIlb,IAAS+B,UAAUC,GAAMC;EAC7B,KAAKjC;IAAQ;;EAEb,IACEe,GADElC,IAA2C;EAE/C,IAAI2E,GAAkB;IACpB,IAAMiB,IAASF,uBAAuBvE,GAAQgC;IAC9CnD,IAAY4F,EAAO5F;IACnBkC,IAAQ0D,EAAO1D;AACjB;IACEA,IPnEG,SAASif,2BACdzd;MAEA,IAAMkC,IAEF;OACJ,SAASjC,KAAKxD;QACZ,IACGlO,WAAG8V,2BAA2B5H,MAC7B6C,EAAU6B,IAAI1E,EAAKyc,IAAI7X,cACxB9S,QAAEA,GAACgU,gCAAgC9F,MAClClO,WAAG8V,2BAA2B5H,EAAKsE,WACnCzB,EAAU6B,IAAI1E,EAAKsE,OAAOmY,IAAI7X,YAChC;UACAa,EAAO9D,KAAK3B;UACZ;AACF;UACElO,QAAAA,GAAG6R,aAAa3D,GAAMwD;;AAE1B,OACAA,CAAKD;MACL,OAAOkC;AACT,KO6CYub,CAA2BhgB;;EAGrC,IAAMigB,IAAQlf,EAAMuF,KAAItH;IACtB,KACGlO,QAAAA,GAAGgU,gCAAgC9F,MAClClO,QAAEA,GAACuqB,qBAAqBrc,QACzBwE;MAED,IAAI1S,WAAG8V,2BAA2B5H,EAAKsE;QACrCtE,IAAOA,EAAKsE;;QAEZ;;;IAIJ,OAAO0C,gBAAgBhH,GAAMiD,GAAUD,GAAMiE;AAAY;EAG3D,IAAMia,IAAWjM,EACfzQ,IACIxD,EAAO4D,YACL/E,EAAUyH,KAAI6P,KAAKlX,MAAMkX,KAAID,KAAK,OAClC1X,EAAO2hB,UACTF,EAAM/J,KAAK,OAAO1X,EAAO2hB;EAG/B,IAAI3D;EACJ,IAAIzB,EAAMrX,IAAIwc;IACZ1D,IAAgBzB,EAAMtM,IAAIyR;SACrB;IACL1D,IAAgBxB,eAAehb,GAAQ;MAAEe;MAAOlC;OAAaL,GAAQwD;IACrE+Y,EAAM/J,IAAIkP,GAAU1D;AACtB;EAEA,IAAM4D,IACJpe,EAAKiZ,OAAOmF,qCAAoC;EAClD,IAAIC,IAAuC;EAE3C,IAAI7c,GAAkB;IAQpB,IAAM8c,IAPiBvb,gCAAgC/E,GAQpDsG,KAA0B8Q;MACzB,KAAKA,EAAeiG,kBAAkBjG,EAAerT,UAAU;QAC7D,OAAO;UACL2Y,UAAU5rB,QAAAA,GAAG6rB,mBAAmBtb;UAChCyG,MAAM4S;UACN+B,MAAMzc;UACN4c,aAAa;UACblgB,OAAO0a,EAAe3U;UACtBhR,QAAQ2lB,EAAe1U,WAAW0U,EAAe3U;;;MAIrD,IAAI6X,GAEF3D,GACAja,GACAjL,GAHAioB,IAAgBzX;MAIlB,IAAImV,EAAeiG,eAAe;QAChC,KAAOjD,KAAahD,EAAeiG;QACnC3gB,IAAQ0d,EAAU3X;QAClBhR,IAAS2oB,EAAU1X,WAAW0X,EAAU3X;QAExC,KAAK3R,QAAEA,GAACyvB,gBAAgBnG;UACtB,OAAO;YACLsC,UAAU5rB,QAAAA,GAAG6rB,mBAAmBtb;YAChCyG,MAAM4S;YACN+B,MAAMzc;YACN4c,aACE;YACFlgB;YACAjL;;;QAGJ,KAAQuN,MAAMmE,GAAOlB,UAAUe,KAC7BmX,kCAAkCC,GAAWnY,GAAUD;QACzDsY,IAAYnX;QACZuW,IAAgB1W;QAChB2T,IAAMyD,EAAUxW;AACjB,aAAM,IAAIwT,EAAerT,UAAU,IAAI;QACtCrH,IAAQ0a,EAAerT,UAAU,GAAGtB;QACpChR,IACE2lB,EAAerT,UAAU,GAAGrB,WAC5B0U,EAAerT,UAAU,GAAGtB;QAC9B,KACG3R,QAAAA,GAAGqT,aAAaiT,EAAerT,UAAU,QACzCjT,QAAAA,GAAG0S,iBAAiB4T,EAAerT,UAAU;UAE9C,OAAO;YACL2Y,UAAU5rB,QAAAA,GAAG6rB,mBAAmBtb;YAChCyG,MAAM4S;YACN+B,MAAMzc;YACN4c,aACE;YACFlgB;YACAjL;;;QAIJ,KAAQuN,MAAMmE,GAAOlB,UAAUe,KAC7BuX,qCACEnD,EAAerT,UAAU,IACzB9B,GACAD;QAEJsY,IAAYnX;QACZuW,IAAgB1W;QAChB2T,IAAMS,EAAerT,UAAU,GAAGH;AACpC;MAEA,KAAK0W;QACH,OAAO;UACLoC,UAAU5rB,QAAAA,GAAG6rB,mBAAmBtb;UAChCyG,MAAM8S;UACN6B,MAAMzc;UACN4c,aAAc,4BAA2BjG;UACzCja;UACAjL;;;MAIJ,IAAM8R,IAAc+W;MACpB,KACG/W,MACAzS,WAAG0S,iBAAiBD,OACpBzS,QAAEA,GAACgU,gCAAgCvB,EAAYQ,UAAU;QAI1D,OAAO;UACL2Y,UAAU5rB,QAAAA,GAAG6rB,mBAAmBtb;UAChCyG,MAAM8S;UACN6B,MAAMzc;UACN4c,aAAc,oBAAmBjG;UACjCja;UACAjL;;;MAIJ,KAAK2lB,EAAerT,UAAU;QAG5B,OAAO;UACL2Y,UAAU5rB,QAAAA,GAAG6rB,mBAAmBtb;UAChCyG,MAAM6S;UACN8B,MAAMzc;UACN4c,aAAc;UACdlgB,OAAO0a,EAAerT,UAAUvQ;UAChC/B,QAAQ2lB,EAAerT,UAAUpH,MAAMya,EAAerT,UAAUvQ;;;MAKpE,IADa4jB,EAAerT,UAAU,GAAGH,UAAU7Q,MAAM,IAAI,GACpDE,WAAW,YAAY;QAC9B,IAAMkhB,IAAOqF,wBACXxX,GACAuB,EAAYQ,UAAU,IACtB2V;QAEF,KAAKvF;UAAM,OAAO;;QAElB,IADsB,UAASA,QACVA;UACnB,OAAO;YACLuI,UAAU5rB,QAAAA,GAAG6rB,mBAAmBtb;YAChCyG,MAAM+S;YACN4B,MAAMzc;YACN4c,aAAc;YACdlgB,OAAO0a,EAAerT,UAAUvQ;YAChC/B,QACE2lB,EAAerT,UAAUpH,MAAMya,EAAerT,UAAUvQ;;;AAGhE;MAEA,OAAO;AAAI,QAEZ8M,OAAO8G;IAEVoV,EAAc7b,QAAS2f;AACzB;EAEA,IAAI9c,KAAoB4c,GAAkC;IACxD,IAAMI,IAA6BtI,0BAA0BlY,GAAQgC;IAErE,IAAMye,IAAgB,IAAI3e;IAC1Bf,EAAMmD,SAAQlF;MACZ;QACE,IAAMua,IAASpa,EAAKA,MAACH,EAAK4E,UAAU7Q,MAAM,IAAI,IAAI;UAChDqR,aAAY;;QAEdwV,EAAAA,MAAML,GAAQ;UACZnjB,gBAAgB4I;YACdyhB,EAAc9S,IAAI3O,EAAK1J,KAAKjB;AAAM;;AAGxC,QAAE,OAAOiQ,IAAI;AAAA;IAGflJ,OAAOC,KAAKmlB,GAA4Btc,SAAQ2U;MAC9C,KACEha,WAAW6hB,GAAahkB,OACxBA,GAAKjL,QACLA,KACE+uB,EAA2B3H;MAC/B,IAAM8H,IAAmB3tB,MAAMkJ,KAC7B,IAAI4F,IAAI4e,EAAcpgB,QAAO6V,MAAMsK,EAAc/c,IAAIyS;MAEvD,IAAIwK,EAAiBlvB;QACnB4uB,EAAoB1f,KAAK;UACvB8b,MAAMzc;UACNvO;UACAiL;UACAggB,UAAU5rB,QAAAA,GAAG6rB,mBAAmBtb;UAChCyG,MF9S2B;UE+S3B8U,aAAc,6CAA4C+D,EAAiBzK,KACzE,aACO2C;;;AAEb;IAGF,OAAO,KAAI2D,MAAkB6D;AAC/B;IACE,OAAO7D;;AAEX;;wCD9SO,SAASoE,8BACd3e,GACAxP,GACAuP;EAIA,MAFyBA,EAAKiZ,OAAOC,6BAA4B;IAE1C;;EAEvB,IAAIlb,IAAS+B,UAAUC,GAAMC;EAC7B,KAAKjC;IAAQ;;EAEb,IAAMhB,IAAOsD,SAAStC,GAAQvN;EAC9B,KAAKuM;IAAM;;EAEX,IAAIoY,IAA0BpY;EAO9B,IAAIlO,QAAEA,GAACuU,oBAAoB+R;IACzBA,IACEA,EAAe9R,gBAAgBC,aAAa/C,MAAKgD,KAE7C1U,WAAGuS,sBAAsBmC,MACzBA,EAAYjC,eACZzS,QAAAA,GAAG0S,iBAAiBgC,EAAYjC,kBAE9BvE;SACH,IAAIlO,QAAEA,GAAC+vB,0BAA0BzJ;IACtCA,IACEA,EAAe7R,aAAa/C,MAAKgD,KAE7B1U,WAAGuS,sBAAsBmC,MACzBA,EAAYjC,eACZzS,QAAAA,GAAG0S,iBAAiBgC,EAAYjC,kBAE9BvE;SACH,IACLlO,QAAEA,GAACuS,sBAAsB+T,MACzBA,EAAe7T,eACfzS,WAAG0S,iBAAiB4T,EAAe7T;IAEnC6T,IAAiBA,EAAe7T;;IAEhC,OAAO6T,MAAmBtmB,QAAAA,GAAG0S,iBAAiB4T;MAC5CA,IAAiBA,EAAe9T;;;EAQpC,KACGxS,QAAEA,GAAC0S,iBAAiB4T,OA/DA0J;IACvB,IAAMC,IAAiBD,EAAKld;IAC5B,KAAOqB,GAAUC,KAAU6b,EAAenhB,MAAM;IAChD,OAAOiC,EAAU6B,IAAIuB,MAAwB,gBAAXC;AAAsB,IA6DrD8b,CAAgB5J,EAAezT,gBAC9ByT,EAAeiG,kBAAkBjG,EAAerT,UAAU;IAE5D;;EAEF,IAAIuW,GACFZ,IAAgBzX;EAClB,IAAImV,EAAeiG,eAAe;IAChC,KAAOjD,KAAahD,EAAeiG;IACnC,KAAKvsB,QAAAA,GAAGyvB,gBAAgBnG;MAAY;;IACpC,KAAQpb,MAAMmE,GAAOlB,UAAUe,KAC7BmX,kCAAkCC,GAAWnY,GAAUD;IACzDsY,IAAYnX;IACZuW,IAAgB1W;AACjB,SAAM,IAAIoU,EAAerT,UAAU,IAAI;IACtC,KACGjT,QAAEA,GAACqT,aAAaiT,EAAerT,UAAU,QACzCjT,QAAAA,GAAG0S,iBAAiB4T,EAAerT,UAAU;MAE9C;;IACF,KAAQ/E,MAAMmE,GAAOlB,UAAUe,KAC7BuX,qCACEnD,EAAerT,UAAU,IACzB9B,GACAD;IAEJsY,IAAYnX;IACZuW,IAAgB1W;AAClB;EAEA,KAAKsX;IAAW;;EAEhB,IAAM/W,IAAc+W;EACpB,KACG/W,MACAzS,QAAEA,GAAC0S,iBAAiBD,OACpBzS,QAAEA,GAACgU,gCAAgCvB,EAAYQ,UAAU;IAE1D;;EAEF,IAAMoQ,IAAOqF,wBACXxX,GACAuB,EAAYQ,UAAU,IACtB2V;EAEF,IAAMuH,IAAe7J,EAAerT,UAAU;EAE9C,KAAKkd;IAEH,OAAO;MACL1a,MAAM;QACJ7J,OAAO0a,EAAerT,UAAUvQ;QAChC/B,QAAQ;;MAEVyvB,aAAc,WAAU/M;;SAErB,IACLrjB,QAAEA,GAAC8U,gBAAgBqb,MACnBA,EAAard,cAAe,WAAUuQ;IAGtC,OAAO;MACL5N,MAAM;QACJ7J,OAAOukB,EAAaxe;QACpBhR,QAAQwvB,EAAatkB,MAAMskB,EAAaxe;;MAE1Cye,aAAc,WAAU/M;;SAErB,IAAIrjB,QAAEA,GAACqT,aAAa8c;IAGzB,OAAO;MACL1a,MAAM;QACJ7J,OAAOukB,EAAaxe;QACpBhR,QAAQwvB,EAAatkB,MAAMskB,EAAaxe;;MAE1Cye,aAAc,WAAU/M;;;IAG1B;;AAEJ;;;;efjKO,SAASgN,KAAKC;EACnBtwB,QAAEA,KAAGswB,EAAQC;AACf;;;;;;;;;;8BSoGO,SAASC,oBACdC,GACA9L,GACAzT;EAEAuf,EAAetd,SAASC,SAAQrB;IAC9B,IAAI/R,QAAEA,GAACqT,aAAatB;MAClB4S,EAAI9U,QAAQiC,eAAeC,GAASb;WAC/B,IAAIlR,QAAEA,GAAC8T,2BAA2B/B,IAAU;MACjD,IAAIgC,IAAKhC;MACT,OAAO/R,WAAG8T,2BAA2BC,EAAGlB;QACtCkB,IAAKA,EAAGlB;;MAGV,IAAI7S,WAAGqT,aAAaU,EAAGvP;QACrBmgB,EAAI9U,QAAQiC,eAAeiC,EAAGvP,MAAM0M;;AAExC;AAAA;EAGF,OAAOyT;AACT","x_google_ignoreList":[1,2,3,4,5,6,7,11,12]}