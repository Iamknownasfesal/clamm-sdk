import * as e from "node:path";

import { ts as i, Project as n } from "ts-morph";

import { init as t, findAllPersistedCallExpressions as r, getDocumentReferenceFromDocumentNode as a, getDocumentReferenceFromTypeQuery as l, unrollTadaFragments as s } from "@0no-co/graphqlsp/api";

import { e as o, l as u, g as c } from "./index-chunk.mjs";

import { c as m } from "./project-chunk.mjs";

var v = function(e) {
  e[e.Const = 1] = "Const";
  e[e.Var = 2] = "Var";
  e[e.Int = 3] = "Int";
  e[e.Float = 4] = "Float";
  e[e.BlockString = 5] = "BlockString";
  e[e.String = 6] = "String";
  e[e.Enum = 7] = "Enum";
  return e;
}(v || {});

var f = function(e) {
  e[e.Spread = 1] = "Spread";
  e[e.Name = 2] = "Name";
  return e;
}(f || {});

function mapJoin(e, i, n) {
  var t = "";
  for (var r = 0; r < e.length; r++) {
    if (r) {
      t += i;
    }
    t += n(e[r]);
  }
  return t;
}

var g = "\n";

var p = {
  OperationDefinition(e) {
    var i = e.operation;
    if (e.name) {
      i += " " + e.name.value;
    }
    if (e.variableDefinitions && e.variableDefinitions.length) {
      if (!e.name) {
        i += " ";
      }
      i += "(" + mapJoin(e.variableDefinitions, ", ", p.VariableDefinition) + ")";
    }
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", p.Directive);
    }
    return "query" !== i ? i + " " + p.SelectionSet(e.selectionSet) : p.SelectionSet(e.selectionSet);
  },
  VariableDefinition(e) {
    var i = p.Variable(e.variable) + ": " + _print(e.type);
    if (e.defaultValue) {
      i += " = " + _print(e.defaultValue);
    }
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", p.Directive);
    }
    return i;
  },
  Field(e) {
    var i = e.alias ? e.alias.value + ": " + e.name.value : e.name.value;
    if (e.arguments && e.arguments.length) {
      var n = mapJoin(e.arguments, ", ", p.Argument);
      if (i.length + n.length + 2 > 80) {
        i += "(" + (g += "  ") + mapJoin(e.arguments, g, p.Argument) + (g = g.slice(0, -2)) + ")";
      } else {
        i += "(" + n + ")";
      }
    }
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", p.Directive);
    }
    if (e.selectionSet) {
      i += " " + p.SelectionSet(e.selectionSet);
    }
    return i;
  },
  StringValue(e) {
    if (e.block) {
      return function printBlockString(e) {
        return '"""\n' + e.replace(/"""/g, '\\"""') + '\n"""';
      }(e.value).replace(/\n/g, g);
    } else {
      return function printString(e) {
        return JSON.stringify(e);
      }(e.value);
    }
  },
  BooleanValue: e => "" + e.value,
  NullValue: e => "null",
  IntValue: e => e.value,
  FloatValue: e => e.value,
  EnumValue: e => e.value,
  Name: e => e.value,
  Variable: e => "$" + e.name.value,
  ListValue: e => "[" + mapJoin(e.values, ", ", _print) + "]",
  ObjectValue: e => "{" + mapJoin(e.fields, ", ", p.ObjectField) + "}",
  ObjectField: e => e.name.value + ": " + _print(e.value),
  Document(e) {
    if (!e.definitions || !e.definitions.length) {
      return "";
    }
    return mapJoin(e.definitions, "\n\n", _print);
  },
  SelectionSet: e => "{" + (g += "  ") + mapJoin(e.selections, g, _print) + (g = g.slice(0, -2)) + "}",
  Argument: e => e.name.value + ": " + _print(e.value),
  FragmentSpread(e) {
    var i = "..." + e.name.value;
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", p.Directive);
    }
    return i;
  },
  InlineFragment(e) {
    var i = "...";
    if (e.typeCondition) {
      i += " on " + e.typeCondition.name.value;
    }
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", p.Directive);
    }
    return i + " " + p.SelectionSet(e.selectionSet);
  },
  FragmentDefinition(e) {
    var i = "fragment " + e.name.value;
    i += " on " + e.typeCondition.name.value;
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", p.Directive);
    }
    return i + " " + p.SelectionSet(e.selectionSet);
  },
  Directive(e) {
    var i = "@" + e.name.value;
    if (e.arguments && e.arguments.length) {
      i += "(" + mapJoin(e.arguments, ", ", p.Argument) + ")";
    }
    return i;
  },
  NamedType: e => e.name.value,
  ListType: e => "[" + _print(e.type) + "]",
  NonNullType: e => _print(e.type) + "!"
};

var _print = e => p[e.kind](e);

function print(e) {
  g = "\n";
  return p[e.kind] ? p[e.kind](e) : "";
}

var d = o((async function* _runPersisted(o) {
  t({
    typescript: i
  });
  var v = e.dirname(o.configPath);
  var f = new n({
    tsConfigFilePath: o.configPath
  });
  var g = await u(v, f, i);
  if (g) {
    yield {
      kind: "EXTERNAL_WARNING"
    };
  }
  var p = m(f, o.pluginConfig, v, g);
  var d = f.getSourceFiles().filter((i => {
    var n = e.resolve(v, i.getFilePath());
    return !e.relative(o.rootPath, n).startsWith("..");
  }));
  yield {
    kind: "FILE_COUNT",
    fileCount: d.length
  };
  for (var {compilerNode: h} of d) {
    var S = h.fileName;
    var y = {};
    var N = [];
    var b = r(h);
    for (var D of b) {
      var J = c(h, D.getStart(), void 0, g);
      S = J.file;
      var V = D.arguments[0];
      var F = D.arguments[1];
      var T = D.typeArguments && D.typeArguments[0];
      if (!V || !i.isStringLiteral(V)) {
        N.push({
          message: '"graphql.persisted" must be called with a string literal as the first argument.',
          file: J.file,
          line: J.line,
          col: J.col
        });
        continue;
      } else if (!F && !T) {
        N.push({
          message: '"graphql.persisted" is missing a document.\nThis may be passed as a generic such as `graphql.persisted<typeof document>` or as the second argument.',
          file: J.file,
          line: J.line,
          col: J.col
        });
        continue;
      }
      var k = null;
      var C = D;
      if (F && (i.isCallExpression(F) || i.isIdentifier(F))) {
        k = a(F, h.fileName, p).node;
        C = F;
      } else if (T && i.isTypeQueryNode(T)) {
        k = l(T, h.fileName, p).node;
        C = T;
      }
      if (!k) {
        N.push({
          message: `Could not find reference for "${C.getText()}".\nIf this is unexpected, please file an issue describing your case.`,
          file: J.file,
          line: J.line,
          col: J.col
        });
        continue;
      }
      if (!k || !i.isCallExpression(k) || !i.isNoSubstitutionTemplateLiteral(k.arguments[0]) && !i.isStringLiteral(k.arguments[0])) {
        N.push({
          message: `The referenced document of "${C.getText()}" contains no document string literal.\nIf this is unexpected, please file an issue describing your case.`,
          file: J.file,
          line: J.line,
          col: J.col
        });
        continue;
      }
      var E = [];
      var x = k.arguments[0].getText().slice(1, -1);
      if (k.arguments[1] && i.isArrayLiteralExpression(k.arguments[1])) {
        s(k.arguments[1], E, p);
      }
      var I = x;
      for (var A of E) {
        I += "\n\n" + print(A);
      }
      y[V.getText().slice(1, -1)] = I;
    }
    yield {
      kind: "FILE_PERSISTED",
      filePath: S,
      documents: y,
      warnings: N
    };
  }
}));

export { d as runPersisted };
//# sourceMappingURL=thread-chunk.mjs.map
