var e = require("node:path");

var i = require("ts-morph");

var t = require("@0no-co/graphqlsp/api");

var n = require("./index-chunk.js");

var r = require("./project-chunk.js");

function _interopNamespaceDefault(e) {
  var i = Object.create(null);
  if (e) {
    Object.keys(e).forEach((function(t) {
      if ("default" !== t) {
        var n = Object.getOwnPropertyDescriptor(e, t);
        Object.defineProperty(i, t, n.get ? n : {
          enumerable: !0,
          get: function() {
            return e[t];
          }
        });
      }
    }));
  }
  i.default = e;
  return i;
}

var a = _interopNamespaceDefault(e);

var l = function(e) {
  e[e.Const = 1] = "Const";
  e[e.Var = 2] = "Var";
  e[e.Int = 3] = "Int";
  e[e.Float = 4] = "Float";
  e[e.BlockString = 5] = "BlockString";
  e[e.String = 6] = "String";
  e[e.Enum = 7] = "Enum";
  return e;
}(l || {});

var s = function(e) {
  e[e.Spread = 1] = "Spread";
  e[e.Name = 2] = "Name";
  return e;
}(s || {});

function mapJoin(e, i, t) {
  var n = "";
  for (var r = 0; r < e.length; r++) {
    if (r) {
      n += i;
    }
    n += t(e[r]);
  }
  return n;
}

var o = "\n";

var u = {
  OperationDefinition(e) {
    var i = e.operation;
    if (e.name) {
      i += " " + e.name.value;
    }
    if (e.variableDefinitions && e.variableDefinitions.length) {
      if (!e.name) {
        i += " ";
      }
      i += "(" + mapJoin(e.variableDefinitions, ", ", u.VariableDefinition) + ")";
    }
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", u.Directive);
    }
    return "query" !== i ? i + " " + u.SelectionSet(e.selectionSet) : u.SelectionSet(e.selectionSet);
  },
  VariableDefinition(e) {
    var i = u.Variable(e.variable) + ": " + _print(e.type);
    if (e.defaultValue) {
      i += " = " + _print(e.defaultValue);
    }
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", u.Directive);
    }
    return i;
  },
  Field(e) {
    var i = e.alias ? e.alias.value + ": " + e.name.value : e.name.value;
    if (e.arguments && e.arguments.length) {
      var t = mapJoin(e.arguments, ", ", u.Argument);
      if (i.length + t.length + 2 > 80) {
        i += "(" + (o += "  ") + mapJoin(e.arguments, o, u.Argument) + (o = o.slice(0, -2)) + ")";
      } else {
        i += "(" + t + ")";
      }
    }
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", u.Directive);
    }
    if (e.selectionSet) {
      i += " " + u.SelectionSet(e.selectionSet);
    }
    return i;
  },
  StringValue(e) {
    if (e.block) {
      return function printBlockString(e) {
        return '"""\n' + e.replace(/"""/g, '\\"""') + '\n"""';
      }(e.value).replace(/\n/g, o);
    } else {
      return function printString(e) {
        return JSON.stringify(e);
      }(e.value);
    }
  },
  BooleanValue: e => "" + e.value,
  NullValue: e => "null",
  IntValue: e => e.value,
  FloatValue: e => e.value,
  EnumValue: e => e.value,
  Name: e => e.value,
  Variable: e => "$" + e.name.value,
  ListValue: e => "[" + mapJoin(e.values, ", ", _print) + "]",
  ObjectValue: e => "{" + mapJoin(e.fields, ", ", u.ObjectField) + "}",
  ObjectField: e => e.name.value + ": " + _print(e.value),
  Document(e) {
    if (!e.definitions || !e.definitions.length) {
      return "";
    }
    return mapJoin(e.definitions, "\n\n", _print);
  },
  SelectionSet: e => "{" + (o += "  ") + mapJoin(e.selections, o, _print) + (o = o.slice(0, -2)) + "}",
  Argument: e => e.name.value + ": " + _print(e.value),
  FragmentSpread(e) {
    var i = "..." + e.name.value;
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", u.Directive);
    }
    return i;
  },
  InlineFragment(e) {
    var i = "...";
    if (e.typeCondition) {
      i += " on " + e.typeCondition.name.value;
    }
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", u.Directive);
    }
    return i + " " + u.SelectionSet(e.selectionSet);
  },
  FragmentDefinition(e) {
    var i = "fragment " + e.name.value;
    i += " on " + e.typeCondition.name.value;
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", u.Directive);
    }
    return i + " " + u.SelectionSet(e.selectionSet);
  },
  Directive(e) {
    var i = "@" + e.name.value;
    if (e.arguments && e.arguments.length) {
      i += "(" + mapJoin(e.arguments, ", ", u.Argument) + ")";
    }
    return i;
  },
  NamedType: e => e.name.value,
  ListType: e => "[" + _print(e.type) + "]",
  NonNullType: e => _print(e.type) + "!"
};

var _print = e => u[e.kind](e);

function print(e) {
  o = "\n";
  return u[e.kind] ? u[e.kind](e) : "";
}

var c = n.expose((async function* _runPersisted(e) {
  t.init({
    typescript: i.ts
  });
  var l = a.dirname(e.configPath);
  var s = new i.Project({
    tsConfigFilePath: e.configPath
  });
  var o = await n.loadVirtualCode(l, s, i.ts);
  if (o) {
    yield {
      kind: "EXTERNAL_WARNING"
    };
  }
  var u = r.createPluginInfo(s, e.pluginConfig, l, o);
  var c = s.getSourceFiles().filter((i => {
    var t = a.resolve(l, i.getFilePath());
    return !a.relative(e.rootPath, t).startsWith("..");
  }));
  yield {
    kind: "FILE_COUNT",
    fileCount: c.length
  };
  for (var {compilerNode: f} of c) {
    var v = f.fileName;
    var m = {};
    var g = [];
    var d = t.findAllPersistedCallExpressions(f);
    for (var p of d) {
      var h = n.getFilePosition(f, p.getStart(), void 0, o);
      v = h.file;
      var S = p.arguments[0];
      var y = p.arguments[1];
      var b = p.typeArguments && p.typeArguments[0];
      if (!S || !i.ts.isStringLiteral(S)) {
        g.push({
          message: '"graphql.persisted" must be called with a string literal as the first argument.',
          file: h.file,
          line: h.line,
          col: h.col
        });
        continue;
      } else if (!y && !b) {
        g.push({
          message: '"graphql.persisted" is missing a document.\nThis may be passed as a generic such as `graphql.persisted<typeof document>` or as the second argument.',
          file: h.file,
          line: h.line,
          col: h.col
        });
        continue;
      }
      var D = null;
      var N = p;
      if (y && (i.ts.isCallExpression(y) || i.ts.isIdentifier(y))) {
        D = t.getDocumentReferenceFromDocumentNode(y, f.fileName, u).node;
        N = y;
      } else if (b && i.ts.isTypeQueryNode(b)) {
        D = t.getDocumentReferenceFromTypeQuery(b, f.fileName, u).node;
        N = b;
      }
      if (!D) {
        g.push({
          message: `Could not find reference for "${N.getText()}".\nIf this is unexpected, please file an issue describing your case.`,
          file: h.file,
          line: h.line,
          col: h.col
        });
        continue;
      }
      if (!D || !i.ts.isCallExpression(D) || !i.ts.isNoSubstitutionTemplateLiteral(D.arguments[0]) && !i.ts.isStringLiteral(D.arguments[0])) {
        g.push({
          message: `The referenced document of "${N.getText()}" contains no document string literal.\nIf this is unexpected, please file an issue describing your case.`,
          file: h.file,
          line: h.line,
          col: h.col
        });
        continue;
      }
      var F = [];
      var V = D.arguments[0].getText().slice(1, -1);
      if (D.arguments[1] && i.ts.isArrayLiteralExpression(D.arguments[1])) {
        t.unrollTadaFragments(D.arguments[1], F, u);
      }
      var J = V;
      for (var T of F) {
        J += "\n\n" + print(T);
      }
      m[S.getText().slice(1, -1)] = J;
    }
    yield {
      kind: "FILE_PERSISTED",
      filePath: v,
      documents: m,
      warnings: g
    };
  }
}));

exports.runPersisted = c;
//# sourceMappingURL=thread-chunk.js.map
