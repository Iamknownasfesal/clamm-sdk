import * as e from "node:path";

import { ts as r, Project as i } from "ts-morph";

import { load as a } from "@gql.tada/internal";

import { init as o, getGraphQLDiagnostics as t } from "@0no-co/graphqlsp/api";

import { e as n, l as s, g as l } from "./index-chunk.mjs";

import { c as f } from "./project-chunk.mjs";

var g = n((async function* _runDiagnostics(n) {
  o({
    typescript: r
  });
  var g = e.dirname(n.configPath);
  var m = a({
    origin: n.pluginConfig.schema,
    rootPath: g
  });
  var c = new i({
    tsConfigFilePath: n.configPath
  });
  var p = await s(g, c, r);
  if (p) {
    yield {
      kind: "EXTERNAL_WARNING"
    };
  }
  var v = f(c, n.pluginConfig, g, p);
  var h = {
    current: (await m.load()).schema,
    version: 1
  };
  var d = c.getSourceFiles().filter((r => {
    var i = e.resolve(g, r.getFilePath());
    return !e.relative(n.rootPath, i).startsWith("..");
  }));
  yield {
    kind: "FILE_COUNT",
    fileCount: d.length
  };
  for (var {compilerNode: u} of d) {
    var y = u.fileName;
    var C = t(y, h, v);
    var N = [];
    if (C && C.length) {
      for (var P of C) {
        if (!("messageText" in P) || "string" != typeof P.messageText || !P.file) {
          continue;
        }
        var T = "info";
        if (P.category === r.DiagnosticCategory.Error) {
          T = "error";
        } else if (P.category === r.DiagnosticCategory.Warning) {
          T = "warn";
        }
        var k = l(u, P.start, P.length, p);
        y = k.file;
        N.push({
          severity: T,
          message: P.messageText,
          file: k.file,
          line: k.line,
          col: k.col,
          endLine: k.endLine,
          endColumn: k.endColumn
        });
      }
    }
    yield {
      kind: "FILE_DIAGNOSTICS",
      filePath: y,
      messages: N
    };
  }
}));

export { g as runDiagnostics };
//# sourceMappingURL=thread-chunk3.mjs.map
