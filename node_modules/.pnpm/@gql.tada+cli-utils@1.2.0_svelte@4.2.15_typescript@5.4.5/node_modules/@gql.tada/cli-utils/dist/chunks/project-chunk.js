exports.createPluginInfo = (e, r, i, t) => {
  var o = e.getLanguageService();
  return {
    config: r,
    languageService: {
      getReferencesAtPosition: (e, r) => {
        if (t) {
          var i = t(e, r);
          if (i && i.isVirtual) {
            e = i.fileId;
            r = i.position;
          }
        }
        return o.compilerObject.getReferencesAtPosition(e, r);
      },
      getDefinitionAtPosition: (e, r) => {
        if (t) {
          var i = t(e, r);
          if (i && i.isVirtual) {
            e = i.fileId;
            r = i.position;
          }
        }
        return o.compilerObject.getDefinitionAtPosition(e, r);
      },
      getProgram: () => {
        var r = e.getProgram();
        return {
          ...r,
          isSourceFileFromExternalLibrary(e) {
            if (t) {
              if (t(e.fileName)) {
                return !0;
              }
            }
            return r.isSourceFileFromExternalLibrary(e);
          },
          getTypeChecker: () => e.getTypeChecker().compilerObject,
          getSourceFile: r => {
            if (t) {
              var i = t(r);
              if (i && i.isVirtual) {
                r = i.fileId;
              }
            }
            var o = e.getSourceFile(r);
            return o && o.compilerNode;
          }
        };
      },
      getSemanticDiagnostics: () => []
    },
    languageServiceHost: {},
    project: {
      getProjectName: () => i,
      projectService: {
        logger: console
      }
    },
    serverHost: {}
  };
};
//# sourceMappingURL=project-chunk.js.map
