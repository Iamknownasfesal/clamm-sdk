var e = require("node:path");

var r = require("ts-morph");

var i = require("@gql.tada/internal");

var t = require("@0no-co/graphqlsp/api");

var a = require("./index-chunk.js");

var n = require("./project-chunk.js");

function _interopNamespaceDefault(e) {
  var r = Object.create(null);
  if (e) {
    Object.keys(e).forEach((function(i) {
      if ("default" !== i) {
        var t = Object.getOwnPropertyDescriptor(e, i);
        Object.defineProperty(r, i, t.get ? t : {
          enumerable: !0,
          get: function() {
            return e[i];
          }
        });
      }
    }));
  }
  r.default = e;
  return r;
}

var o = _interopNamespaceDefault(e);

var s = a.expose((async function* _runDiagnostics(e) {
  t.init({
    typescript: r.ts
  });
  var s = o.dirname(e.configPath);
  var l = i.load({
    origin: e.pluginConfig.schema,
    rootPath: s
  });
  var c = new r.Project({
    tsConfigFilePath: e.configPath
  });
  var f = await a.loadVirtualCode(s, c, r.ts);
  if (f) {
    yield {
      kind: "EXTERNAL_WARNING"
    };
  }
  var g = n.createPluginInfo(c, e.pluginConfig, s, f);
  var u = {
    current: (await l.load()).schema,
    version: 1
  };
  var v = c.getSourceFiles().filter((r => {
    var i = o.resolve(s, r.getFilePath());
    return !o.relative(e.rootPath, i).startsWith("..");
  }));
  yield {
    kind: "FILE_COUNT",
    fileCount: v.length
  };
  for (var {compilerNode: p} of v) {
    var d = p.fileName;
    var h = t.getGraphQLDiagnostics(d, u, g);
    var m = [];
    if (h && h.length) {
      for (var y of h) {
        if (!("messageText" in y) || "string" != typeof y.messageText || !y.file) {
          continue;
        }
        var P = "info";
        if (y.category === r.ts.DiagnosticCategory.Error) {
          P = "error";
        } else if (y.category === r.ts.DiagnosticCategory.Warning) {
          P = "warn";
        }
        var C = a.getFilePosition(p, y.start, y.length, f);
        d = C.file;
        m.push({
          severity: P,
          message: y.messageText,
          file: C.file,
          line: C.line,
          col: C.col,
          endLine: C.endLine,
          endColumn: C.endColumn
        });
      }
    }
    yield {
      kind: "FILE_DIAGNOSTICS",
      filePath: d,
      messages: m
    };
  }
}));

exports.runDiagnostics = s;
//# sourceMappingURL=thread-chunk3.js.map
