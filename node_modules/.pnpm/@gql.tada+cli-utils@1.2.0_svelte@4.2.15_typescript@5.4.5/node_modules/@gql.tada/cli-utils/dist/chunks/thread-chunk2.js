var e = require("node:path");

var r = require("ts-morph");

var a = require("@0no-co/graphqlsp/api");

var t = require("./index-chunk.js");

function _interopNamespaceDefault(e) {
  var r = Object.create(null);
  if (e) {
    Object.keys(e).forEach((function(a) {
      if ("default" !== a) {
        var t = Object.getOwnPropertyDescriptor(e, a);
        Object.defineProperty(r, a, t.get ? t : {
          enumerable: !0,
          get: function() {
            return e[a];
          }
        });
      }
    }));
  }
  r.default = e;
  return r;
}

var i = _interopNamespaceDefault(e);

var n = t.expose((async function* _runTurbo(e) {
  a.init({
    typescript: r.ts
  });
  var n = i.dirname(e.configPath);
  var s = new r.Project({
    tsConfigFilePath: e.configPath,
    skipAddingFilesFromTsConfig: !0
  });
  var c = s.createSourceFile("__gql-tada-override__.d.ts", l, {
    overwrite: !0,
    scriptKind: r.ScriptKind.TS
  });
  if (c._markAsInProject) {
    c._markAsInProject();
  }
  s.addSourceFilesFromTsConfig(e.configPath);
  var p = await t.loadVirtualCode(n, s, r.ts);
  if (p) {
    yield {
      kind: "EXTERNAL_WARNING"
    };
  }
  var u = s.getSourceFiles().filter((r => {
    var a = i.resolve(n, r.getFilePath());
    return !i.relative(e.rootPath, a).startsWith("..");
  }));
  yield {
    kind: "FILE_COUNT",
    fileCount: u.length
  };
  var d = s.getTypeChecker().compilerObject;
  for (var {compilerNode: f} of u) {
    var g = f.fileName;
    var m = {};
    var v = [];
    var y = findAllCallExpressions(f, e.pluginConfig);
    for (var T of y) {
      var F = d.getTypeAtLocation(T);
      var h = d.getTypeAtLocation(T.arguments[0]);
      if (!F.symbol || "TadaDocumentNode" !== F.symbol.getEscapedName()) {
        var S = t.getFilePosition(f, T.getStart(), void 0, p);
        g = S.file;
        v.push({
          message: 'The discovered document is not of type "TadaDocumentNode".\nIf this is unexpected, please file an issue describing your case.',
          file: S.file,
          line: S.line,
          col: S.col
        });
        continue;
      }
      m["value" in h && "string" == typeof h.value && 0 == (h.flags & r.TypeFlags.StringLiteral) ? JSON.stringify(h.value) : d.typeToString(h, T, o)] = d.typeToString(F, T, o);
    }
    yield {
      kind: "FILE_TURBO",
      filePath: g,
      cache: m,
      warnings: v
    };
  }
}));

var o = r.TypeFormatFlags.NoTruncation | r.TypeFormatFlags.NoTypeReduction | r.TypeFormatFlags.InTypeAlias | r.TypeFormatFlags.UseFullyQualifiedType | r.TypeFormatFlags.GenerateNamesForShadowedTypeParams | r.TypeFormatFlags.UseAliasDefinedOutsideCurrentScope | r.TypeFormatFlags.AllowUniqueESSymbolType | r.TypeFormatFlags.WriteTypeArgumentsOfSignature;

var l = "\nimport * as _gqlTada from 'gql.tada';\ndeclare module 'gql.tada' {\n  interface setupCache {\n    readonly __cacheDisabled: true;\n  }\n}\n".trim();

function findAllCallExpressions(e, a) {
  var t = [];
  var i = new Set([ a.template, "graphql", "gql" ].filter(Boolean));
  !function find(e) {
    if (r.ts.isCallExpression(e) && i.has(e.expression.getText())) {
      t.push(e);
      return;
    } else {
      r.ts.forEachChild(e, find);
    }
  }(e);
  return t;
}

exports.runTurbo = n;
//# sourceMappingURL=thread-chunk2.js.map
