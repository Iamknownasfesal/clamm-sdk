{"version":3,"file":"vue-chunk.mjs","sources":["../../src/ts/virtualCode/vue.ts"],"sourcesContent":["import type { VirtualCode } from '@vue/language-core';\nimport { forEachEmbeddedCode, getDefaultVueLanguagePlugins } from '@vue/language-core';\nimport * as vueCompilerDOM from '@vue/compiler-dom';\nimport * as vue from '@vue/language-core';\n\nimport type { CreateVirtualCode } from './types';\n\nconst VueVirtualCode =\n  vue.VueGeneratedCode || ((vue as any).VirtualCode as typeof vue.VueGeneratedCode);\n\nconst vueCompilerOptions = vue.resolveVueCompilerOptions({});\n\nlet plugins: ReturnType<typeof getDefaultVueLanguagePlugins> | undefined;\n\nexport const createVirtualCode: CreateVirtualCode = (\n  fileId,\n  snapshot,\n  ts\n): VirtualCode | undefined => {\n  if (!plugins) {\n    plugins = getDefaultVueLanguagePlugins({\n      modules: {\n        typescript: ts,\n        '@vue/compiler-dom': vueCompilerDOM,\n      },\n      compilerOptions: {},\n      codegenStack: false,\n      globalTypesHolder: undefined,\n      vueCompilerOptions,\n    });\n  }\n\n  const root = new VueVirtualCode(fileId, 'vue', snapshot, vueCompilerOptions, plugins, ts, false);\n  for (const code of forEachEmbeddedCode(root)) if (code.id.startsWith('script_')) return code;\n};\n"],"names":["VueVirtualCode","vue","VueGeneratedCode","VirtualCode","vueCompilerOptions","resolveVueCompilerOptions","plugins","createVirtualCode","fileId","snapshot","ts","getDefaultVueLanguagePlugins","modules","typescript","vueCompilerDOM","compilerOptions","codegenStack","globalTypesHolder","undefined","root","code","forEachEmbeddedCode","id","startsWith"],"mappings":";;;;;;AAOA,IAAMA,IACJC,EAAIC,oBAAsBD,EAAYE;;AAExC,IAAMC,IAAqBH,EAAII,0BAA0B,CAAA;;AAEzD,IAAIC;;AAEG,IAAMC,oBAAuCA,CAClDC,GACAC,GACAC;EAEA,KAAKJ;IACHA,IAAUK,EAA6B;MACrCC,SAAS;QACPC,YAAYH;QACZ,qBAAqBI;;MAEvBC,iBAAiB,CAAE;MACnBC,eAAc;MACdC,wBAAmBC;MACnBd;;;EAIJ,IAAMe,IAAO,IAAInB,EAAeQ,GAAQ,OAAOC,GAAUL,GAAoBE,GAASI,IAAI;EAC1F,KAAK,IAAMU,KAAQC,EAAoBF;IAAO,IAAIC,EAAKE,GAAGC,WAAW;MAAY,OAAOH;;;AAAI;;"}