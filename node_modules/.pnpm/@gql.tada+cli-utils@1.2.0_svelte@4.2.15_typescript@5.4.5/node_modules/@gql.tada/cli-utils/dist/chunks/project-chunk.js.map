{"version":3,"file":"project-chunk.js","sources":["../../src/ts/project.ts"],"sourcesContent":["import type { GraphQLSPConfig } from '@gql.tada/internal';\nimport type { Project } from 'ts-morph';\n\nimport type { TranslatePosition } from './virtualCode';\n\nexport const createPluginInfo = (\n  project: Project,\n  config: GraphQLSPConfig,\n  projectPath: string,\n  getPosition?: TranslatePosition\n): any => {\n  const languageService = project.getLanguageService();\n  return {\n    config,\n    languageService: {\n      getReferencesAtPosition: (filename, position) => {\n        if (getPosition) {\n          const output = getPosition(filename, position);\n          if (output && output.isVirtual) {\n            filename = output.fileId;\n            position = output.position;\n          }\n        }\n        return languageService.compilerObject.getReferencesAtPosition(filename, position);\n      },\n      getDefinitionAtPosition: (filename, position) => {\n        if (getPosition) {\n          const output = getPosition(filename, position);\n          if (output && output.isVirtual) {\n            filename = output.fileId;\n            position = output.position;\n          }\n        }\n        return languageService.compilerObject.getDefinitionAtPosition(filename, position);\n      },\n      getProgram: () => {\n        const program = project.getProgram();\n        return {\n          ...program,\n          isSourceFileFromExternalLibrary(source) {\n            if (getPosition) {\n              const output = getPosition(source.fileName);\n              if (output) return true;\n            }\n            return program.isSourceFileFromExternalLibrary(source);\n          },\n          getTypeChecker: () => project.getTypeChecker().compilerObject,\n          getSourceFile: (filepath) => {\n            if (getPosition) {\n              const output = getPosition(filepath);\n              if (output && output.isVirtual) filepath = output.fileId;\n            }\n            const source = project.getSourceFile(filepath);\n            return source && source.compilerNode;\n          },\n        };\n      },\n      // This prevents us from exposing normal diagnostics\n      getSemanticDiagnostics: () => [],\n    } as any,\n    languageServiceHost: {} as any,\n    project: {\n      getProjectName: () => projectPath,\n      projectService: {\n        logger: console,\n      },\n    } as any,\n    serverHost: {} as any,\n  };\n};\n"],"names":["createPluginInfo","project","config","projectPath","getPosition","languageService","getLanguageService","getReferencesAtPosition","filename","position","output","isVirtual","fileId","compilerObject","getDefinitionAtPosition","getProgram","program","isSourceFileFromExternalLibrary","source","fileName","getTypeChecker","getSourceFile","filepath","compilerNode","getSemanticDiagnostics","languageServiceHost","getProjectName","projectService","logger","console","serverHost"],"mappings":"2BAKgCA,CAC9BC,GACAC,GACAC,GACAC;EAEA,IAAMC,IAAkBJ,EAAQK;EAChC,OAAO;IACLJ;IACAG,iBAAiB;MACfE,yBAAyBA,CAACC,GAAUC;QAClC,IAAIL,GAAa;UACf,IAAMM,IAASN,EAAYI,GAAUC;UACrC,IAAIC,KAAUA,EAAOC,WAAW;YAC9BH,IAAWE,EAAOE;YAClBH,IAAWC,EAAOD;AACpB;AACF;QACA,OAAOJ,EAAgBQ,eAAeN,wBAAwBC,GAAUC;AAAS;MAEnFK,yBAAyBA,CAACN,GAAUC;QAClC,IAAIL,GAAa;UACf,IAAMM,IAASN,EAAYI,GAAUC;UACrC,IAAIC,KAAUA,EAAOC,WAAW;YAC9BH,IAAWE,EAAOE;YAClBH,IAAWC,EAAOD;AACpB;AACF;QACA,OAAOJ,EAAgBQ,eAAeC,wBAAwBN,GAAUC;AAAS;MAEnFM,YAAYA;QACV,IAAMC,IAAUf,EAAQc;QACxB,OAAO;aACFC;UACHC,+BAAAA,CAAgCC;YAC9B,IAAId,GAAa;cAEf,IADeA,EAAYc,EAAOC;gBACtB,QAAO;;AACrB;YACA,OAAOH,EAAQC,gCAAgCC;AAChD;UACDE,gBAAgBA,MAAMnB,EAAQmB,iBAAiBP;UAC/CQ,eAAgBC;YACd,IAAIlB,GAAa;cACf,IAAMM,IAASN,EAAYkB;cAC3B,IAAIZ,KAAUA,EAAOC;gBAAWW,IAAWZ,EAAOE;;AACpD;YACA,IAAMM,IAASjB,EAAQoB,cAAcC;YACrC,OAAOJ,KAAUA,EAAOK;AAAY;;AAEvC;MAGHC,wBAAwBA,MAAM;;IAEhCC,qBAAqB,CAAS;IAC9BxB,SAAS;MACPyB,gBAAgBA,MAAMvB;MACtBwB,gBAAgB;QACdC,QAAQC;;;IAGZC,YAAY,CAAC;;AACd"}