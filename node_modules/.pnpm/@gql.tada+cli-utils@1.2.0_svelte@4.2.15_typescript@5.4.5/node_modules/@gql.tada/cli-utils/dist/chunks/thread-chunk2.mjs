import * as e from "node:path";

import { TypeFormatFlags as i, ts as r, Project as a, ScriptKind as t, TypeFlags as n } from "ts-morph";

import { init as o } from "@0no-co/graphqlsp/api";

import { e as l, l as s, g as d } from "./index-chunk.mjs";

var f = l((async function* _runTurbo(i) {
  o({
    typescript: r
  });
  var l = e.dirname(i.configPath);
  var f = new a({
    tsConfigFilePath: i.configPath,
    skipAddingFilesFromTsConfig: !0
  });
  var u = f.createSourceFile("__gql-tada-override__.d.ts", p, {
    overwrite: !0,
    scriptKind: t.TS
  });
  if (u._markAsInProject) {
    u._markAsInProject();
  }
  f.addSourceFilesFromTsConfig(i.configPath);
  var g = await s(l, f, r);
  if (g) {
    yield {
      kind: "EXTERNAL_WARNING"
    };
  }
  var m = f.getSourceFiles().filter((r => {
    var a = e.resolve(l, r.getFilePath());
    return !e.relative(i.rootPath, a).startsWith("..");
  }));
  yield {
    kind: "FILE_COUNT",
    fileCount: m.length
  };
  var v = f.getTypeChecker().compilerObject;
  for (var {compilerNode: h} of m) {
    var y = h.fileName;
    var T = {};
    var S = [];
    var A = findAllCallExpressions(h, i.pluginConfig);
    for (var C of A) {
      var N = v.getTypeAtLocation(C);
      var _ = v.getTypeAtLocation(C.arguments[0]);
      if (!N.symbol || "TadaDocumentNode" !== N.symbol.getEscapedName()) {
        var F = d(h, C.getStart(), void 0, g);
        y = F.file;
        S.push({
          message: 'The discovered document is not of type "TadaDocumentNode".\nIf this is unexpected, please file an issue describing your case.',
          file: F.file,
          line: F.line,
          col: F.col
        });
        continue;
      }
      T["value" in _ && "string" == typeof _.value && 0 == (_.flags & n.StringLiteral) ? JSON.stringify(_.value) : v.typeToString(_, C, c)] = v.typeToString(N, C, c);
    }
    yield {
      kind: "FILE_TURBO",
      filePath: y,
      cache: T,
      warnings: S
    };
  }
}));

var c = i.NoTruncation | i.NoTypeReduction | i.InTypeAlias | i.UseFullyQualifiedType | i.GenerateNamesForShadowedTypeParams | i.UseAliasDefinedOutsideCurrentScope | i.AllowUniqueESSymbolType | i.WriteTypeArgumentsOfSignature;

var p = "\nimport * as _gqlTada from 'gql.tada';\ndeclare module 'gql.tada' {\n  interface setupCache {\n    readonly __cacheDisabled: true;\n  }\n}\n".trim();

function findAllCallExpressions(e, i) {
  var a = [];
  var t = new Set([ i.template, "graphql", "gql" ].filter(Boolean));
  !function find(e) {
    if (r.isCallExpression(e) && t.has(e.expression.getText())) {
      a.push(e);
      return;
    } else {
      r.forEachChild(e, find);
    }
  }(e);
  return a;
}

export { f as runTurbo };
//# sourceMappingURL=thread-chunk2.mjs.map
